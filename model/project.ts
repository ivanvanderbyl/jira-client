/**
 * Jira Cloud REST API
 * Jira Cloud REST API documentation
 *
 * OpenAPI spec version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { AvatarUrls } from './avatarUrls';
import { Component } from './component';
import { IssueType } from './issueType';
import { ProjectCategory } from './projectCategory';
import { User } from './user';
import { Version } from './version';

/**
* Details about a project.
*/
export class Project {
    /**
    * Expand options that include additional project details in the response.
    */
    'expand'?: string;
    /**
    * The URL of the project details.
    */
    'self'?: string;
    /**
    * The ID of the project.
    */
    'id'?: string;
    /**
    * The key of the project.
    */
    'key'?: string;
    /**
    * A brief description of the project.
    */
    'description'?: string;
    /**
    * The username of the project lead.
    */
    'lead'?: User;
    /**
    * List of the components contained in the project.
    */
    'components'?: Array<Component>;
    /**
    * List of the issue types available in the project.
    */
    'issueTypes'?: Array<IssueType>;
    /**
    * A link to information about this project, such as project documentation.
    */
    'url'?: string;
    /**
    * An email address associated with the project.
    */
    'email'?: string;
    /**
    * The default assignee when creating issues for this project.
    */
    'assigneeType'?: Project.AssigneeTypeEnum;
    /**
    * The versions defined in the project. For more information, see [Create version](#api-api-3-version-post).
    */
    'versions'?: Array<Version>;
    /**
    * The name of the project.
    */
    'name'?: string;
    /**
    * The name and self URL for each role defined in the project. For more information, see [Create project role](#api-api-3-role-post).
    */
    'roles'?: { [key: string]: string; };
    /**
    * The URLs of the project's avatars.
    */
    'avatarUrls'?: AvatarUrls;
    /**
    * The category the project belongs to.
    */
    'projectCategory'?: ProjectCategory;
    /**
    * The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.
    */
    'projectTypeKey'?: Project.ProjectTypeKeyEnum;
    /**
    * Indicates whether the project is simplified.
    */
    'simplified'?: boolean;
    /**
    * The type of the project.
    */
    'style'?: Project.StyleEnum;
    /**
    * Indicates whether the project is private.
    */
    'isPrivate'?: boolean;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "expand",
            "baseName": "expand",
            "type": "string"
        },
        {
            "name": "self",
            "baseName": "self",
            "type": "string"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "key",
            "baseName": "key",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "lead",
            "baseName": "lead",
            "type": "User"
        },
        {
            "name": "components",
            "baseName": "components",
            "type": "Array<Component>"
        },
        {
            "name": "issueTypes",
            "baseName": "issueTypes",
            "type": "Array<IssueType>"
        },
        {
            "name": "url",
            "baseName": "url",
            "type": "string"
        },
        {
            "name": "email",
            "baseName": "email",
            "type": "string"
        },
        {
            "name": "assigneeType",
            "baseName": "assigneeType",
            "type": "Project.AssigneeTypeEnum"
        },
        {
            "name": "versions",
            "baseName": "versions",
            "type": "Array<Version>"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "roles",
            "baseName": "roles",
            "type": "{ [key: string]: string; }"
        },
        {
            "name": "avatarUrls",
            "baseName": "avatarUrls",
            "type": "AvatarUrls"
        },
        {
            "name": "projectCategory",
            "baseName": "projectCategory",
            "type": "ProjectCategory"
        },
        {
            "name": "projectTypeKey",
            "baseName": "projectTypeKey",
            "type": "Project.ProjectTypeKeyEnum"
        },
        {
            "name": "simplified",
            "baseName": "simplified",
            "type": "boolean"
        },
        {
            "name": "style",
            "baseName": "style",
            "type": "Project.StyleEnum"
        },
        {
            "name": "isPrivate",
            "baseName": "isPrivate",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return Project.attributeTypeMap;
    }
}

export namespace Project {
    export enum AssigneeTypeEnum {
        PROJECTLEAD = <any> 'PROJECT_LEAD',
        UNASSIGNED = <any> 'UNASSIGNED'
    }
    export enum ProjectTypeKeyEnum {
        Ops = <any> 'ops',
        Software = <any> 'software',
        ServiceDesk = <any> 'service_desk',
        Business = <any> 'business'
    }
    export enum StyleEnum {
        Classic = <any> 'classic',
        NextGen = <any> 'next-gen'
    }
}
