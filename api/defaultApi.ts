/**
 * Jira Cloud REST API
 * Jira Cloud REST API documentation
 *
 * OpenAPI spec version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import localVarRequest = require('request');
import http = require('http');
// import Promise = require('bluebird');

/* tslint:disable:no-unused-locals */
import { ActorInputBean } from '../model/actorInputBean';
import { ActorsMap } from '../model/actorsMap';
import { AddFieldBean } from '../model/addFieldBean';
import { AddGroupBean } from '../model/addGroupBean';
import { ApplicationProperty } from '../model/applicationProperty';
import { ApplicationRole } from '../model/applicationRole';
import { Attachment } from '../model/attachment';
import { AttachmentArchiveMetadata } from '../model/attachmentArchiveMetadata';
import { AttachmentArchiveMetadataReadable } from '../model/attachmentArchiveMetadataReadable';
import { AttachmentMetadata } from '../model/attachmentMetadata';
import { AttachmentSettings } from '../model/attachmentSettings';
import { AuditRecords } from '../model/auditRecords';
import { AutoCompleteSuggestions } from '../model/autoCompleteSuggestions';
import { Avatar } from '../model/avatar';
import { Avatars } from '../model/avatars';
import { BulkIssuePropertyUpdateRequest } from '../model/bulkIssuePropertyUpdateRequest';
import { BulkPermissionGrants } from '../model/bulkPermissionGrants';
import { BulkPermissionsRequestBean } from '../model/bulkPermissionsRequestBean';
import { ChangedWorklogs } from '../model/changedWorklogs';
import { ColumnItem } from '../model/columnItem';
import { Comment } from '../model/comment';
import { Component } from '../model/component';
import { ComponentIssuesCount } from '../model/componentIssuesCount';
import { Configuration } from '../model/configuration';
import { ConvertedJQLQueries } from '../model/convertedJQLQueries';
import { CreateUpdateRoleRequestBean } from '../model/createUpdateRoleRequestBean';
import { CreatedIssue } from '../model/createdIssue';
import { CreatedIssues } from '../model/createdIssues';
import { CustomFieldDefinitionJsonBean } from '../model/customFieldDefinitionJsonBean';
import { CustomFieldOption } from '../model/customFieldOption';
import { Dashboard } from '../model/dashboard';
import { DefaultShareScope } from '../model/defaultShareScope';
import { DefaultWorkflow } from '../model/defaultWorkflow';
import { DeleteAndReplaceVersionBean } from '../model/deleteAndReplaceVersionBean';
import { EntityProperty } from '../model/entityProperty';
import { ErrorCollection } from '../model/errorCollection';
import { Field } from '../model/field';
import { Filter } from '../model/filter';
import { FoundGroups } from '../model/foundGroups';
import { FoundUsers } from '../model/foundUsers';
import { FoundUsersAndGroups } from '../model/foundUsersAndGroups';
import { Group } from '../model/group';
import { GroupName } from '../model/groupName';
import { IdBean } from '../model/idBean';
import { Issue } from '../model/issue';
import { IssueCommentListRequestBean } from '../model/issueCommentListRequestBean';
import { IssueCreateMetadata } from '../model/issueCreateMetadata';
import { IssueFieldOption } from '../model/issueFieldOption';
import { IssueFieldOptionCreateBean } from '../model/issueFieldOptionCreateBean';
import { IssueFilterForBulkPropertyDelete } from '../model/issueFilterForBulkPropertyDelete';
import { IssueLink } from '../model/issueLink';
import { IssueLinkType } from '../model/issueLinkType';
import { IssueLinkTypes } from '../model/issueLinkTypes';
import { IssuePickerSuggestions } from '../model/issuePickerSuggestions';
import { IssueType } from '../model/issueType';
import { IssueTypeCreateBean } from '../model/issueTypeCreateBean';
import { IssueTypeUpdateBean } from '../model/issueTypeUpdateBean';
import { IssueTypeWithStatus } from '../model/issueTypeWithStatus';
import { IssueTypeWorkflowMapping } from '../model/issueTypeWorkflowMapping';
import { IssueTypesWorkflowMapping } from '../model/issueTypesWorkflowMapping';
import { IssueUpdateDetails } from '../model/issueUpdateDetails';
import { IssueUpdateMetadata } from '../model/issueUpdateMetadata';
import { IssuesUpdateBean } from '../model/issuesUpdateBean';
import { JQLPersonalDataMigrationRequest } from '../model/jQLPersonalDataMigrationRequest';
import { JQLReferenceData } from '../model/jQLReferenceData';
import { JiraExpressionEvalRequestBean } from '../model/jiraExpressionEvalRequestBean';
import { JiraExpressionResult } from '../model/jiraExpressionResult';
import { LinkIssueRequestJsonBean } from '../model/linkIssueRequestJsonBean';
import { Locale } from '../model/locale';
import { MoveFieldBean } from '../model/moveFieldBean';
import { Notification } from '../model/notification';
import { NotificationScheme } from '../model/notificationScheme';
import { PageOfChangelog } from '../model/pageOfChangelog';
import { PageOfComment } from '../model/pageOfComment';
import { PageOfComments } from '../model/pageOfComments';
import { PageOfComponentWithIssueCount } from '../model/pageOfComponentWithIssueCount';
import { PageOfDashboard } from '../model/pageOfDashboard';
import { PageOfDashboards } from '../model/pageOfDashboards';
import { PageOfFoundFilter } from '../model/pageOfFoundFilter';
import { PageOfIssueFieldOption } from '../model/pageOfIssueFieldOption';
import { PageOfNotificationScheme } from '../model/pageOfNotificationScheme';
import { PageOfProject } from '../model/pageOfProject';
import { PageOfScreen } from '../model/pageOfScreen';
import { PageOfUser } from '../model/pageOfUser';
import { PageOfUserDetails } from '../model/pageOfUserDetails';
import { PageOfUserKey } from '../model/pageOfUserKey';
import { PageOfVersion } from '../model/pageOfVersion';
import { PageOfWorklogs } from '../model/pageOfWorklogs';
import { PermissionGrant } from '../model/permissionGrant';
import { PermissionGrants } from '../model/permissionGrants';
import { PermissionScheme } from '../model/permissionScheme';
import { PermissionSchemes } from '../model/permissionSchemes';
import { Permissions } from '../model/permissions';
import { PermissionsKeysBean } from '../model/permissionsKeysBean';
import { PermittedProjects } from '../model/permittedProjects';
import { Priority } from '../model/priority';
import { Project } from '../model/project';
import { ProjectAvatars } from '../model/projectAvatars';
import { ProjectCategory } from '../model/projectCategory';
import { ProjectIdentifiers } from '../model/projectIdentifiers';
import { ProjectInputBean } from '../model/projectInputBean';
import { ProjectIssueSecurityLevels } from '../model/projectIssueSecurityLevels';
import { ProjectRole } from '../model/projectRole';
import { ProjectRoleActorsUpdateBean } from '../model/projectRoleActorsUpdateBean';
import { ProjectType } from '../model/projectType';
import { PropertyKeys } from '../model/propertyKeys';
import { RemoteIssueLink } from '../model/remoteIssueLink';
import { RemoteIssueLinkIdentifies } from '../model/remoteIssueLinkIdentifies';
import { RemoteIssueLinkRequest } from '../model/remoteIssueLinkRequest';
import { Resolution } from '../model/resolution';
import { ScreenableField } from '../model/screenableField';
import { ScreenableTab } from '../model/screenableTab';
import { SearchRequestBean } from '../model/searchRequestBean';
import { SearchResults } from '../model/searchResults';
import { SecurityLevel } from '../model/securityLevel';
import { SecurityScheme } from '../model/securityScheme';
import { SecuritySchemes } from '../model/securitySchemes';
import { ServerInformation } from '../model/serverInformation';
import { SharePermission } from '../model/sharePermission';
import { SharePermissionInputBean } from '../model/sharePermissionInputBean';
import { SimpleApplicationPropertyBean } from '../model/simpleApplicationPropertyBean';
import { StatusCategory } from '../model/statusCategory';
import { StatusDetails } from '../model/statusDetails';
import { SystemAvatars } from '../model/systemAvatars';
import { TaskProgressObject } from '../model/taskProgressObject';
import { TaskProgressRemoveOptionFromIssues } from '../model/taskProgressRemoveOptionFromIssues';
import { TimeTrackingConfiguration } from '../model/timeTrackingConfiguration';
import { TimeTrackingProvider } from '../model/timeTrackingProvider';
import { Transitions } from '../model/transitions';
import { UpdateUserToGroupBean } from '../model/updateUserToGroupBean';
import { UpdatedProjectCategory } from '../model/updatedProjectCategory';
import { User } from '../model/user';
import { UserMigrationBean } from '../model/userMigrationBean';
import { UserWriteBean } from '../model/userWriteBean';
import { Version } from '../model/version';
import { VersionIssueCounts } from '../model/versionIssueCounts';
import { VersionMoveBean } from '../model/versionMoveBean';
import { VersionUnresolvedIssuesCount } from '../model/versionUnresolvedIssuesCount';
import { Votes } from '../model/votes';
import { Watchers } from '../model/watchers';
import { Workflow } from '../model/workflow';
import { WorkflowScheme } from '../model/workflowScheme';
import { WorkflowTransitionProperty } from '../model/workflowTransitionProperty';
import { Worklog } from '../model/worklog';
import { WorklogIdsRequestBean } from '../model/worklogIdsRequestBean';

import { ObjectSerializer, Authentication, HttpBasicAuth, ApiKeyAuth, OAuth, VoidAuth } from '../model/models';

let defaultBasePath = 'https://your-domain.atlassian.net/rest';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum DefaultApiApiKeys {
}

export class DefaultApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'OAuth2': new OAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: DefaultApiApiKeys, value: string) {
        (this.authentications as any)[DefaultApiApiKeys[key]].apiKey = value;
    }

    set accessToken(token: string) {
        this.authentications.OAuth2.accessToken = token;
    }

    /**
     * Returns the application properties that are accessible on the _Advanced Settings_ page. To navigate to the _Advanced Settings_ page in Jira, choose the Jira icon > **Jira settings** \\> **System**, **General Configuration** and then click **Advanced Settings** (in the upper right).  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Get advanced settings
     */
    public comAtlassianJiraRestV2AdminApplicationPropertiesResourceGetAdvancedSettingsGet (options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Array<ApplicationProperty>;  }> {
        const localVarPath = this.basePath + '/api/3/application-properties/advanced-settings';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<ApplicationProperty>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<ApplicationProperty>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns all application properties or a single application property.  If you specify a value for the `key` parameter, then a single application property is returned as an object (not in an array). Otherwise, an array of all editable application properties is returned. See [Set application property](#api-api-3-application-properties-id-put) for descriptions of editable properties.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Get application property
     * @param key The key of the application property.
     * @param permissionLevel The permission level of all items being returned in the list.
     * @param keyFilter When a &#x60;key&#x60; isn&#39;t provided, this filters the list of results by the application property &#x60;key&#x60; using a regular expression. For example, using &#x60;jira.lf.*&#x60; will return all application properties with keys that start with _jira.lf._.
     */
    public comAtlassianJiraRestV2AdminApplicationPropertiesResourceGetApplicationPropertyGet (key?: string, permissionLevel?: string, keyFilter?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Array<ApplicationProperty>;  }> {
        const localVarPath = this.basePath + '/api/3/application-properties';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (key !== undefined) {
            localVarQueryParameters['key'] = ObjectSerializer.serialize(key, "string");
        }

        if (permissionLevel !== undefined) {
            localVarQueryParameters['permissionLevel'] = ObjectSerializer.serialize(permissionLevel, "string");
        }

        if (keyFilter !== undefined) {
            localVarQueryParameters['keyFilter'] = ObjectSerializer.serialize(keyFilter, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<ApplicationProperty>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<ApplicationProperty>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Changes the value of an application property. For example, you can change the value of the `jira.clone.prefix` from its default value of _CLONE -_ to _Clone -_ if you prefer sentence case capitalization. Editable properties are described below along with their default values.  #### Advanced settings  The advanced settings below are also accessible in [Jira](https://confluence.atlassian.com/x/vYXKM).  | Key | Description | Default value | | --- | --- | --- | | `jira.clone.prefix` | A string of text that automatically precedes the title of a cloned issue. | `CLONE -` | | `jira.date.picker.java.format` | The date format for the Java (server-side) generated dates. This must be the same as the `jira.date.picker.javascript.format` format setting. | `d/MMM/yy` | | `jira.date.picker.javascript.format` | This date format is for the JavaScript (client-side) generated dates. This must be the same as the `jira.date.picker.java.format` format setting. | `%e/%b/%y` | | `jira.date.time.picker.java.format` | The date format for the Java (server-side) generated date times. This must be the same as the `jira.date.time.picker.javascript.format` format setting. | `dd/MMM/yy h:mm a` | | `jira.date.time.picker.javascript.format` | This date format is for the JavaScript (client-side) generated date times. This must be the same as the `jira.date.time.picker.java.format` format setting. | `%e/%b/%y %I:%M %p` | | `jira.issue.actions.order` | The default order of actions (such as _Comments_ or _Change history_) displayed on the issue view. | `asc` | | `jira.table.cols.subtasks` | The columns to show while viewing sub-task issues in a table. For example, a list of sub-tasks on a particular issue. | `issuetype, status, assignee, progress` | | `jira.view.issue.links.sort.order` | The sort order of the list of issue links on the issue view. | `type, status, priority` | | `jira.comment.collapsing.minimum.hidden` | The minimum number of comments required for comment collapsing to occur. A value of `0` disables comment collapsing. | `4` | | `jira.newsletter.tip.delay.days` | The number of days before a prompt to sign up to the Jira Insiders newsletter is shown. A value of `-1` disables this functionality. | `7` |  #### Look and feel  The settings listed below adjust the [look and feel](https://confluence.atlassian.com/x/VwCLLg).  | Key | Description | Default value | | --- | --- | --- | | `jira.lf.date.time` | Look and feel of the [time format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `h:mm a` | | `jira.lf.date.day` | Look and feel of the [day format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `EEEE h:mm a` | | `jira.lf.date.complete` | Look and feel of the [date and time format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `dd/MMM/yy h:mm a` | | `jira.lf.date.dmy` | Look and feel of the [date format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `dd/MMM/yy` | | `jira.date.time.picker.use.iso8061` | When enabled, sets Monday as the first day of the week in the date picker, as specified by the ISO8601 standard. | `false` | | `jira.lf.logo.url` | The URL of the logo image file. | `/images/icon-jira-logo.png` | | `jira.lf.logo.show.application.title` | Controls the visibility of the application title on the sidebar. | `false` | | `jira.lf.favicon.url` | The URL of the favicon. | `/favicon.ico` | | `jira.lf.favicon.hires.url` | The URL of the high resolution favicon. | `/images/64jira.png` | | `jira.lf.top.adg3.bgcolour` | The background color of the sidebar. | `#0747A6` | | `jira.lf.top.adg3.textcolour` | The color of the text and logo of the sidebar. | `#DEEBFF` | | `jira.lf.hero.button.base.bg.colour` |  | `#3b7fc4` | | `jira.title` | The text for the application title. The application title can also be set in _General settings_. | `Jira` | | `jira.option.globalsharing` | boolean | `true` | | `xflow.product.suggestions.enabled` | Indicate whether or not to expose product suggestions for other Atlassian products within Jira. | `true` |  #### Other settings  | Key | Description | Default value | | --- | --- | --- | | `jira.issuenav.criteria.autoupdate` | Supports instant updates to search criteria. | `true` |  _Note: Be careful when changing [application properties and advanced settings](https://confluence.atlassian.com/x/vYXKM)._  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Set application property
     * @param id The key of the application property to update.
     * @param simpleApplicationPropertyBean
     */
    public comAtlassianJiraRestV2AdminApplicationPropertiesResourceSetApplicationPropertyPut (id: string, simpleApplicationPropertyBean: SimpleApplicationPropertyBean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: ApplicationProperty;  }> {
        const localVarPath = this.basePath + '/api/3/application-properties/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2AdminApplicationPropertiesResourceSetApplicationPropertyPut.');
        }

        // verify required parameter 'simpleApplicationPropertyBean' is not null or undefined
        if (simpleApplicationPropertyBean === null || simpleApplicationPropertyBean === undefined) {
            throw new Error('Required parameter simpleApplicationPropertyBean was null or undefined when calling comAtlassianJiraRestV2AdminApplicationPropertiesResourceSetApplicationPropertyPut.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(simpleApplicationPropertyBean, "SimpleApplicationPropertyBean")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ApplicationProperty;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ApplicationProperty");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns all application roles. In Jira, application roles are managed using the [Application access configuration](https://confluence.atlassian.com/x/3YxjL) page.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Get all application roles
     */
    public comAtlassianJiraRestV2AdminApplicationroleApplicationRoleResourceGetAllApplicationRolesGet (options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Array<ApplicationRole>;  }> {
        const localVarPath = this.basePath + '/api/3/applicationrole';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<ApplicationRole>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<ApplicationRole>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns an application role.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Get application role
     * @param key The key of the application role. Use the [Get all application roles](#api-api-3-applicationrole-get) method to get the key for each application role.
     */
    public comAtlassianJiraRestV2AdminApplicationroleApplicationRoleResourceGetApplicationRoleGet (key: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: ApplicationRole;  }> {
        const localVarPath = this.basePath + '/api/3/applicationrole/{key}'
            .replace('{' + 'key' + '}', encodeURIComponent(String(key)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'key' is not null or undefined
        if (key === null || key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling comAtlassianJiraRestV2AdminApplicationroleApplicationRoleResourceGetApplicationRoleGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ApplicationRole;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ApplicationRole");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns a list of audit records. The list can be filtered to include items:  *   containing a string in at least one field. For example, providing _up_ will return all audit records where one or more fields contains words such as _update_. *   created on or after a date and time. *   created or or before a date and time. *   created during a time period.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Get audit records
     * @param offset The number of records to skip before returning the first result.
     * @param limit The maximum number of results to return. The maximum is &#x60;1000&#x60;.
     * @param filter The query string.
     * @param from The date and time on or after which returned audit records must have been created. If &#x60;to&#x60; is provided &#x60;from&#x60; must be before &#x60;to&#x60; or the result set will be empty.
     * @param to The date and time on or before which returned audit results must have been created. If &#x60;from&#x60; is provided &#x60;to&#x60; must be after &#x60;from&#x60; or the result set will be empty.
     */
    public comAtlassianJiraRestV2AdminAuditingAuditingResourceGetAuditRecordsGet (offset?: number, limit?: number, filter?: string, from?: Date, to?: Date, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: AuditRecords;  }> {
        const localVarPath = this.basePath + '/api/3/auditing/record';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (offset !== undefined) {
            localVarQueryParameters['offset'] = ObjectSerializer.serialize(offset, "number");
        }

        if (limit !== undefined) {
            localVarQueryParameters['limit'] = ObjectSerializer.serialize(limit, "number");
        }

        if (filter !== undefined) {
            localVarQueryParameters['filter'] = ObjectSerializer.serialize(filter, "string");
        }

        if (from !== undefined) {
            localVarQueryParameters['from'] = ObjectSerializer.serialize(from, "Date");
        }

        if (to !== undefined) {
            localVarQueryParameters['to'] = ObjectSerializer.serialize(to, "Date");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: AuditRecords;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "AuditRecords");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the [global settings](https://confluence.atlassian.com/x/qYXKM) in Jira. These settings determine whether optional features (for example, sub-tasks, time tracking, and others) are enabled. If time tracking is enabled, this method also returns the time tracking configuration.  **[Permissions](#permissions) required:** Permission to access Jira .
     * @summary Get global settings
     */
    public comAtlassianJiraRestV2AdminConfigurationResourceGetConfigurationGet (options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Configuration;  }> {
        const localVarPath = this.basePath + '/api/3/configuration';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Configuration;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Configuration");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Creates a permission grant in a permission scheme.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Create permission grant
     * @param schemeId The ID of the permission scheme in which to create a new permission grant.
     * @param permissionGrant The permission grant to create.
     * @param expand Use expand to include additional information in the response. This parameter accepts multiple values separated by a comma. Note that permissions are always included when you specify any value:  *   &#x60;permissions&#x60; Returns all permission grants for each permission scheme. *   &#x60;user&#x60; Returns information about the user who is granted the permission. *   &#x60;group&#x60; Returns information about the group that is granted the permission. *   &#x60;projectRole&#x60; Returns information about the project role granted the permission. *   &#x60;field&#x60; Returns information about the custom field granted the permission. *   &#x60;all&#x60; Returns all expandable information.
     */
    public comAtlassianJiraRestV2AdminPermissionschemePermissionSchemeResourceCreatePermissionGrantPost (schemeId: number, permissionGrant: PermissionGrant, expand?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PermissionGrant;  }> {
        const localVarPath = this.basePath + '/api/3/permissionscheme/{schemeId}/permission'
            .replace('{' + 'schemeId' + '}', encodeURIComponent(String(schemeId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'schemeId' is not null or undefined
        if (schemeId === null || schemeId === undefined) {
            throw new Error('Required parameter schemeId was null or undefined when calling comAtlassianJiraRestV2AdminPermissionschemePermissionSchemeResourceCreatePermissionGrantPost.');
        }

        // verify required parameter 'permissionGrant' is not null or undefined
        if (permissionGrant === null || permissionGrant === undefined) {
            throw new Error('Required parameter permissionGrant was null or undefined when calling comAtlassianJiraRestV2AdminPermissionschemePermissionSchemeResourceCreatePermissionGrantPost.');
        }

        if (expand !== undefined) {
            localVarQueryParameters['expand'] = ObjectSerializer.serialize(expand, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(permissionGrant, "PermissionGrant")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: PermissionGrant;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "PermissionGrant");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Creates a new permission scheme. You can create a permission scheme with or without defining a set of permission grants.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Create permission scheme
     * @param permissionScheme The permission scheme to create.
     * @param expand Use expand to include additional information in the response. This parameter accepts multiple values separated by a comma. Note that permissions are always included when you specify any value:  *   &#x60;all&#x60; Returns all expandable information. *   &#x60;field&#x60; Returns information about the custom field granted the permission. *   &#x60;group&#x60; Returns information about the group that is granted the permission. *   &#x60;permissions&#x60; Returns all permission grants for each permission scheme. *   &#x60;projectRole&#x60; Returns information about the project role granted the permission. *   &#x60;user&#x60; Returns information about the user who is granted the permission.
     */
    public comAtlassianJiraRestV2AdminPermissionschemePermissionSchemeResourceCreatePermissionSchemePost (permissionScheme: PermissionScheme, expand?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PermissionScheme;  }> {
        const localVarPath = this.basePath + '/api/3/permissionscheme';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'permissionScheme' is not null or undefined
        if (permissionScheme === null || permissionScheme === undefined) {
            throw new Error('Required parameter permissionScheme was null or undefined when calling comAtlassianJiraRestV2AdminPermissionschemePermissionSchemeResourceCreatePermissionSchemePost.');
        }

        if (expand !== undefined) {
            localVarQueryParameters['expand'] = ObjectSerializer.serialize(expand, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(permissionScheme, "PermissionScheme")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: PermissionScheme;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "PermissionScheme");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Deletes a permission scheme.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Delete permission scheme
     * @param schemeId The ID of the permission scheme being deleted.
     */
    public comAtlassianJiraRestV2AdminPermissionschemePermissionSchemeResourceDeletePermissionSchemeDelete (schemeId: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/permissionscheme/{schemeId}'
            .replace('{' + 'schemeId' + '}', encodeURIComponent(String(schemeId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'schemeId' is not null or undefined
        if (schemeId === null || schemeId === undefined) {
            throw new Error('Required parameter schemeId was null or undefined when calling comAtlassianJiraRestV2AdminPermissionschemePermissionSchemeResourceDeletePermissionSchemeDelete.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Deletes a permission grant from a permission scheme. See [About permission schemes and grants](#about-permission-schemes) for more details.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Delete permission scheme entity
     * @param schemeId The ID of the permission scheme to delete the permission grant from.
     * @param permissionId The ID of the permission grant to delete.
     */
    public comAtlassianJiraRestV2AdminPermissionschemePermissionSchemeResourceDeletePermissionSchemeEntityDelete (schemeId: number, permissionId: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/permissionscheme/{schemeId}/permission/{permissionId}'
            .replace('{' + 'schemeId' + '}', encodeURIComponent(String(schemeId)))
            .replace('{' + 'permissionId' + '}', encodeURIComponent(String(permissionId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'schemeId' is not null or undefined
        if (schemeId === null || schemeId === undefined) {
            throw new Error('Required parameter schemeId was null or undefined when calling comAtlassianJiraRestV2AdminPermissionschemePermissionSchemeResourceDeletePermissionSchemeEntityDelete.');
        }

        // verify required parameter 'permissionId' is not null or undefined
        if (permissionId === null || permissionId === undefined) {
            throw new Error('Required parameter permissionId was null or undefined when calling comAtlassianJiraRestV2AdminPermissionschemePermissionSchemeResourceDeletePermissionSchemeEntityDelete.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns all permission schemes.  ### About permission schemes and grants  A permission scheme is a collection of permission grants. A permission grant consists of a `holder` and a `permission`.  #### Holder  The `holder` object contains information about the user or group being granted the permission. For example, the _Administer projects_ permission is granted to a group named _Teams in space administrators_. In this case, the type is `\"type\": \"group\"`, and the parameter is the group name, `\"parameter\": \"Teams in space administrators\"`. The `holder` object is defined by the following properties:  *   `type` Identifies the user or group (see the list of types below). *   `parameter` The value of this property depends on the `type`. For example, if the `type` is a group, then you need to specify the group name.  The following `types` are available. The expected values for the `parameter` are given in parenthesis (some `types` may not have a `parameter`):  *   `anyone` Grant for anonymous users. *   `applicationRole` Grant for users with access to the specified application (application name). See [Manage application access](https://confluence.atlassian.com/cloud/manage-application-access-744721629.html) for more information. *   `assignee` Grant for the user currently assigned to an issue. *   `group` Grant for the specified group (group name). *   `groupCustomField` Grant for a user in the group selected in the specified custom field (custom field ID). *   `projectLead` Grant for a project lead. *   `projectRole` Grant for the specified project role (project role ID). *   `reporter` Grant for the user who reported the issue. *   `sd.customer.portal.only` Jira Service Desk only. Grants customers permission to access the customer portal but not Jira. See [Customizing Jira Service Desk permissions](https://confluence.atlassian.com/x/24dKLg) for more information. *   `user` Grant for the specified user (user ID - historically this was the userkey but that is deprecated and the account ID should be used). *   `userCustomField` Grant for a user selected in the specified custom field (custom field ID).  #### Permissions  The [built-in Jira permissions](https://confluence.atlassian.com/x/yodKLg) are listed below. Apps can also define custom permissions. See the [project permission](https://developer.atlassian.com/cloud/jira/platform/modules/project-permission/) and [global permission](https://developer.atlassian.com/cloud/jira/platform/modules/global-permission/) module documentation for more information.  **Project permissions**  *   `ADMINISTER_PROJECTS` *   `BROWSE_PROJECTS` *   `MANAGE_SPRINTS_PERMISSION` (Jira Software only) *   `SERVICEDESK_AGENT` (Jira Service Desk only) *   `VIEW_DEV_TOOLS` (Jira Software only) *   `VIEW_READONLY_WORKFLOW`  **Issue permissions**  *   `ASSIGNABLE_USER` *   `ASSIGN_ISSUES` *   `CLOSE_ISSUES` *   `CREATE_ISSUES` *   `DELETE_ISSUES` *   `EDIT_ISSUES` *   `LINK_ISSUES` *   `MODIFY_REPORTER` *   `MOVE_ISSUES` *   `RESOLVE_ISSUES` *   `SCHEDULE_ISSUES` *   `SET_ISSUE_SECURITY` *   `TRANSITION_ISSUES`  **Voters and watchers permissions**  *   `MANAGE_WATCHERS` *   `VIEW_VOTERS_AND_WATCHERS`  **Comments permissions**  *   `ADD_COMMENTS` *   `DELETE_ALL_COMMENTS` *   `DELETE_OWN_COMMENTS` *   `EDIT_ALL_COMMENTS` *   `EDIT_OWN_COMMENTS`  **Attachments permissions**  *   `CREATE_ATTACHMENTS` *   `DELETE_ALL_ATTACHMENTS` *   `DELETE_OWN_ATTACHMENTS`  **Time tracking permissions**  *   `DELETE_ALL_WORKLOGS` *   `DELETE_OWN_WORKLOGS` *   `EDIT_ALL_WORKLOGS` *   `EDIT_OWN_WORKLOGS` *   `WORK_ON_ISSUES`  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Get all permission schemes
     * @param expand Use expand to include additional information in the response. This parameter accepts multiple values separated by a comma. Note that permissions are included when you specify any value:  *   &#x60;all&#x60; Returns all expandable information. *   &#x60;field&#x60; Returns information about the custom field granted the permission. *   &#x60;group&#x60; Returns information about the group that is granted the permission. *   &#x60;permissions&#x60; Returns all permission grants for each permission scheme. *   &#x60;projectRole&#x60; Returns information about the project role granted the permission. *   &#x60;user&#x60; Returns information about the user who is granted the permission.
     */
    public comAtlassianJiraRestV2AdminPermissionschemePermissionSchemeResourceGetAllPermissionSchemesGet (expand?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PermissionSchemes;  }> {
        const localVarPath = this.basePath + '/api/3/permissionscheme';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (expand !== undefined) {
            localVarQueryParameters['expand'] = ObjectSerializer.serialize(expand, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: PermissionSchemes;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "PermissionSchemes");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns a permission scheme.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Get permission scheme
     * @param schemeId The ID of the permission scheme to return.
     * @param expand Use expand to include additional information in the response. This parameter accepts multiple values separated by a comma. Note that permissions are included when you specify any value:  *   &#x60;all&#x60; Returns all expandable information. *   &#x60;field&#x60; Returns information about the custom field granted the permission. *   &#x60;group&#x60; Returns information about the group that is granted the permission. *   &#x60;permissions&#x60; Returns all permission grants for each permission scheme. *   &#x60;projectRole&#x60; Returns information about the project role granted the permission. *   &#x60;user&#x60; Returns information about the user who is granted the permission.
     */
    public comAtlassianJiraRestV2AdminPermissionschemePermissionSchemeResourceGetPermissionSchemeGet (schemeId: number, expand?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PermissionScheme;  }> {
        const localVarPath = this.basePath + '/api/3/permissionscheme/{schemeId}'
            .replace('{' + 'schemeId' + '}', encodeURIComponent(String(schemeId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'schemeId' is not null or undefined
        if (schemeId === null || schemeId === undefined) {
            throw new Error('Required parameter schemeId was null or undefined when calling comAtlassianJiraRestV2AdminPermissionschemePermissionSchemeResourceGetPermissionSchemeGet.');
        }

        if (expand !== undefined) {
            localVarQueryParameters['expand'] = ObjectSerializer.serialize(expand, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: PermissionScheme;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "PermissionScheme");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns a permission grant.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Get permission scheme grant
     * @param schemeId The ID of the permission scheme.
     * @param permissionId The ID of the permission grant.
     * @param expand Use expand to include additional information in the response. This parameter accepts multiple values separated by a comma. Note that permissions are always included when you specify any value:  *   &#x60;all&#x60; Returns all expandable information. *   &#x60;field&#x60; Returns information about the custom field granted the permission. *   &#x60;group&#x60; Returns information about the group that is granted the permission. *   &#x60;permissions&#x60; Returns all permission grants for each permission scheme. *   &#x60;projectRole&#x60; Returns information about the project role granted the permission. *   &#x60;user&#x60; Returns information about the user who is granted the permission.
     */
    public comAtlassianJiraRestV2AdminPermissionschemePermissionSchemeResourceGetPermissionSchemeGrantGet (schemeId: number, permissionId: number, expand?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PermissionGrant;  }> {
        const localVarPath = this.basePath + '/api/3/permissionscheme/{schemeId}/permission/{permissionId}'
            .replace('{' + 'schemeId' + '}', encodeURIComponent(String(schemeId)))
            .replace('{' + 'permissionId' + '}', encodeURIComponent(String(permissionId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'schemeId' is not null or undefined
        if (schemeId === null || schemeId === undefined) {
            throw new Error('Required parameter schemeId was null or undefined when calling comAtlassianJiraRestV2AdminPermissionschemePermissionSchemeResourceGetPermissionSchemeGrantGet.');
        }

        // verify required parameter 'permissionId' is not null or undefined
        if (permissionId === null || permissionId === undefined) {
            throw new Error('Required parameter permissionId was null or undefined when calling comAtlassianJiraRestV2AdminPermissionschemePermissionSchemeResourceGetPermissionSchemeGrantGet.');
        }

        if (expand !== undefined) {
            localVarQueryParameters['expand'] = ObjectSerializer.serialize(expand, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: PermissionGrant;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "PermissionGrant");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns all permission grants for a permission scheme.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Get permission scheme grants
     * @param schemeId The ID of the permission scheme.
     * @param expand Use expand to include additional information in the response. This parameter accepts multiple values separated by a comma. Note that permissions are always included when you specify any value:  *   &#x60;permissions&#x60; Returns all permission grants for each permission scheme. *   &#x60;user&#x60; Returns information about the user who is granted the permission. *   &#x60;group&#x60; Returns information about the group that is granted the permission. *   &#x60;projectRole&#x60; Returns information about the project role granted the permission. *   &#x60;field&#x60; Returns information about the custom field granted the permission. *   &#x60;all&#x60; Returns all expandable information.
     */
    public comAtlassianJiraRestV2AdminPermissionschemePermissionSchemeResourceGetPermissionSchemeGrantsGet (schemeId: number, expand?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PermissionGrants;  }> {
        const localVarPath = this.basePath + '/api/3/permissionscheme/{schemeId}/permission'
            .replace('{' + 'schemeId' + '}', encodeURIComponent(String(schemeId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'schemeId' is not null or undefined
        if (schemeId === null || schemeId === undefined) {
            throw new Error('Required parameter schemeId was null or undefined when calling comAtlassianJiraRestV2AdminPermissionschemePermissionSchemeResourceGetPermissionSchemeGrantsGet.');
        }

        if (expand !== undefined) {
            localVarQueryParameters['expand'] = ObjectSerializer.serialize(expand, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: PermissionGrants;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "PermissionGrants");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Updates a permission scheme. Below are some important things to note when using this resource:  *   If a permissions list is present in the request, then it will be set in the permission scheme, overwriting _all existing_ grants. *   If you want to update only the name and description, then do not send a permissions list in the request. *   Sending an empty list will remove all permission grants from the permission scheme.  If you want to add or delete a single permission grant instead of updating the whole list, see [Create permission grant](#api-api-3-permissionscheme-schemeId-permission-post) or [Delete permission scheme entity](#api-api-3-permissionscheme-schemeId-permission-permissionId-delete).  See [About permission schemes and grants](#about-permission-schemes) for more details.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Update permission scheme
     * @param schemeId The ID of the permission scheme to update.
     * @param permissionScheme
     * @param expand Use expand to include additional information in the response. This parameter accepts multiple values separated by a comma. Note that permissions are always included when you specify any value:  *   &#x60;all&#x60; Returns all expandable information. *   &#x60;field&#x60; Returns information about the custom field granted the permission. *   &#x60;group&#x60; Returns information about the group that is granted the permission. *   &#x60;permissions&#x60; Returns all permission grants for each permission scheme. *   &#x60;projectRole&#x60; Returns information about the project role granted the permission. *   &#x60;user&#x60; Returns information about the user who is granted the permission.
     */
    public comAtlassianJiraRestV2AdminPermissionschemePermissionSchemeResourceUpdatePermissionSchemePut (schemeId: number, permissionScheme: PermissionScheme, expand?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PermissionScheme;  }> {
        const localVarPath = this.basePath + '/api/3/permissionscheme/{schemeId}'
            .replace('{' + 'schemeId' + '}', encodeURIComponent(String(schemeId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'schemeId' is not null or undefined
        if (schemeId === null || schemeId === undefined) {
            throw new Error('Required parameter schemeId was null or undefined when calling comAtlassianJiraRestV2AdminPermissionschemePermissionSchemeResourceUpdatePermissionSchemePut.');
        }

        // verify required parameter 'permissionScheme' is not null or undefined
        if (permissionScheme === null || permissionScheme === undefined) {
            throw new Error('Required parameter permissionScheme was null or undefined when calling comAtlassianJiraRestV2AdminPermissionschemePermissionSchemeResourceUpdatePermissionSchemePut.');
        }

        if (expand !== undefined) {
            localVarQueryParameters['expand'] = ObjectSerializer.serialize(expand, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(permissionScheme, "PermissionScheme")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: PermissionScheme;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "PermissionScheme");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the default issue navigator columns.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Get issue navigator default columns
     */
    public comAtlassianJiraRestV2AdminSettingsResourceGetIssueNavigatorDefaultColumnsGet (options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Array<ColumnItem>;  }> {
        const localVarPath = this.basePath + '/api/3/settings/columns';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<ColumnItem>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<ColumnItem>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Sets the default issue navigator columns.  The `columns` parameter accepts a single navigable field value and is expressed as HTML form data. To specify multiple columns, pass multiple `columns` parameters. For example, in curl:  `curl -X PUT -d columns=summary -d columns=description https://your-domain.atlassian.net/rest/api/3/settings/columns`  If no column details are sent, then all default columns are removed.  A navigable field is one that can be used as a column on the issue navigator. Find details of navigable issue columns using [Get fields](#api-api-3-field-get).  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Set issue navigator default columns
     * @param columns A navigable field value.
     */
    public comAtlassianJiraRestV2AdminSettingsResourceSetIssueNavigatorDefaultColumnsPut (columns: Array<string>, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/settings/columns';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'columns' is not null or undefined
        if (columns === null || columns === undefined) {
            throw new Error('Required parameter columns was null or undefined when calling comAtlassianJiraRestV2AdminSettingsResourceSetIssueNavigatorDefaultColumnsPut.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (columns !== undefined) {
            localVarFormParams['columns'] = ObjectSerializer.serialize(columns, "Array<string>");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Disables time tracking.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Disable time tracking
     */
    public comAtlassianJiraRestV2AdminTimetrackingTimeTrackingResourceDisableTimeTrackingDelete (options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/configuration/timetracking';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns all time tracking providers. By default, Jira only has one time tracking provider: _JIRA provided time tracking_. However, you can install other time tracking providers via apps from the Atlassian Marketplace. For more information on time tracking providers, see the documentation for the [Time Tracking Provider](https://developer.atlassian.com/cloud/jira/platform/modules/time-tracking-provider/) module.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Get all time tracking providers
     */
    public comAtlassianJiraRestV2AdminTimetrackingTimeTrackingResourceGetAvailableTimeTrackingImplementationsGet (options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Array<TimeTrackingProvider>;  }> {
        const localVarPath = this.basePath + '/api/3/configuration/timetracking/list';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<TimeTrackingProvider>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<TimeTrackingProvider>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the time tracking provider that is currently selected. Note that if time tracking is disabled, then a successful but empty response is returned.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Get selected time tracking provider
     */
    public comAtlassianJiraRestV2AdminTimetrackingTimeTrackingResourceGetSelectedTimeTrackingImplementationGet (options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: TimeTrackingProvider;  }> {
        const localVarPath = this.basePath + '/api/3/configuration/timetracking';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: TimeTrackingProvider;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "TimeTrackingProvider");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the time tracking settings. This includes settings such as the time format, default time unit, and others. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Get time tracking settings
     */
    public comAtlassianJiraRestV2AdminTimetrackingTimeTrackingResourceGetSharedTimeTrackingConfigurationGet (options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: TimeTrackingConfiguration;  }> {
        const localVarPath = this.basePath + '/api/3/configuration/timetracking/options';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: TimeTrackingConfiguration;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "TimeTrackingConfiguration");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Selects a time tracking provider.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Select time tracking provider
     * @param timeTrackingProvider
     */
    public comAtlassianJiraRestV2AdminTimetrackingTimeTrackingResourceSelectTimeTrackingImplementationPut (timeTrackingProvider: TimeTrackingProvider, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/configuration/timetracking';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'timeTrackingProvider' is not null or undefined
        if (timeTrackingProvider === null || timeTrackingProvider === undefined) {
            throw new Error('Required parameter timeTrackingProvider was null or undefined when calling comAtlassianJiraRestV2AdminTimetrackingTimeTrackingResourceSelectTimeTrackingImplementationPut.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(timeTrackingProvider, "TimeTrackingProvider")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Sets the time tracking settings.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Set time tracking settings
     * @param timeTrackingConfiguration
     */
    public comAtlassianJiraRestV2AdminTimetrackingTimeTrackingResourceSetSharedTimeTrackingConfigurationPut (timeTrackingConfiguration: TimeTrackingConfiguration, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: TimeTrackingConfiguration;  }> {
        const localVarPath = this.basePath + '/api/3/configuration/timetracking/options';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'timeTrackingConfiguration' is not null or undefined
        if (timeTrackingConfiguration === null || timeTrackingConfiguration === undefined) {
            throw new Error('Required parameter timeTrackingConfiguration was null or undefined when calling comAtlassianJiraRestV2AdminTimetrackingTimeTrackingResourceSetSharedTimeTrackingConfigurationPut.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(timeTrackingConfiguration, "TimeTrackingConfiguration")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: TimeTrackingConfiguration;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "TimeTrackingConfiguration");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Adds a property to a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Create workflow transition property
     * @param transitionId The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition.
     * @param key The key of the property being added, also known as the name of the property. Set this to the same value as the &#x60;key&#x60; defined in the request body.
     * @param workflowName The name of the workflow that the transition belongs to.
     * @param workflowTransitionProperty
     * @param workflowMode The workflow status. Set to _live_ for inactive workflows or _draft_ for draft workflows. Active workflows cannot be edited.
     */
    public comAtlassianJiraRestV2AdminWorkflowTransitionResourceCreateWorkflowTransitionPropertyPost (transitionId: number, key: string, workflowName: string, workflowTransitionProperty: WorkflowTransitionProperty, workflowMode?: 'live' | 'draft', options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: WorkflowTransitionProperty;  }> {
        const localVarPath = this.basePath + '/api/3/workflow/transitions/{transitionId}/properties'
            .replace('{' + 'transitionId' + '}', encodeURIComponent(String(transitionId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'transitionId' is not null or undefined
        if (transitionId === null || transitionId === undefined) {
            throw new Error('Required parameter transitionId was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowTransitionResourceCreateWorkflowTransitionPropertyPost.');
        }

        // verify required parameter 'key' is not null or undefined
        if (key === null || key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowTransitionResourceCreateWorkflowTransitionPropertyPost.');
        }

        // verify required parameter 'workflowName' is not null or undefined
        if (workflowName === null || workflowName === undefined) {
            throw new Error('Required parameter workflowName was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowTransitionResourceCreateWorkflowTransitionPropertyPost.');
        }

        // verify required parameter 'workflowTransitionProperty' is not null or undefined
        if (workflowTransitionProperty === null || workflowTransitionProperty === undefined) {
            throw new Error('Required parameter workflowTransitionProperty was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowTransitionResourceCreateWorkflowTransitionPropertyPost.');
        }

        if (key !== undefined) {
            localVarQueryParameters['key'] = ObjectSerializer.serialize(key, "string");
        }

        if (workflowName !== undefined) {
            localVarQueryParameters['workflowName'] = ObjectSerializer.serialize(workflowName, "string");
        }

        if (workflowMode !== undefined) {
            localVarQueryParameters['workflowMode'] = ObjectSerializer.serialize(workflowMode, "'live' | 'draft'");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(workflowTransitionProperty, "WorkflowTransitionProperty")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WorkflowTransitionProperty;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "WorkflowTransitionProperty");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Deletes a property from a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Delete workflow transition property
     * @param transitionId The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition.
     * @param key The name of the transition property to delete, also known as the name of the property.
     * @param workflowName The name of the workflow that the transition belongs to.
     * @param workflowMode The workflow status. Set to &#x60;live&#x60; for inactive workflows or &#x60;draft&#x60; for draft workflows. Active workflows cannot be edited.
     */
    public comAtlassianJiraRestV2AdminWorkflowTransitionResourceDeleteWorkflowTransitionPropertyDelete (transitionId: number, key: string, workflowName: string, workflowMode?: 'live' | 'draft', options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/workflow/transitions/{transitionId}/properties'
            .replace('{' + 'transitionId' + '}', encodeURIComponent(String(transitionId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'transitionId' is not null or undefined
        if (transitionId === null || transitionId === undefined) {
            throw new Error('Required parameter transitionId was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowTransitionResourceDeleteWorkflowTransitionPropertyDelete.');
        }

        // verify required parameter 'key' is not null or undefined
        if (key === null || key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowTransitionResourceDeleteWorkflowTransitionPropertyDelete.');
        }

        // verify required parameter 'workflowName' is not null or undefined
        if (workflowName === null || workflowName === undefined) {
            throw new Error('Required parameter workflowName was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowTransitionResourceDeleteWorkflowTransitionPropertyDelete.');
        }

        if (key !== undefined) {
            localVarQueryParameters['key'] = ObjectSerializer.serialize(key, "string");
        }

        if (workflowName !== undefined) {
            localVarQueryParameters['workflowName'] = ObjectSerializer.serialize(workflowName, "string");
        }

        if (workflowMode !== undefined) {
            localVarQueryParameters['workflowMode'] = ObjectSerializer.serialize(workflowMode, "'live' | 'draft'");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the properties on a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg)n.
     * @summary Get workflow transition properties
     * @param transitionId The ID of the transition. To get the ID, view the workflow in text mode in the Jira administration console. The ID is shown next to the transition.
     * @param workflowName The name of the workflow that the transition belongs to.
     * @param includeReservedKeys Some properties with keys that have the _jira._ prefix are reserved, which means they are not editable. To include these properties in the results, set this parameter to _true_.
     * @param key The key of the property being returned, also known as the name of the property. If this parameter is not specified, all properties on the transition are returned.
     * @param workflowMode The workflow status. Set to _live_ for active and inactive workflows, or _draft_ for draft workflows.
     */
    public comAtlassianJiraRestV2AdminWorkflowTransitionResourceGetWorkflowTransitionPropertiesGet (transitionId: number, workflowName: string, includeReservedKeys?: boolean, key?: string, workflowMode?: 'live' | 'draft', options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: WorkflowTransitionProperty;  }> {
        const localVarPath = this.basePath + '/api/3/workflow/transitions/{transitionId}/properties'
            .replace('{' + 'transitionId' + '}', encodeURIComponent(String(transitionId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'transitionId' is not null or undefined
        if (transitionId === null || transitionId === undefined) {
            throw new Error('Required parameter transitionId was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowTransitionResourceGetWorkflowTransitionPropertiesGet.');
        }

        // verify required parameter 'workflowName' is not null or undefined
        if (workflowName === null || workflowName === undefined) {
            throw new Error('Required parameter workflowName was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowTransitionResourceGetWorkflowTransitionPropertiesGet.');
        }

        if (includeReservedKeys !== undefined) {
            localVarQueryParameters['includeReservedKeys'] = ObjectSerializer.serialize(includeReservedKeys, "boolean");
        }

        if (key !== undefined) {
            localVarQueryParameters['key'] = ObjectSerializer.serialize(key, "string");
        }

        if (workflowName !== undefined) {
            localVarQueryParameters['workflowName'] = ObjectSerializer.serialize(workflowName, "string");
        }

        if (workflowMode !== undefined) {
            localVarQueryParameters['workflowMode'] = ObjectSerializer.serialize(workflowMode, "'live' | 'draft'");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WorkflowTransitionProperty;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "WorkflowTransitionProperty");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Updates a workflow transition by changing the property value. Trying to update a property that does not exist results in a new property being added to the transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Update workflow transition property
     * @param transitionId The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition.
     * @param key The key of the property being updated, also known as the name of the property. Set this to the same value as the &#x60;key&#x60; defined in the request body.
     * @param workflowName The name of the workflow that the transition belongs to.
     * @param workflowTransitionProperty
     * @param workflowMode The workflow status. Set to &#x60;live&#x60; for inactive workflows or &#x60;draft&#x60; for draft workflows. Active workflows cannot be edited.
     */
    public comAtlassianJiraRestV2AdminWorkflowTransitionResourceUpdateWorkflowTransitionPropertyPut (transitionId: number, key: string, workflowName: string, workflowTransitionProperty: WorkflowTransitionProperty, workflowMode?: 'live' | 'draft', options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: WorkflowTransitionProperty;  }> {
        const localVarPath = this.basePath + '/api/3/workflow/transitions/{transitionId}/properties'
            .replace('{' + 'transitionId' + '}', encodeURIComponent(String(transitionId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'transitionId' is not null or undefined
        if (transitionId === null || transitionId === undefined) {
            throw new Error('Required parameter transitionId was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowTransitionResourceUpdateWorkflowTransitionPropertyPut.');
        }

        // verify required parameter 'key' is not null or undefined
        if (key === null || key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowTransitionResourceUpdateWorkflowTransitionPropertyPut.');
        }

        // verify required parameter 'workflowName' is not null or undefined
        if (workflowName === null || workflowName === undefined) {
            throw new Error('Required parameter workflowName was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowTransitionResourceUpdateWorkflowTransitionPropertyPut.');
        }

        // verify required parameter 'workflowTransitionProperty' is not null or undefined
        if (workflowTransitionProperty === null || workflowTransitionProperty === undefined) {
            throw new Error('Required parameter workflowTransitionProperty was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowTransitionResourceUpdateWorkflowTransitionPropertyPut.');
        }

        if (key !== undefined) {
            localVarQueryParameters['key'] = ObjectSerializer.serialize(key, "string");
        }

        if (workflowName !== undefined) {
            localVarQueryParameters['workflowName'] = ObjectSerializer.serialize(workflowName, "string");
        }

        if (workflowMode !== undefined) {
            localVarQueryParameters['workflowMode'] = ObjectSerializer.serialize(workflowMode, "'live' | 'draft'");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(workflowTransitionProperty, "WorkflowTransitionProperty")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WorkflowTransitionProperty;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "WorkflowTransitionProperty");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns all workflows in Jira or a single workflow.  If the `workflowName` parameter is specified, a workflow will be returned as an object (not in an array). Otherwise, an array of workflow objects will be returned.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Get all workflows
     * @param workflowName The name of the workflow to be returned. Only one workflow can be specified.
     */
    public comAtlassianJiraRestV2AdminWorkflowsResourceGetAllWorkflowsGet (workflowName?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Array<Workflow>;  }> {
        const localVarPath = this.basePath + '/api/3/workflow';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (workflowName !== undefined) {
            localVarQueryParameters['workflowName'] = ObjectSerializer.serialize(workflowName, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<Workflow>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Workflow>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Create a draft workflow scheme from an active workflow scheme, by copying the active workflow scheme. Note that an active workflow scheme can only have one draft workflow scheme at any given time.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Create draft workflow scheme
     * @param id The ID of the active workflow scheme that the draft is created from.
     */
    public comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceCreateWorkflowSchemeDraftFromParentPost (id: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: WorkflowScheme;  }> {
        const localVarPath = this.basePath + '/api/3/workflowscheme/{id}/createdraft'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceCreateWorkflowSchemeDraftFromParentPost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WorkflowScheme;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "WorkflowScheme");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Creates a workflow scheme.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Create workflow scheme
     * @param workflowScheme
     */
    public comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceCreateWorkflowSchemePost (workflowScheme: WorkflowScheme, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: WorkflowScheme;  }> {
        const localVarPath = this.basePath + '/api/3/workflowscheme';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'workflowScheme' is not null or undefined
        if (workflowScheme === null || workflowScheme === undefined) {
            throw new Error('Required parameter workflowScheme was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceCreateWorkflowSchemePost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(workflowScheme, "WorkflowScheme")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WorkflowScheme;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "WorkflowScheme");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Resets the default workflow for a workflow scheme. That is, the default workflow is set to Jira's system workflow (the _jira_ workflow).  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` and a draft workflow scheme will be created or updated with the default workflow reset. The draft workflow scheme can be published in Jira.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Delete default workflow
     * @param id The ID of the workflow scheme.
     * @param updateDraftIfNeeded Set to true to create or update the draft of a workflow scheme and delete the mapping from the draft, when the workflow scheme cannot be edited. Defaults to &#x60;false&#x60;.
     */
    public comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceDeleteDefaultWorkflowDelete (id: number, updateDraftIfNeeded?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: WorkflowScheme;  }> {
        const localVarPath = this.basePath + '/api/3/workflowscheme/{id}/default'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceDeleteDefaultWorkflowDelete.');
        }

        if (updateDraftIfNeeded !== undefined) {
            localVarQueryParameters['updateDraftIfNeeded'] = ObjectSerializer.serialize(updateDraftIfNeeded, "boolean");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WorkflowScheme;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "WorkflowScheme");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Resets the default workflow for a workflow scheme's draft. That is, the default workflow is set to Jira's system workflow (the _jira_ workflow).  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Delete draft default workflow
     * @param id The ID of the workflow scheme that the draft belongs to.
     */
    public comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceDeleteDraftDefaultWorkflowDelete (id: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: WorkflowScheme;  }> {
        const localVarPath = this.basePath + '/api/3/workflowscheme/{id}/draft/default'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceDeleteDraftDefaultWorkflowDelete.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WorkflowScheme;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "WorkflowScheme");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Deletes the workflow-issue type mapping for a workflow in a workflow scheme's draft.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Delete issue types for workflow in draft workflow scheme
     * @param id The ID of the workflow scheme that the draft belongs to.
     * @param workflowName The name of the workflow.
     */
    public comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceDeleteDraftWorkflowMappingDelete (id: number, workflowName: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/workflowscheme/{id}/draft/workflow'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceDeleteDraftWorkflowMappingDelete.');
        }

        // verify required parameter 'workflowName' is not null or undefined
        if (workflowName === null || workflowName === undefined) {
            throw new Error('Required parameter workflowName was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceDeleteDraftWorkflowMappingDelete.');
        }

        if (workflowName !== undefined) {
            localVarQueryParameters['workflowName'] = ObjectSerializer.serialize(workflowName, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Deletes the workflow-issue type mapping for a workflow in a workflow scheme.  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` and a draft workflow scheme will be created or updated with the workflow-issue type mapping deleted. The draft workflow scheme can be published in Jira.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Delete issue types for workflow in workflow scheme
     * @param id The ID of the workflow scheme.
     * @param workflowName The name of the workflow.
     * @param updateDraftIfNeeded Set to true to create or update the draft of a workflow scheme and delete the mapping from the draft, when the workflow scheme cannot be edited. Defaults to &#x60;false&#x60;.
     */
    public comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceDeleteWorkflowMappingDelete (id: number, workflowName: string, updateDraftIfNeeded?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/workflowscheme/{id}/workflow'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceDeleteWorkflowMappingDelete.');
        }

        // verify required parameter 'workflowName' is not null or undefined
        if (workflowName === null || workflowName === undefined) {
            throw new Error('Required parameter workflowName was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceDeleteWorkflowMappingDelete.');
        }

        if (workflowName !== undefined) {
            localVarQueryParameters['workflowName'] = ObjectSerializer.serialize(workflowName, "string");
        }

        if (updateDraftIfNeeded !== undefined) {
            localVarQueryParameters['updateDraftIfNeeded'] = ObjectSerializer.serialize(updateDraftIfNeeded, "boolean");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Deletes a workflow scheme. Note that a workflow scheme cannot be deleted if it is active (that is, being used by at least one project).  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Delete workflow scheme
     * @param id The ID of the workflow scheme. Find this ID by editing the desired workflow scheme in Jira. The ID will be shown in the URL as &#x60;schemeId&#x60;. For example, _schemeId&#x3D;10301_.
     */
    public comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceDeleteWorkflowSchemeDelete (id: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/workflowscheme/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceDeleteWorkflowSchemeDelete.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Deletes a draft workflow scheme.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Delete draft workflow scheme
     * @param id The ID of the active workflow scheme that the draft was originally created from.
     */
    public comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceDeleteWorkflowSchemeDraftDelete (id: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/workflowscheme/{id}/draft'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceDeleteWorkflowSchemeDraftDelete.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Deletes the issue type-workflow mapping for an issue type in a workflow scheme's draft.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Delete workflow for issue type in draft workflow scheme
     * @param id The ID of the workflow scheme that the draft belongs to.
     * @param issueType The ID of the issue type.
     */
    public comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceDeleteWorkflowSchemeDraftIssueTypeDelete (id: number, issueType: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: WorkflowScheme;  }> {
        const localVarPath = this.basePath + '/api/3/workflowscheme/{id}/draft/issuetype/{issueType}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)))
            .replace('{' + 'issueType' + '}', encodeURIComponent(String(issueType)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceDeleteWorkflowSchemeDraftIssueTypeDelete.');
        }

        // verify required parameter 'issueType' is not null or undefined
        if (issueType === null || issueType === undefined) {
            throw new Error('Required parameter issueType was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceDeleteWorkflowSchemeDraftIssueTypeDelete.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WorkflowScheme;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "WorkflowScheme");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Deletes the issue type-workflow mapping for an issue type in a workflow scheme.  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` and a draft workflow scheme will be created or updated with the issue type-workflow mapping deleted. The draft workflow scheme can be published in Jira.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Delete workflow for issue type in workflow scheme
     * @param id The ID of the workflow scheme.
     * @param issueType The ID of the issue type.
     * @param updateDraftIfNeeded Set to true to create or update the draft of a workflow scheme and update the mapping in the draft, when the workflow scheme cannot be edited. Defaults to &#x60;false&#x60;.
     */
    public comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceDeleteWorkflowSchemeIssueTypeDelete (id: number, issueType: string, updateDraftIfNeeded?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: WorkflowScheme;  }> {
        const localVarPath = this.basePath + '/api/3/workflowscheme/{id}/issuetype/{issueType}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)))
            .replace('{' + 'issueType' + '}', encodeURIComponent(String(issueType)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceDeleteWorkflowSchemeIssueTypeDelete.');
        }

        // verify required parameter 'issueType' is not null or undefined
        if (issueType === null || issueType === undefined) {
            throw new Error('Required parameter issueType was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceDeleteWorkflowSchemeIssueTypeDelete.');
        }

        if (updateDraftIfNeeded !== undefined) {
            localVarQueryParameters['updateDraftIfNeeded'] = ObjectSerializer.serialize(updateDraftIfNeeded, "boolean");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WorkflowScheme;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "WorkflowScheme");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the default workflow for a workflow scheme. The default workflow is the workflow that is assigned any issue types that have not been mapped to any other workflow. The default workflow has _All Unassigned Issue Types_ listed in its issue types for the workflow scheme in Jira.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Get default workflow
     * @param id The ID of the workflow scheme.
     * @param returnDraftIfExists Set to &#x60;true&#x60; to return the default workflow for the workflow scheme&#39;s draft rather than scheme itself. If the workflow scheme does not have a draft, then the default workflow for the workflow scheme is returned.
     */
    public comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceGetDefaultWorkflowGet (id: number, returnDraftIfExists?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: DefaultWorkflow;  }> {
        const localVarPath = this.basePath + '/api/3/workflowscheme/{id}/default'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceGetDefaultWorkflowGet.');
        }

        if (returnDraftIfExists !== undefined) {
            localVarQueryParameters['returnDraftIfExists'] = ObjectSerializer.serialize(returnDraftIfExists, "boolean");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: DefaultWorkflow;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "DefaultWorkflow");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the default workflow for a workflow scheme's draft. The default workflow is the workflow that is assigned any issue types that have not been mapped to any other workflow. The default workflow has _All Unassigned Issue Types_ listed in its issue types for the workflow scheme in Jira.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Get draft default workflow
     * @param id The ID of the workflow scheme that the draft belongs to.
     */
    public comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceGetDraftDefaultWorkflowGet (id: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: DefaultWorkflow;  }> {
        const localVarPath = this.basePath + '/api/3/workflowscheme/{id}/draft/default'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceGetDraftDefaultWorkflowGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: DefaultWorkflow;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "DefaultWorkflow");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the workflow-issue type mappings for a workflow scheme's draft.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Get issue types for workflows in draft workflow scheme
     * @param id The ID of the workflow scheme that the draft belongs to.
     * @param workflowName The name of a workflow in the scheme. Limits the results to the workflow-issue type mapping for the specified workflow.
     */
    public comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceGetDraftWorkflowGet (id: number, workflowName?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: IssueTypesWorkflowMapping;  }> {
        const localVarPath = this.basePath + '/api/3/workflowscheme/{id}/draft/workflow'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceGetDraftWorkflowGet.');
        }

        if (workflowName !== undefined) {
            localVarQueryParameters['workflowName'] = ObjectSerializer.serialize(workflowName, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: IssueTypesWorkflowMapping;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "IssueTypesWorkflowMapping");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the workflow-issue type mappings for a workflow scheme.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Get issue types for workflows in workflow scheme
     * @param id The ID of the workflow scheme.
     * @param workflowName The name of a workflow in the scheme. Limits the results to the workflow-issue type mapping for the specified workflow.
     * @param returnDraftIfExists Returns the mapping from the workflow scheme&#39;s draft rather than the workflow scheme, if set to true. If no draft exists, the mapping from the workflow scheme is returned.
     */
    public comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceGetWorkflowGet (id: number, workflowName?: string, returnDraftIfExists?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: IssueTypesWorkflowMapping;  }> {
        const localVarPath = this.basePath + '/api/3/workflowscheme/{id}/workflow'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceGetWorkflowGet.');
        }

        if (workflowName !== undefined) {
            localVarQueryParameters['workflowName'] = ObjectSerializer.serialize(workflowName, "string");
        }

        if (returnDraftIfExists !== undefined) {
            localVarQueryParameters['returnDraftIfExists'] = ObjectSerializer.serialize(returnDraftIfExists, "boolean");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: IssueTypesWorkflowMapping;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "IssueTypesWorkflowMapping");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the draft workflow scheme for an active workflow scheme. Draft workflow schemes allow changes to be made to the active workflow schemes: When an active workflow scheme is updated, a draft copy is created. The draft is modified, then the changes in the draft are copied back to the active workflow scheme. See [Configuring workflow schemes](https://confluence.atlassian.com/x/tohKLg) for more information.   Note that:  *   Only active workflow schemes can have draft workflow schemes. *   An active workflow scheme can only have one draft workflow scheme at any given time.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Get draft workflow scheme
     * @param id The ID of the active workflow scheme that the draft was originally created from.
     */
    public comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceGetWorkflowSchemeDraftGet (id: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: WorkflowScheme;  }> {
        const localVarPath = this.basePath + '/api/3/workflowscheme/{id}/draft'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceGetWorkflowSchemeDraftGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WorkflowScheme;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "WorkflowScheme");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the issue type-workflow mapping for an issue type in a workflow scheme's draft.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Get workflow for issue type in draft workflow scheme
     * @param id The ID of the workflow scheme that the draft belongs to.
     * @param issueType The ID of the issue type.
     */
    public comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceGetWorkflowSchemeDraftIssueTypeGet (id: number, issueType: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: IssueTypeWorkflowMapping;  }> {
        const localVarPath = this.basePath + '/api/3/workflowscheme/{id}/draft/issuetype/{issueType}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)))
            .replace('{' + 'issueType' + '}', encodeURIComponent(String(issueType)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceGetWorkflowSchemeDraftIssueTypeGet.');
        }

        // verify required parameter 'issueType' is not null or undefined
        if (issueType === null || issueType === undefined) {
            throw new Error('Required parameter issueType was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceGetWorkflowSchemeDraftIssueTypeGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: IssueTypeWorkflowMapping;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "IssueTypeWorkflowMapping");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns a workflow scheme.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Get workflow scheme
     * @param id The ID of the workflow scheme. Find this ID by editing the desired workflow scheme in Jira. The ID will be shown in the URL as &#x60;schemeId&#x60;. For example, _schemeId&#x3D;10301_.
     * @param returnDraftIfExists Returns the workflow scheme&#39;s draft rather than scheme itself, if set to true. If the workflow scheme does not have a draft, then the workflow scheme is returned.
     */
    public comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceGetWorkflowSchemeGet (id: number, returnDraftIfExists?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: WorkflowScheme;  }> {
        const localVarPath = this.basePath + '/api/3/workflowscheme/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceGetWorkflowSchemeGet.');
        }

        if (returnDraftIfExists !== undefined) {
            localVarQueryParameters['returnDraftIfExists'] = ObjectSerializer.serialize(returnDraftIfExists, "boolean");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WorkflowScheme;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "WorkflowScheme");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the issue type-workflow mapping for an issue type in a workflow scheme.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Get workflow for issue type in workflow scheme
     * @param id The ID of the workflow scheme.
     * @param issueType The ID of the issue type.
     * @param returnDraftIfExists Returns the mapping from the workflow scheme&#39;s draft rather than the workflow scheme, if set to true. If no draft exists, the mapping from the workflow scheme is returned.
     */
    public comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceGetWorkflowSchemeIssueTypeGet (id: number, issueType: string, returnDraftIfExists?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: IssueTypeWorkflowMapping;  }> {
        const localVarPath = this.basePath + '/api/3/workflowscheme/{id}/issuetype/{issueType}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)))
            .replace('{' + 'issueType' + '}', encodeURIComponent(String(issueType)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceGetWorkflowSchemeIssueTypeGet.');
        }

        // verify required parameter 'issueType' is not null or undefined
        if (issueType === null || issueType === undefined) {
            throw new Error('Required parameter issueType was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceGetWorkflowSchemeIssueTypeGet.');
        }

        if (returnDraftIfExists !== undefined) {
            localVarQueryParameters['returnDraftIfExists'] = ObjectSerializer.serialize(returnDraftIfExists, "boolean");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: IssueTypeWorkflowMapping;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "IssueTypeWorkflowMapping");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Sets the workflow for an issue type in a workflow scheme's draft.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Set workflow for issue type in draft workflow scheme
     * @param id The ID of the workflow scheme that the draft belongs to.
     * @param issueType The ID of the issue type.
     * @param issueTypeWorkflowMapping The issue type-project mapping.
     */
    public comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceSetWorkflowSchemeDraftIssueTypePut (id: number, issueType: string, issueTypeWorkflowMapping: IssueTypeWorkflowMapping, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: WorkflowScheme;  }> {
        const localVarPath = this.basePath + '/api/3/workflowscheme/{id}/draft/issuetype/{issueType}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)))
            .replace('{' + 'issueType' + '}', encodeURIComponent(String(issueType)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceSetWorkflowSchemeDraftIssueTypePut.');
        }

        // verify required parameter 'issueType' is not null or undefined
        if (issueType === null || issueType === undefined) {
            throw new Error('Required parameter issueType was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceSetWorkflowSchemeDraftIssueTypePut.');
        }

        // verify required parameter 'issueTypeWorkflowMapping' is not null or undefined
        if (issueTypeWorkflowMapping === null || issueTypeWorkflowMapping === undefined) {
            throw new Error('Required parameter issueTypeWorkflowMapping was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceSetWorkflowSchemeDraftIssueTypePut.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(issueTypeWorkflowMapping, "IssueTypeWorkflowMapping")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WorkflowScheme;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "WorkflowScheme");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Sets the workflow for an issue type in a workflow scheme.  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` in the request body and a draft workflow scheme will be created or updated with the new issue type-workflow mapping. The draft workflow scheme can be published in Jira.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Set workflow for issue type in workflow scheme
     * @param id The ID of the workflow scheme.
     * @param issueType The ID of the issue type.
     * @param issueTypeWorkflowMapping The issue type-project mapping.
     */
    public comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceSetWorkflowSchemeIssueTypePut (id: number, issueType: string, issueTypeWorkflowMapping: IssueTypeWorkflowMapping, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: WorkflowScheme;  }> {
        const localVarPath = this.basePath + '/api/3/workflowscheme/{id}/issuetype/{issueType}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)))
            .replace('{' + 'issueType' + '}', encodeURIComponent(String(issueType)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceSetWorkflowSchemeIssueTypePut.');
        }

        // verify required parameter 'issueType' is not null or undefined
        if (issueType === null || issueType === undefined) {
            throw new Error('Required parameter issueType was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceSetWorkflowSchemeIssueTypePut.');
        }

        // verify required parameter 'issueTypeWorkflowMapping' is not null or undefined
        if (issueTypeWorkflowMapping === null || issueTypeWorkflowMapping === undefined) {
            throw new Error('Required parameter issueTypeWorkflowMapping was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceSetWorkflowSchemeIssueTypePut.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(issueTypeWorkflowMapping, "IssueTypeWorkflowMapping")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WorkflowScheme;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "WorkflowScheme");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Sets the default workflow for a workflow scheme.  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` in the request object and a draft workflow scheme will be created or updated with the new default workflow. The draft workflow scheme can be published in Jira.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Update default workflow
     * @param id The ID of the workflow scheme.
     * @param defaultWorkflow The new default workflow.
     */
    public comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceUpdateDefaultWorkflowPut (id: number, defaultWorkflow: DefaultWorkflow, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: WorkflowScheme;  }> {
        const localVarPath = this.basePath + '/api/3/workflowscheme/{id}/default'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceUpdateDefaultWorkflowPut.');
        }

        // verify required parameter 'defaultWorkflow' is not null or undefined
        if (defaultWorkflow === null || defaultWorkflow === undefined) {
            throw new Error('Required parameter defaultWorkflow was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceUpdateDefaultWorkflowPut.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(defaultWorkflow, "DefaultWorkflow")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WorkflowScheme;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "WorkflowScheme");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Sets the default workflow for a workflow scheme's draft.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Update draft default workflow
     * @param id The ID of the workflow scheme that the draft belongs to.
     * @param defaultWorkflow The object for the new default workflow.
     */
    public comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceUpdateDraftDefaultWorkflowPut (id: number, defaultWorkflow: DefaultWorkflow, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: WorkflowScheme;  }> {
        const localVarPath = this.basePath + '/api/3/workflowscheme/{id}/draft/default'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceUpdateDraftDefaultWorkflowPut.');
        }

        // verify required parameter 'defaultWorkflow' is not null or undefined
        if (defaultWorkflow === null || defaultWorkflow === undefined) {
            throw new Error('Required parameter defaultWorkflow was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceUpdateDraftDefaultWorkflowPut.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(defaultWorkflow, "DefaultWorkflow")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WorkflowScheme;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "WorkflowScheme");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Sets the issue types for a workflow in a workflow scheme's draft. The workflow can also be set as the default workflow for the draft workflow scheme. Unmapped issues types are mapped to the default workflow.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Set issue types for workflow in workflow scheme
     * @param id The ID of the workflow scheme that the draft belongs to.
     * @param workflowName The name of the workflow.
     * @param issueTypesWorkflowMapping
     */
    public comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceUpdateDraftWorkflowMappingPut (id: number, workflowName: string, issueTypesWorkflowMapping: IssueTypesWorkflowMapping, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: WorkflowScheme;  }> {
        const localVarPath = this.basePath + '/api/3/workflowscheme/{id}/draft/workflow'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceUpdateDraftWorkflowMappingPut.');
        }

        // verify required parameter 'workflowName' is not null or undefined
        if (workflowName === null || workflowName === undefined) {
            throw new Error('Required parameter workflowName was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceUpdateDraftWorkflowMappingPut.');
        }

        // verify required parameter 'issueTypesWorkflowMapping' is not null or undefined
        if (issueTypesWorkflowMapping === null || issueTypesWorkflowMapping === undefined) {
            throw new Error('Required parameter issueTypesWorkflowMapping was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceUpdateDraftWorkflowMappingPut.');
        }

        if (workflowName !== undefined) {
            localVarQueryParameters['workflowName'] = ObjectSerializer.serialize(workflowName, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(issueTypesWorkflowMapping, "IssueTypesWorkflowMapping")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WorkflowScheme;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "WorkflowScheme");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Sets the issue types for a workflow in a workflow scheme. The workflow can also be set as the default workflow for the workflow scheme. Unmapped issues types are mapped to the default workflow.  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` in the request body and a draft workflow scheme will be created or updated with the new workflow-issue types mappings. The draft workflow scheme can be published in Jira.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Set issue types for workflow in workflow scheme
     * @param id The ID of the workflow scheme.
     * @param workflowName The name of the workflow.
     * @param issueTypesWorkflowMapping
     */
    public comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceUpdateWorkflowMappingPut (id: number, workflowName: string, issueTypesWorkflowMapping: IssueTypesWorkflowMapping, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: WorkflowScheme;  }> {
        const localVarPath = this.basePath + '/api/3/workflowscheme/{id}/workflow'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceUpdateWorkflowMappingPut.');
        }

        // verify required parameter 'workflowName' is not null or undefined
        if (workflowName === null || workflowName === undefined) {
            throw new Error('Required parameter workflowName was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceUpdateWorkflowMappingPut.');
        }

        // verify required parameter 'issueTypesWorkflowMapping' is not null or undefined
        if (issueTypesWorkflowMapping === null || issueTypesWorkflowMapping === undefined) {
            throw new Error('Required parameter issueTypesWorkflowMapping was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceUpdateWorkflowMappingPut.');
        }

        if (workflowName !== undefined) {
            localVarQueryParameters['workflowName'] = ObjectSerializer.serialize(workflowName, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(issueTypesWorkflowMapping, "IssueTypesWorkflowMapping")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WorkflowScheme;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "WorkflowScheme");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Updates a draft workflow scheme. If a draft workflow scheme does not exist for the active workflow scheme, then a draft is created. Note that an active workflow scheme can only have one draft workflow scheme at any given time.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Update draft workflow scheme
     * @param id The ID of the active workflow scheme that the draft was originally created from.
     * @param workflowScheme
     */
    public comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceUpdateWorkflowSchemeDraftPut (id: number, workflowScheme: WorkflowScheme, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: WorkflowScheme;  }> {
        const localVarPath = this.basePath + '/api/3/workflowscheme/{id}/draft'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceUpdateWorkflowSchemeDraftPut.');
        }

        // verify required parameter 'workflowScheme' is not null or undefined
        if (workflowScheme === null || workflowScheme === undefined) {
            throw new Error('Required parameter workflowScheme was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceUpdateWorkflowSchemeDraftPut.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(workflowScheme, "WorkflowScheme")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WorkflowScheme;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "WorkflowScheme");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Updates a workflow scheme, including the name, default workflow, issue type to project mappings, and more. If the workflow scheme is active (that is, being used by at least one project), then a draft workflow scheme is created or updated instead, provided that `updateDraftIfNeeded` is set to `true`.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Update workflow scheme
     * @param id The ID of the workflow scheme. Find this ID by editing the desired workflow scheme in Jira. The ID will be shown in the URL as &#x60;schemeId&#x60;. For example, _schemeId&#x3D;10301_.
     * @param workflowScheme
     */
    public comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceUpdateWorkflowSchemePut (id: number, workflowScheme: WorkflowScheme, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: WorkflowScheme;  }> {
        const localVarPath = this.basePath + '/api/3/workflowscheme/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceUpdateWorkflowSchemePut.');
        }

        // verify required parameter 'workflowScheme' is not null or undefined
        if (workflowScheme === null || workflowScheme === undefined) {
            throw new Error('Required parameter workflowScheme was null or undefined when calling comAtlassianJiraRestV2AdminWorkflowschemeWorkflowSchemeResourceUpdateWorkflowSchemePut.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(workflowScheme, "WorkflowScheme")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: WorkflowScheme;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "WorkflowScheme");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Deletes a dashboard item property.  **[Permissions](#permissions) required:** Permission to access Jira. However, to delete a dashboard item property the user must be the owner of the dashboard. Note, users with the _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard.
     * @summary Delete dashboard item property
     * @param dashboardId The ID of the dashboard.
     * @param itemId The ID of the dashboard item.
     * @param propertyKey The key of the dashboard item property.
     */
    public comAtlassianJiraRestV2DashboardDashboardItemPropertyResourceDeleteDashboardItemPropertyDelete (dashboardId: string, itemId: string, propertyKey: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}'
            .replace('{' + 'dashboardId' + '}', encodeURIComponent(String(dashboardId)))
            .replace('{' + 'itemId' + '}', encodeURIComponent(String(itemId)))
            .replace('{' + 'propertyKey' + '}', encodeURIComponent(String(propertyKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'dashboardId' is not null or undefined
        if (dashboardId === null || dashboardId === undefined) {
            throw new Error('Required parameter dashboardId was null or undefined when calling comAtlassianJiraRestV2DashboardDashboardItemPropertyResourceDeleteDashboardItemPropertyDelete.');
        }

        // verify required parameter 'itemId' is not null or undefined
        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling comAtlassianJiraRestV2DashboardDashboardItemPropertyResourceDeleteDashboardItemPropertyDelete.');
        }

        // verify required parameter 'propertyKey' is not null or undefined
        if (propertyKey === null || propertyKey === undefined) {
            throw new Error('Required parameter propertyKey was null or undefined when calling comAtlassianJiraRestV2DashboardDashboardItemPropertyResourceDeleteDashboardItemPropertyDelete.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the key and value of a dashboard item property.  A dashboard item enables an app to add user-specific information to a user dashboard. Dashboard items are exposed to users as gadgets that users can add to their dashboards. For more information on how users do this, see [Adding and customizing gadgets](https://confluence.atlassian.com/x/7AeiLQ).  When an app creates a dashboard item it registers a callback to receive the dashboard item ID. The callback fires whenever the item is rendered or, where the item is configurable, the user edits the item. The app then uses this resource to store the item's content or configuration details. For more information on working with dashboard items, see [Building a dashboard item for a JIRA Connect add-on](https://developer.atlassian.com/server/jira/platform/guide-building-a-dashboard-item-for-a-jira-connect-add-on-33746254/) and the [Dashboard Item](https://developer.atlassian.com/cloud/jira/platform/modules/dashboard-item/) documentation.  There is no resource to set or get dashboard items.  **[Permissions](#permissions) required:** Permission to access Jira. However, to get a dashboard item property the user must be the owner of the dashboard or be shared the dashboard. Note, users with the _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users.
     * @summary Get dashboard item property
     * @param dashboardId The ID of the dashboard.
     * @param itemId The ID of the dashboard item.
     * @param propertyKey The key of the dashboard item property.
     */
    public comAtlassianJiraRestV2DashboardDashboardItemPropertyResourceGetDashboardItemPropertyGet (dashboardId: string, itemId: string, propertyKey: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: EntityProperty;  }> {
        const localVarPath = this.basePath + '/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}'
            .replace('{' + 'dashboardId' + '}', encodeURIComponent(String(dashboardId)))
            .replace('{' + 'itemId' + '}', encodeURIComponent(String(itemId)))
            .replace('{' + 'propertyKey' + '}', encodeURIComponent(String(propertyKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'dashboardId' is not null or undefined
        if (dashboardId === null || dashboardId === undefined) {
            throw new Error('Required parameter dashboardId was null or undefined when calling comAtlassianJiraRestV2DashboardDashboardItemPropertyResourceGetDashboardItemPropertyGet.');
        }

        // verify required parameter 'itemId' is not null or undefined
        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling comAtlassianJiraRestV2DashboardDashboardItemPropertyResourceGetDashboardItemPropertyGet.');
        }

        // verify required parameter 'propertyKey' is not null or undefined
        if (propertyKey === null || propertyKey === undefined) {
            throw new Error('Required parameter propertyKey was null or undefined when calling comAtlassianJiraRestV2DashboardDashboardItemPropertyResourceGetDashboardItemPropertyGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: EntityProperty;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "EntityProperty");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the keys of all properties for a dashboard item.  **[Permissions](#permissions) required:** Permission to access Jira. However, to get the property keys the user must be the owner of the dashboard or be shared the dashboard. Note, users with the _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users.
     * @summary Get dashboard item property keys
     * @param dashboardId The ID of the dashboard.
     * @param itemId The ID of the dashboard item.
     */
    public comAtlassianJiraRestV2DashboardDashboardItemPropertyResourceGetDashboardItemPropertyKeysGet (dashboardId: string, itemId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PropertyKeys;  }> {
        const localVarPath = this.basePath + '/api/3/dashboard/{dashboardId}/items/{itemId}/properties'
            .replace('{' + 'dashboardId' + '}', encodeURIComponent(String(dashboardId)))
            .replace('{' + 'itemId' + '}', encodeURIComponent(String(itemId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'dashboardId' is not null or undefined
        if (dashboardId === null || dashboardId === undefined) {
            throw new Error('Required parameter dashboardId was null or undefined when calling comAtlassianJiraRestV2DashboardDashboardItemPropertyResourceGetDashboardItemPropertyKeysGet.');
        }

        // verify required parameter 'itemId' is not null or undefined
        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling comAtlassianJiraRestV2DashboardDashboardItemPropertyResourceGetDashboardItemPropertyKeysGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: PropertyKeys;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "PropertyKeys");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Sets the value of a dashboard item property. Use this resource in apps to store custom data against a dashboard item.  A dashboard item enables an app to add user-specific information to a user dashboard. Dashboard items are exposed to users as gadgets that users can add to their dashboards. For more information on how users do this, see [Adding and customizing gadgets](https://confluence.atlassian.com/x/7AeiLQ).  When an app creates a dashboard item it registers a callback to receive the dashboard item ID. The callback fires whenever the item is rendered or, where the item is configurable, the user edits the item. The app then uses this resource to store the item's content or configuration details. For more information on working with dashboard items, see [Building a dashboard item for a JIRA Connect add-on](https://developer.atlassian.com/server/jira/platform/guide-building-a-dashboard-item-for-a-jira-connect-add-on-33746254/) and the [Dashboard Item](https://developer.atlassian.com/cloud/jira/platform/modules/dashboard-item/) documentation.  There is no resource to set or get dashboard items.  The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.  **[Permissions](#permissions) required:** Permission to access Jira. However, to set a dashboard item property the user must be the owner of the dashboard. Note, users with the _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard.
     * @summary Set dashboard item property
     * @param dashboardId The ID of the dashboard.
     * @param itemId The ID of the dashboard item.
     * @param propertyKey The key of the dashboard item property. The maximum length is 255 characters.
     * @param body
     */
    public comAtlassianJiraRestV2DashboardDashboardItemPropertyResourceSetDashboardItemPropertyPut (dashboardId: string, itemId: string, propertyKey: string, body: any, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}'
            .replace('{' + 'dashboardId' + '}', encodeURIComponent(String(dashboardId)))
            .replace('{' + 'itemId' + '}', encodeURIComponent(String(itemId)))
            .replace('{' + 'propertyKey' + '}', encodeURIComponent(String(propertyKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'dashboardId' is not null or undefined
        if (dashboardId === null || dashboardId === undefined) {
            throw new Error('Required parameter dashboardId was null or undefined when calling comAtlassianJiraRestV2DashboardDashboardItemPropertyResourceSetDashboardItemPropertyPut.');
        }

        // verify required parameter 'itemId' is not null or undefined
        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling comAtlassianJiraRestV2DashboardDashboardItemPropertyResourceSetDashboardItemPropertyPut.');
        }

        // verify required parameter 'propertyKey' is not null or undefined
        if (propertyKey === null || propertyKey === undefined) {
            throw new Error('Required parameter propertyKey was null or undefined when calling comAtlassianJiraRestV2DashboardDashboardItemPropertyResourceSetDashboardItemPropertyPut.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling comAtlassianJiraRestV2DashboardDashboardItemPropertyResourceSetDashboardItemPropertyPut.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "any")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns a list of dashboards owned by or shared with the user. The list may be filtered to include only favorite or owned dashboards.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Get all dashboards
     * @param filter The filter applied to the list of dashboards. Valid values are:  *   &#x60;favourite&#x60; Returns dashboards the user has marked as favorite. *   &#x60;my&#x60; Returns dashboards owned by the user.
     * @param startAt The index of the first item to return in a page of results (page offset).
     * @param maxResults The maximum number of items to return per page. The maximum is &#x60;1000&#x60;.
     */
    public comAtlassianJiraRestV2DashboardDashboardResourceGetAllDashboardsGet (filter?: 'my' | 'favourite', startAt?: number, maxResults?: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PageOfDashboards;  }> {
        const localVarPath = this.basePath + '/api/3/dashboard';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (filter !== undefined) {
            localVarQueryParameters['filter'] = ObjectSerializer.serialize(filter, "'my' | 'favourite'");
        }

        if (startAt !== undefined) {
            localVarQueryParameters['startAt'] = ObjectSerializer.serialize(startAt, "number");
        }

        if (maxResults !== undefined) {
            localVarQueryParameters['maxResults'] = ObjectSerializer.serialize(maxResults, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: PageOfDashboards;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "PageOfDashboards");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns a dashboard.  **[Permissions](#permissions) required:** Permission to access Jira. However, to get a dashboard, the dashboard must be shared with the user or the user must own it. Note, users with the _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users.
     * @summary Get dashboard
     * @param id The ID of the dashboard.
     */
    public comAtlassianJiraRestV2DashboardDashboardResourceGetDashboardGet (id: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Dashboard;  }> {
        const localVarPath = this.basePath + '/api/3/dashboard/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2DashboardDashboardResourceGetDashboardGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Dashboard;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Dashboard");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Searches for dashboards. This method is similar to [Get dashboards](#api-api-3-dashboard-get) except that the results can be refined to include dashboards that have specific attributes. For example, dashboards with a particular name. When multiple attributes are specified only filters matching all attributes are returned.  **[Permissions](#permissions) required:** None, however, only the following dashboards that match the query parameters are returned:  *   Dashboards owned by the user. Not returned for anonymous users. *   Dashboards shared with a group that the user is a member of. Not returned for anonymous users. *   Dashboards shared with a private project that the user can browse. Not returned for anonymous users. *   Dashboards shared with a public project. *   Dashboards shared with the public.
     * @summary Search for dashboards
     * @param dashboardName String used to perform a case-insensitive partial match with &#x60;name&#x60;.
     * @param accountId User account ID used to return dashboards with the matching &#x60;owner.accountId&#x60;. This parameter cannot be used with the &#x60;owner&#x60; parameter.
     * @param owner This parameter has been deprecated due to privacy changes. Use &#x60;accountId&#x60; instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. User name used to return dashboards with the matching &#x60;owner.name&#x60;. This parameter cannot be used with the &#x60;accountId&#x60; parameter.
     * @param groupname Group name used to returns dashboards that are shared with a group that matches &#x60;sharePermissions.group.name&#x60;.
     * @param projectId Project ID used to returns dashboards that are shared with a project that matches &#x60;sharePermissions.project.id&#x60;.
     * @param orderBy [Orders](#ordering) the results using one of these dashboard properties:  *   &#x60;id&#x60; Orders by dashboard &#x60;id&#x60;. *   &#x60;name&#x60; Orders by dashboard &#x60;name&#x60;. *   &#x60;description&#x60; Orders by dashboard &#x60;description&#x60;. Note that this sort works independently of whether the expand to display the description field is in use. *   &#x60;owner&#x60; Orders by owner &#x60;name&#x60;. *   &#x60;favourite_count&#x60; Orders by &#x60;popularity&#x60;. *   &#x60;is_favourite&#x60; Orders by &#x60;isFavourite&#x60;.
     * @param startAt The index of the first item to return in a page of results (page offset).
     * @param maxResults The maximum number of items to return per page. The maximum is &#x60;100&#x60;.
     * @param expand Use [expand](#expansion) to include additional information about dashboard in the response. This parameter accepts multiple values separated by a comma:  *   &#x60;description&#x60; Returns the description of the dashboard. *   &#x60;owner&#x60; Returns the owner of the dashboard. *   &#x60;viewUrl&#x60; Returns the URL that is used to view the dashboard. *   &#x60;favourite&#x60; Returns &#x60;isFavourite&#x60;, an indicator of whether the user has set the dashboard as a favorite. *   &#x60;favouritedCount&#x60; Returns &#x60;popularity&#x60;, a count of how many users have set this dashboard as a favorite. *   &#x60;sharePermissions&#x60; Returns details of the share permissions defined for the dashboard.
     */
    public comAtlassianJiraRestV2DashboardDashboardResourceGetDashboardsPaginatedGet (dashboardName?: string, accountId?: string, owner?: string, groupname?: string, projectId?: number, orderBy?: 'id' | 'name' | 'description' | 'owner' | 'favorite_count' | 'is_favorite' | '-id' | '-name' | '-description' | '-owner' | '-favorite_count' | '-is_favorite', startAt?: number, maxResults?: number, expand?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PageOfDashboard;  }> {
        const localVarPath = this.basePath + '/api/3/dashboard/search';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (dashboardName !== undefined) {
            localVarQueryParameters['dashboardName'] = ObjectSerializer.serialize(dashboardName, "string");
        }

        if (accountId !== undefined) {
            localVarQueryParameters['accountId'] = ObjectSerializer.serialize(accountId, "string");
        }

        if (owner !== undefined) {
            localVarQueryParameters['owner'] = ObjectSerializer.serialize(owner, "string");
        }

        if (groupname !== undefined) {
            localVarQueryParameters['groupname'] = ObjectSerializer.serialize(groupname, "string");
        }

        if (projectId !== undefined) {
            localVarQueryParameters['projectId'] = ObjectSerializer.serialize(projectId, "number");
        }

        if (orderBy !== undefined) {
            localVarQueryParameters['orderBy'] = ObjectSerializer.serialize(orderBy, "'id' | 'name' | 'description' | 'owner' | 'favorite_count' | 'is_favorite' | '-id' | '-name' | '-description' | '-owner' | '-favorite_count' | '-is_favorite'");
        }

        if (startAt !== undefined) {
            localVarQueryParameters['startAt'] = ObjectSerializer.serialize(startAt, "number");
        }

        if (maxResults !== undefined) {
            localVarQueryParameters['maxResults'] = ObjectSerializer.serialize(maxResults, "number");
        }

        if (expand !== undefined) {
            localVarQueryParameters['expand'] = ObjectSerializer.serialize(expand, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: PageOfDashboard;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "PageOfDashboard");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Evaluates a Jira expression and returns its value.  Jira expressions is the name of a domain-specific language for Jira that can be used to evaluate expressions in the context of Jira entities.  #### Context variables  The following context variables are available:  *   `user`: The current user. Equal to `null` if the request is anonymous.        Fields: `accountId`, `displayName`, `properties`. *   `app`: The [](https://developer.atlassian.com/cloud/jira/platform/integrating-with-jira-cloud/#atlassian-connect)Connect app that made the request. Available only for authenticated requests made by Connect Apps (read more here: [Authentication for Connect apps](https://developer.atlassian.com/cloud/jira/platform/authentication-for-apps/)).        Fields: `key`, `properties`. *   `issue`: The current issue. Available only when the issue is provided in the request context object.        Fields: `id`, `key`, `summary`, `description`, `created`, `updated`, `dueDate`, `project`, `priority`, `assignee`, `reporter`, `issueType`, `status`, `resolution`, `resolutionDate`, `comments`, `properties`, `links`, `parent`, `subtasks`.        Jira Software fields: `epic`, `sprint`, `closedSprints`, `flagged`.        Apart from these, all custom fields are available and can be referenced by one of the following:          *   ID: `issue.customfield_10010`     *   key: `issue['com.my.app.field-key']`                   Custom fields are returned as JSON values, using exactly the same format as in the issue REST API. *   `project`: The current project. Available only when the project is provided in the request context object.        Fields: `id`, `key`, `name`, `projectTypeKey`, `properties`. *   `sprint`: The current sprint. Available only when the sprint is provided in the request context object.        Fields: `id`, `name`, `goal`, `state`, `startDate`, `endDate`, `completeDate`, `properties`. *   `board`: The current board. Available only when the board is provided in the request context object.        Fields: `id`, `activeSprints`, `closedSprints`, `futureSprints`, `hasBacklog`, `hasSprints`, `canAdminister`, `properties`.  #### Syntax and semantics  Jira expressions follow JavaScript syntax. The following constructs are supported (this list may not be exhaustive):  *   **Static and computed member access**         Static member access is used when you want to access an object's field and know the field's name at the time of writing the expression. For example, `issue.key` is an expression that accesses the `key` field from `issue`.         Computed member access is used when you want to dynamically create the name of the field you are accessing, or if the name contains special characters, in which case accessing the field using the static member access will not be allowed by the syntax. It is especially useful when accessing entity properties, which usually contain dots or dashes in their names. For example, `issue.properties['com.your.app.property-name']`. *   **Indexed access**         Individual members of lists can be accessed by index. For example, to get the first issue comment, write: `issue.comments[0]`. *   **Mathematical operators**         Jira expressions allow all the usual kinds of mathematical operations. You can add, subtract, multiply, or divide numbers. For example, to check if the number of comments on an issue is even, write: `issue.comments.length % 2 == 0`. *   **Boolean operators**         The usual logical operators are available: conjunction (`&&`), disjunction (`||`) and negation (`!`). If used with boolean values (`true` or `false`), their behavior follows the rules of classical boolean algebra. Each of these operators can also be used with any type, following the [JavaScript semantics](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators) in this case.         The latter is especially useful for defining default values. For example, to get the value of the issue property `\"myProperty\"` while also providing a default value in case it's not defined, write: `issue.properties[\"myProperty\"] || \"default value\"`. *   **Comparisons**         Values can be compared to each other in different ways, depending on the type. For example, it's possible to check if one _number_ is lesser or greater than another number, but _lists_ or _strings_ can be tested only for equality. Only values of the same type can be compared together.         For example, to check if the issue has more than 0 comments, write: `issue.comments.length > 0`. *   **Conditional expressions**         Conditional expressions can be used when different results should be returned depending on a condition. For example, to get the first comment's author, we would first need to check if there are comments at all:       ```issue.comments.length > 0 ? issue.comments[0].author : null```. *   **Arrow functions**         Jira expressions by design do not support classical imperative loops. Instead, they follow the modern paradigm of functional programming and provide a set of built-in list processing methods, along with the syntax for arrow functions, also knows as lambdas. These functions are written in the form of _x => y_, where _x_ is the name of the variable that can be used in the function's body, denoted here as _y_.         For example, to return the number of comments with contents longer than 100 characters, first map the comments to their texts, then filter them to leave only those long enough:         ```issue.comments.map(c => c.body.plainText).filter(text => text.length > 100).length```. *   **List literals**         Lists can not only be obtained from context objects but also created manually. For example, to check if the issue type is either a Bug or Task, create a list with these two types and use the `includes()` method to test if the actual value is one of the two listed: ```['Bug', 'Task'].includes(issue.issueType.name)```. *   **Object literals**         Jira expressions can return structured pieces of data with the use of object literals. For example, to return only comments' authors and contents instead of the entire comments, create an object containing these two fields for each comment:         ```issue.comments.map(c => { author: c.author, body: c.body.plainText })```.  #### Lists  The following methods and properties are available for lists.  *   `list.length`         Returns the number of items stored in the list.         For example, to get the comments count on the issue, write: `issue.comments.length`. *   `list.map(Any => Any)`         Maps all items in the list to the result of the provided function.         For example, to transform a list of comments into a list of corresponding comment IDs, use the `map()` method and provide a function that given a comment, returns its ID:         `issue.comments.map(comment => comment.id)`. *   `list.filter(Any => Boolean)`         Leaves only items that do satisfy the given function, that is, for which the given function returns `true`. If the function's result is not a boolean value, it will be converted to one, following these rules:          *   Empty strings are `false`.     *   Null values are `false`.     *   Negative numbers, zero and NaN (Not a Number) are `false`.     *   Everything else is `true`.                   For example, to get only comments written by the current user, execute:         `issue.comments.filter(c => c.author.key == user.key)`. *   `list.every(Any => Boolean)`         Checks if all elements in the list satisfy the given predicate.         For example, to check if all properties from a list are set for the current issue, write:         `['key1', 'key2', 'key3'].every(key => issue.properties.keys().includes(key))`.         If you're feeling particularly adventurous, instead of a lambda, you can pass the function directly:         `['key1', 'key2', 'key3'].every(issue.properties.keys().includes)`. *   `list.some(Any => Boolean)`         Checks if the list contains at least one element that satisfies the given predicate. *   `list.includes(Any)`         Checks if the given argument is stored in the list.         For example, to check if the current user commented on the issue, first map the comments to their authors using `map()` and then use the `includes()` method:         `issue.comments.map(c => c.author).includes(user)`. *   `list.indexOf(Any)`         Returns the index of the first occurrence of the item in the list. If the item is not in the list, -1 is returned.         For example, to check if the current user was the first commenter on the issue, write:         `issue.comments.map(c => c.author).indexOf(user) == 0`. *   `list.slice(Number, Number?)`         Returns a portion of the list, with the index starting from the first argument (inclusive), and ending with the second one (exclusive). The second argument is optional, if not provided, all remaining elements will be returned. Negative numbers are allowed and mean indexes counted from the end of the list.         For example, comments are returned from the oldest to newest. To get only 10 _newest_ comments (10 elements from the end of the list), write: `issue.comments.slice(-10)`. *   `list.flatten()`         Flattens a multi-dimensional list. That is, the list is transformed into a single-dimensional list with elements from the nested lists included in the resultant list.         For example, the result of `\\[ \\[1, 2, 3\\], 4, \\[5, 6\\] \\].flatten()` will be `[1, 2, 3, 4, 5, 6]`. *   `list.flatMap(Any => Any)`         Maps all items in the list and flattens the result. *   `list.reduce(Any => Any, Any?)`         Aggregates all elements of the list using the function provided in the first argument. The operation starts from the first element of the list, unless the initial value is provided in the optional second argument. If the list is empty and no initial value is given, an error will be returned.         For example, to sum up the length of all comments, write:         `issue.comments.reduce((total, current) => total + current.body.plainText.length, 0)`  #### Entity properties  Using Jira expressions, it is possible to access entity properties of any entity that supports them, that is: issue, project, issue type, comment, user, board, sprint. [App properties](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-app-properties-a-app-properties) are also available. To do this, get the `properties` field of the appropriate object. For example, _app.properties_. The field returns what can be thought of as a map of all properties, indexed by their keys.  There are a few ways to interact with this map. It is possible to:  *   Get the value of a property using static member access. For example `issue.properties.myProperty`. *   Get the value of a property using computed member access. For example `issue.properties['myProperty']`. *   Get the value of a property using the `get()` method. For example `issue.properties.get('myProperty')`. *   Get a list of keys of all available properties using the `keys()`. For example `issue.properties.keys()`.  Accessing a property that is not defined will return `null`.  #### Maps  If the returned property value is a JSON object, it will be converted to a _Map_. Maps in Jira expressions are a special type with the following characteristics:  *   Static or dynamic member access can be used to get their values indexed by keys. For example, `map.key` is the same as `map['key']`. *   Values can also be accessed using the `get()` method. For example `map.get('key')`. *   The above methods will return `null` if there is no mapping for the given key. *   A list of entries can be obtained with the `entries()` method, which returns a list whose items are two element lists where the first element is the entry key, and the second one is the entry value. For example, to get all keys in the map, write `map.entries().map(entry => entry\\[0\\])`, to get all values: `map.entries().map(entry => entry[1])`.  Object literals are also evaluated to the _Map_ object. For example, `{ id: issue.id, summary: issue.summary }` will evaluate to a map with two keys: `id` and `summary`.  #### Date and time  Fields that contain timestamps, such as `issue.created` or `issue.resolutionDate`, are returned as objects of the _Date_ type, which is based on the [JavaScript Date API](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date).  Fields that contain dates only, such as `issue.dueDate`, are returned as the timezone-agnostic _CalendarDate_ type, which is like _Date_, but with a limited set of methods (methods related to time or timezones are not available).  A _Date_ or _CalendarDate_ object can be transformed into three different String formats:  *   **ISO format**. For example, _2018-06-29T12:16:37.471Z_ (_Date_ format) or _2018-06-29_ (_CalendarDate_ format).         To transform a date to this format, call the `toISOString()` method. This will return a string in the ISO 8601 extended format. For example, `issue.created.toISOString()`. *   **Jira REST API format**. For example, _2018-06-29T22:16:37.471+1000_ (_Date_ format) or _2018-06-29_ (_CalendarDate_ format).         Returning dates from Jira expressions renders them in the Jira REST API format. For example, `issue.created`. *   **Human-readable format**. For example, _29/Jun/18 10:16 PM_ (_Date_ format) or _29/Jun/18_ (_CalendarDate_ format).         To transform a date to this format, call the `toString()` method. This will return a string in the human-readable format, according to the current user's locale and timezone. For example, `issue.created.toString()`. The same format is also used if a date is concatenated with a string. For example, `'Due date: ' + issue.dueDate`.  A `Date` object can also be converted to a `CalendarDate` object by using either `toCalendarDate()` or `toCalendarDateUTC()`. These methods remove the time information from the object, leaving only the calendar date, in the current user's timezone or the UTC timezone, respectively.  _Date_ objects of the same type can be compared using regular comparison operators. For example, to get comments that were added after the issue's due date, write: `issue.comments.filter(c => c.created.toCalendarDate() > issue.dueDate)`.  A date can be modified by adding or subtracting units of time. To do this, use the methods below. Each of these methods take a date and a number of units of time, then create a new modified date.  *   `date.plusMonths(Number)`: Creates a new date that is the original date plus the specified number of months. *   `date.plusDays(Number)`: Creates a new date that is the original date plus the specified number of days. *   `date.plusHours(Number)`: Creates a new date that is the original date plus the specified number of hours. *   `date.plusMinutes(Number)`: Creates a new date that is the original date plus the specified number of minutes.  (All methods above have a subtraction counterpart. For example, `date.minusMonths(Number)`.)  Date modification methods can be used to build expressions that assert when Jira events have occurred. To do this, get the current date and modify it, then compare the modified date to the date of the event. Here's an example of how to check if an issue has been updated in the last three days:  1.  Get the current date. To do this, create a new Date object (that is, `new Date()`). 2.  Modify the date, as desired. For example, `new Date().minusDays(3)` is the current date minus three days. 3.  Compare the modified date to the date of the `issue.updated` event. For example, `issue.updated > new Date().minusDays(3)` will return true if the issue has been updated in the last three days.  #### Restrictions  Some restrictions apply to the evaluation of expressions. While the limits are high enough not to interfere with any intended usage, it's important to realize that they do exist:  *   Some lists are limited to 50 elements in the final result. This is similar to [pagination](#pagination) and serves the same purpose. For example, a list of issue comments will always be trimmed to at most 50 items.       (Use the `slice()` method to control which portion of the list to return.) *   The expression can execute at most 10 expensive operations (expensive operations are those that load additional data, such as entity properties, comments, or custom fields). *   The maximun number of results returned in the response is 10,000 primitive values or 1,000 Jira REST API objects. *   The expression's length is limited to 1,000 characters or 100 syntactic elements.  Use the _meta.complexity_ [expand](#expansion) parameter to see the complexity of your expression and how close it is to reaching the limits.  #### Examples  The following examples demonstrate how to use Jira expressions and what they can do.  Get contents of all comments added by the current user in the current issue:   ```issue.comments.filter(c => c.author.accountId == user.accountId).map(c => c.body)```  Check if the current user is the one stored in a project's entity property:   ```user.accountId == project.properties['special-user'].accountId```  Check if the issue type is either a Bug or Task (using a regular expression):   ```issue.issueType.name.match('^(Bug|Task)$') != null```  Retrieve IDs of all linked issues along with the link name:   ```issue.links.map(link => { name: link.type[link.direction], issue: link.linkedIssue.id }) ```  **[Permissions](#permissions) required**: Permission to access Jira. However, an expression may return different results for different users depending on their permissions. For example, different users may see different comments on the same issue.   Permission to access Jira Software is required to access Jira Software context variables (`board` and `sprint`) or fields. For example, `issue.sprint`.
     * @summary Evaluate Jira expression
     * @param jiraExpressionEvalRequestBean The Jira expression and the evaluation context.
     * @param expand Use [expand](#expansion) to include additional information in the response. This parameter accepts multiple values separated by a comma:  *   &#x60;meta.complexity&#x60; Returns information about the expression complexity (for example, the number of expensive operations used by the expression) and how close the expression is to reaching the complexity limit. Useful when designing and debugging your expressions.
     */
    public comAtlassianJiraRestV2ExpressionJiraExpressionsResourceEvaluateJiraExpressionPost (jiraExpressionEvalRequestBean: JiraExpressionEvalRequestBean, expand?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: JiraExpressionResult;  }> {
        const localVarPath = this.basePath + '/api/3/expression/eval';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'jiraExpressionEvalRequestBean' is not null or undefined
        if (jiraExpressionEvalRequestBean === null || jiraExpressionEvalRequestBean === undefined) {
            throw new Error('Required parameter jiraExpressionEvalRequestBean was null or undefined when calling comAtlassianJiraRestV2ExpressionJiraExpressionsResourceEvaluateJiraExpressionPost.');
        }

        if (expand !== undefined) {
            localVarQueryParameters['expand'] = ObjectSerializer.serialize(expand, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(jiraExpressionEvalRequestBean, "JiraExpressionEvalRequestBean")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: JiraExpressionResult;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "JiraExpressionResult");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the metadata for the contents of an attachment, if it is an archive, and metadata for the attachment itself. For example, if the attachment is a ZIP archive, then information about the files in the archive is returned and metadata for the ZIP archive. Currently, only the ZIP archive format is supported.  Use this method to retrieve data that is presented in the UI, as this method returns the metadata for the attachment itself, such as the attachment's ID and name. Otherwise, use [Get contents metadata for an expanded attachment](#api-api-3-attachment-id-expand-raw-get), which only returns the metadata for the attachment's contents.  **[Permissions](#permissions) required:** For the issue containing the attachment:  *   _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in. *   If configured, permission to see the issue granted by [issue-level security](https://confluence.atlassian.com/x/J4lKLg).
     * @summary Get all metadata for an expanded attachment
     * @param id The ID of the attachment.
     */
    public comAtlassianJiraRestV2IssueAttachmentAttachmentResourceExpandAttachmentForHumansGet (id: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: AttachmentArchiveMetadataReadable;  }> {
        const localVarPath = this.basePath + '/api/3/attachment/{id}/expand/human'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2IssueAttachmentAttachmentResourceExpandAttachmentForHumansGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: AttachmentArchiveMetadataReadable;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "AttachmentArchiveMetadataReadable");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the metadata for the contents of an attachment, if it is an archive. For example, if the attachment is a ZIP archive, then information about the files in the archive is returned. Currently, only the ZIP archive format is supported.  Use this method if you are processing the data without presenting it in the UI, as this method only returns the metadata for the contents of the attachment. Otherwise, to retrieve data to present in the UI, use [Get all metadata for an expanded attachment](#api-api-3-attachment-id-expand-human-get) which also returns the metadata for the attachment itself, such as the attachment's ID and name.  **[Permissions](#permissions) required:** For the issue containing the attachment:  *   _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in. *   If configured, permission to see the issue granted by [issue-level security](https://confluence.atlassian.com/x/J4lKLg).
     * @summary Get contents metadata for an expanded attachment
     * @param id The ID of the attachment.
     */
    public comAtlassianJiraRestV2IssueAttachmentAttachmentResourceExpandAttachmentForMachinesGet (id: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: AttachmentArchiveMetadata;  }> {
        const localVarPath = this.basePath + '/api/3/attachment/{id}/expand/raw'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2IssueAttachmentAttachmentResourceExpandAttachmentForMachinesGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: AttachmentArchiveMetadata;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "AttachmentArchiveMetadata");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the metadata for an attachment. Note that the attachment itself is not returned.  **[Permissions](#permissions) required:** For the issue containing the attachment:  *   _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in. *   If configured, permission to see the issue granted by [issue-level security](https://confluence.atlassian.com/x/J4lKLg).
     * @summary Get attachment metadata
     * @param id The ID of the attachment.
     */
    public comAtlassianJiraRestV2IssueAttachmentAttachmentResourceGetAttachmentGet (id: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: AttachmentMetadata;  }> {
        const localVarPath = this.basePath + '/api/3/attachment/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2IssueAttachmentAttachmentResourceGetAttachmentGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: AttachmentMetadata;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "AttachmentMetadata");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the global attachment settings, that is, whether attachments are enabled and the maximum attachment size allowed.  Note that there are also [project permissions](https://confluence.atlassian.com/x/yodKLg) that restrict whether users can create and delete attachments or not.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Get global attachment settings
     */
    public comAtlassianJiraRestV2IssueAttachmentAttachmentResourceGetAttachmentMetaGet (options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: AttachmentSettings;  }> {
        const localVarPath = this.basePath + '/api/3/attachment/meta';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: AttachmentSettings;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "AttachmentSettings");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Deletes an attachment from an issue.  **[Permissions](#permissions) required:** For the project holding the issue containing the attachment:  *   _Delete own attachments_ [project permission](https://confluence.atlassian.com/x/yodKLg) to delete an attachment created by the calling user. *   _Delete all attachments_ [project permission](https://confluence.atlassian.com/x/yodKLg) to delete an attachment created by any user.
     * @summary Delete attachment
     * @param id The ID of the attachment.
     */
    public comAtlassianJiraRestV2IssueAttachmentAttachmentResourceRemoveAttachmentDelete (id: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/attachment/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2IssueAttachmentAttachmentResourceRemoveAttachmentDelete.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns a list of system avatar details by owner type, where the owner types are issue type, project, or user.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Get system avatars by type
     * @param type The avatar type.
     */
    public comAtlassianJiraRestV2IssueAvatarResourceGetAllSystemAvatarsGet (type: 'issuetype' | 'project' | 'user', options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: SystemAvatars;  }> {
        const localVarPath = this.basePath + '/api/3/avatar/{type}/system'
            .replace('{' + 'type' + '}', encodeURIComponent(String(type)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling comAtlassianJiraRestV2IssueAvatarResourceGetAllSystemAvatarsGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: SystemAvatars;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "SystemAvatars");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Deletes a comment property.  **[Permissions](#permissions) required:** either of:  *   _Edit All Comments_ [project permission](https://confluence.atlassian.com/x/yodKLg) to delete a property from any comment. *   _Edit Own Comments_ [project permission](https://confluence.atlassian.com/x/yodKLg) to delete a property from a comment created by the user.  Also, when the visibility of a comment is restricted to a role or group the user must be a member of that role or group.
     * @summary Delete comment property
     * @param commentId The ID of the comment.
     * @param propertyKey The key of the property.
     */
    public comAtlassianJiraRestV2IssueCommentPropertyResourceDeleteCommentPropertyDelete (commentId: string, propertyKey: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/comment/{commentId}/properties/{propertyKey}'
            .replace('{' + 'commentId' + '}', encodeURIComponent(String(commentId)))
            .replace('{' + 'propertyKey' + '}', encodeURIComponent(String(propertyKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'commentId' is not null or undefined
        if (commentId === null || commentId === undefined) {
            throw new Error('Required parameter commentId was null or undefined when calling comAtlassianJiraRestV2IssueCommentPropertyResourceDeleteCommentPropertyDelete.');
        }

        // verify required parameter 'propertyKey' is not null or undefined
        if (propertyKey === null || propertyKey === undefined) {
            throw new Error('Required parameter propertyKey was null or undefined when calling comAtlassianJiraRestV2IssueCommentPropertyResourceDeleteCommentPropertyDelete.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the value of a comment property.  **[Permissions](#permissions) required:** either of:  *   _Edit All Comments_ [project permission](https://confluence.atlassian.com/x/yodKLg) to get the value of a property from any comment. *   _Edit Own Comments_ [project permission](https://confluence.atlassian.com/x/yodKLg) to get the value of a property from a comment created by the user.  Also, when the visibility of a comment is restricted to a role or group the user must be a member of that role or group.
     * @summary Get comment property
     * @param commentId The ID of the comment.
     * @param propertyKey The key of the property.
     */
    public comAtlassianJiraRestV2IssueCommentPropertyResourceGetCommentPropertyGet (commentId: string, propertyKey: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: EntityProperty;  }> {
        const localVarPath = this.basePath + '/api/3/comment/{commentId}/properties/{propertyKey}'
            .replace('{' + 'commentId' + '}', encodeURIComponent(String(commentId)))
            .replace('{' + 'propertyKey' + '}', encodeURIComponent(String(propertyKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'commentId' is not null or undefined
        if (commentId === null || commentId === undefined) {
            throw new Error('Required parameter commentId was null or undefined when calling comAtlassianJiraRestV2IssueCommentPropertyResourceGetCommentPropertyGet.');
        }

        // verify required parameter 'propertyKey' is not null or undefined
        if (propertyKey === null || propertyKey === undefined) {
            throw new Error('Required parameter propertyKey was null or undefined when calling comAtlassianJiraRestV2IssueCommentPropertyResourceGetCommentPropertyGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: EntityProperty;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "EntityProperty");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the keys of all the properties of a comment.  **[Permissions](#permissions) required:** either of:  *   _Edit All Comments_ [project permission](https://confluence.atlassian.com/x/yodKLg) to get the keys of all the properties on any comment. *   _Edit Own Comments_ [project permission](https://confluence.atlassian.com/x/yodKLg) to get the keys of all the properties on a comment created by the user.  Also, when the visibility of a comment is restricted to a role or group the user must be a member of that role or group.
     * @summary Get comment property keys
     * @param commentId The ID of the comment.
     */
    public comAtlassianJiraRestV2IssueCommentPropertyResourceGetCommentPropertyKeysGet (commentId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PropertyKeys;  }> {
        const localVarPath = this.basePath + '/api/3/comment/{commentId}/properties'
            .replace('{' + 'commentId' + '}', encodeURIComponent(String(commentId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'commentId' is not null or undefined
        if (commentId === null || commentId === undefined) {
            throw new Error('Required parameter commentId was null or undefined when calling comAtlassianJiraRestV2IssueCommentPropertyResourceGetCommentPropertyKeysGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: PropertyKeys;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "PropertyKeys");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Creates or updates the value of a property for a comment. Use this resource to store custom data against a comment.  The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.  **[Permissions](#permissions) required:** either of:  *   _Edit All Comments_ [project permission](https://confluence.atlassian.com/x/yodKLg) to create or update the value of a property on any comment. *   _Edit Own Comments_ [project permission](https://confluence.atlassian.com/x/yodKLg) to create or update the value of a property on a comment created by the user.  Also, when the visibility of a comment is restricted to a role or group the user must be a member of that role or group.
     * @summary Set comment property
     * @param commentId The ID of the comment.
     * @param propertyKey The key of the property. The maximum length is 255 characters.
     * @param body
     */
    public comAtlassianJiraRestV2IssueCommentPropertyResourceSetCommentPropertyPut (commentId: string, propertyKey: string, body: any, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/comment/{commentId}/properties/{propertyKey}'
            .replace('{' + 'commentId' + '}', encodeURIComponent(String(commentId)))
            .replace('{' + 'propertyKey' + '}', encodeURIComponent(String(propertyKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'commentId' is not null or undefined
        if (commentId === null || commentId === undefined) {
            throw new Error('Required parameter commentId was null or undefined when calling comAtlassianJiraRestV2IssueCommentPropertyResourceSetCommentPropertyPut.');
        }

        // verify required parameter 'propertyKey' is not null or undefined
        if (propertyKey === null || propertyKey === undefined) {
            throw new Error('Required parameter propertyKey was null or undefined when calling comAtlassianJiraRestV2IssueCommentPropertyResourceSetCommentPropertyPut.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling comAtlassianJiraRestV2IssueCommentPropertyResourceSetCommentPropertyPut.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "any")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Creates a component. Use components to provide containers for issues within a project.  **[Permissions](#permissions) required:** Any of the following:  *   _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg). *   _Administer projects_ [project permission](https://confluence.atlassian.com/x/yodKLg).
     * @summary Create component
     * @param component
     */
    public comAtlassianJiraRestV2IssueComponentResourceCreateComponentPost (component: Component, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Component;  }> {
        const localVarPath = this.basePath + '/api/3/component';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'component' is not null or undefined
        if (component === null || component === undefined) {
            throw new Error('Required parameter component was null or undefined when calling comAtlassianJiraRestV2IssueComponentResourceCreateComponentPost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(component, "Component")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Component;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Component");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Deletes a component.  **[Permissions](#permissions) required:** Any of the following:  *   _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg). *   _Administer projects_ [project permission](https://confluence.atlassian.com/x/yodKLg).
     * @summary Delete component
     * @param id The ID of the component.
     * @param moveIssuesTo The ID of the component to replace the deleted component. If this value is null no replacement is made.
     */
    public comAtlassianJiraRestV2IssueComponentResourceDeleteComponentDelete (id: string, moveIssuesTo?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/component/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2IssueComponentResourceDeleteComponentDelete.');
        }

        if (moveIssuesTo !== undefined) {
            localVarQueryParameters['moveIssuesTo'] = ObjectSerializer.serialize(moveIssuesTo, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns a component.  **[Permissions](#permissions) required:** _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg).
     * @summary Get component
     * @param id The ID of the component.
     */
    public comAtlassianJiraRestV2IssueComponentResourceGetComponentGet (id: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Component;  }> {
        const localVarPath = this.basePath + '/api/3/component/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2IssueComponentResourceGetComponentGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Component;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Component");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the counts of issues assigned to the component.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Get component issues count
     * @param id The ID of the component.
     */
    public comAtlassianJiraRestV2IssueComponentResourceGetComponentRelatedIssuesGet (id: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: ComponentIssuesCount;  }> {
        const localVarPath = this.basePath + '/api/3/component/{id}/relatedIssueCounts'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2IssueComponentResourceGetComponentRelatedIssuesGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ComponentIssuesCount;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ComponentIssuesCount");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Updates a component. Any fields included in the request are overwritten. If `leadUserName` is an empty string (\"\") the component lead is removed.  **[Permissions](#permissions) required:** Any of the following:  *   _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg). *   _Administer projects_ [project permission](https://confluence.atlassian.com/x/yodKLg).
     * @summary Update component
     * @param id The ID of the component.
     * @param component
     */
    public comAtlassianJiraRestV2IssueComponentResourceUpdateComponentPut (id: string, component: Component, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Component;  }> {
        const localVarPath = this.basePath + '/api/3/component/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2IssueComponentResourceUpdateComponentPut.');
        }

        // verify required parameter 'component' is not null or undefined
        if (component === null || component === undefined) {
            throw new Error('Required parameter component was null or undefined when calling comAtlassianJiraRestV2IssueComponentResourceUpdateComponentPut.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(component, "Component")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Component;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Component");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns details for the authenticated user.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Get current user
     * @param expand Use [expand](#expansion) to include additional information about user in the response. This parameter accepts multiple values separated by a comma:  *   &#x60;groups&#x60; Returns all groups, including nested groups, the user belongs to. *   &#x60;applicationRoles&#x60; Returns the application roles the user is assigned to.
     */
    public comAtlassianJiraRestV2IssueCurrentUserResourceGetCurrentUserGet (expand?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: User;  }> {
        const localVarPath = this.basePath + '/api/3/myself';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (expand !== undefined) {
            localVarQueryParameters['expand'] = ObjectSerializer.serialize(expand, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: User;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "User");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns a custom field option. For example, an option in a cascading select list.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Get custom field option
     * @param id The ID of the custom field option. To find this ID, [configure the custom field](https://confluence.atlassian.com/x/B4hKLg) and edit its options in Jira. Click the option and its ID will show in the URL as the &#x60;selectedParentOptionId&#x60; parameter.
     */
    public comAtlassianJiraRestV2IssueCustomfieldCustomFieldOptionResourceGetCustomFieldOptionGet (id: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: CustomFieldOption;  }> {
        const localVarPath = this.basePath + '/api/3/customFieldOption/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2IssueCustomfieldCustomFieldOptionResourceGetCustomFieldOptionGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: CustomFieldOption;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "CustomFieldOption");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Creates an option for a select list issue field.  Note that this operation **cannot be used with the built-in custom fields**. It only works with issue fields added by Connect apps, as described above.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     * @summary Create issue field option
     * @param fieldKey The field key is specified in the following format: **$(app-key)__$(field-key)**. For example, _example-add-on__example-issue-field_.
     * @param issueFieldOptionCreateBean
     */
    public comAtlassianJiraRestV2IssueFieldIssueFieldOptionResourceCreateIssueFieldOptionPost (fieldKey: string, issueFieldOptionCreateBean: IssueFieldOptionCreateBean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: IssueFieldOption;  }> {
        const localVarPath = this.basePath + '/api/3/field/{fieldKey}/option'
            .replace('{' + 'fieldKey' + '}', encodeURIComponent(String(fieldKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'fieldKey' is not null or undefined
        if (fieldKey === null || fieldKey === undefined) {
            throw new Error('Required parameter fieldKey was null or undefined when calling comAtlassianJiraRestV2IssueFieldIssueFieldOptionResourceCreateIssueFieldOptionPost.');
        }

        // verify required parameter 'issueFieldOptionCreateBean' is not null or undefined
        if (issueFieldOptionCreateBean === null || issueFieldOptionCreateBean === undefined) {
            throw new Error('Required parameter issueFieldOptionCreateBean was null or undefined when calling comAtlassianJiraRestV2IssueFieldIssueFieldOptionResourceCreateIssueFieldOptionPost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(issueFieldOptionCreateBean, "IssueFieldOptionCreateBean")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: IssueFieldOption;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "IssueFieldOption");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Deletes an option from a select list issue field.  Note that this operation **cannot be used with the built-in custom fields**. It only works with issue fields added by Connect apps, as described above.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     * @summary Delete issue field option
     * @param fieldKey The field key is specified in the following format: **$(app-key)__$(field-key)**. For example, _example-add-on__example-issue-field_.
     * @param optionId The ID of the option to be deleted.
     */
    public comAtlassianJiraRestV2IssueFieldIssueFieldOptionResourceDeleteIssueFieldOptionDelete (fieldKey: string, optionId: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/field/{fieldKey}/option/{optionId}'
            .replace('{' + 'fieldKey' + '}', encodeURIComponent(String(fieldKey)))
            .replace('{' + 'optionId' + '}', encodeURIComponent(String(optionId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'fieldKey' is not null or undefined
        if (fieldKey === null || fieldKey === undefined) {
            throw new Error('Required parameter fieldKey was null or undefined when calling comAtlassianJiraRestV2IssueFieldIssueFieldOptionResourceDeleteIssueFieldOptionDelete.');
        }

        // verify required parameter 'optionId' is not null or undefined
        if (optionId === null || optionId === undefined) {
            throw new Error('Required parameter optionId was null or undefined when calling comAtlassianJiraRestV2IssueFieldIssueFieldOptionResourceDeleteIssueFieldOptionDelete.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns all options defined for a select list issue field. A select list issue field is a type of [issue field](https://developer.atlassian.com/cloud/jira/platform/modules/issue-field/) that allows a user to select n value from a list of options.  Note that this operation **cannot be used with the built-in custom fields**. It only works with issue fields added by Connect apps, as described above.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     * @summary Get all issue field options
     * @param fieldKey The field key is specified in the following format: **$(app-key)__$(field-key)**. For example, _example-add-on__example-issue-field_.
     * @param startAt The starting index of the returned objects.
     * @param maxResults The maximum number of items to return per page.
     */
    public comAtlassianJiraRestV2IssueFieldIssueFieldOptionResourceGetAllIssueFieldOptionsGet (fieldKey: string, startAt?: number, maxResults?: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PageOfIssueFieldOption;  }> {
        const localVarPath = this.basePath + '/api/3/field/{fieldKey}/option'
            .replace('{' + 'fieldKey' + '}', encodeURIComponent(String(fieldKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'fieldKey' is not null or undefined
        if (fieldKey === null || fieldKey === undefined) {
            throw new Error('Required parameter fieldKey was null or undefined when calling comAtlassianJiraRestV2IssueFieldIssueFieldOptionResourceGetAllIssueFieldOptionsGet.');
        }

        if (startAt !== undefined) {
            localVarQueryParameters['startAt'] = ObjectSerializer.serialize(startAt, "number");
        }

        if (maxResults !== undefined) {
            localVarQueryParameters['maxResults'] = ObjectSerializer.serialize(maxResults, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: PageOfIssueFieldOption;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "PageOfIssueFieldOption");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns an option from a select list issue field.  Note that this operation **cannot be used with the built-in custom fields**. It only works with issue fields added by Connect apps, as described above.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     * @summary Get issue field option
     * @param fieldKey The field key is specified in the following format: **$(app-key)__$(field-key)**. For example, _example-add-on__example-issue-field_.
     * @param optionId The ID of the option to be returned.
     */
    public comAtlassianJiraRestV2IssueFieldIssueFieldOptionResourceGetIssueFieldOptionGet (fieldKey: string, optionId: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: IssueFieldOption;  }> {
        const localVarPath = this.basePath + '/api/3/field/{fieldKey}/option/{optionId}'
            .replace('{' + 'fieldKey' + '}', encodeURIComponent(String(fieldKey)))
            .replace('{' + 'optionId' + '}', encodeURIComponent(String(optionId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'fieldKey' is not null or undefined
        if (fieldKey === null || fieldKey === undefined) {
            throw new Error('Required parameter fieldKey was null or undefined when calling comAtlassianJiraRestV2IssueFieldIssueFieldOptionResourceGetIssueFieldOptionGet.');
        }

        // verify required parameter 'optionId' is not null or undefined
        if (optionId === null || optionId === undefined) {
            throw new Error('Required parameter optionId was null or undefined when calling comAtlassianJiraRestV2IssueFieldIssueFieldOptionResourceGetIssueFieldOptionGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: IssueFieldOption;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "IssueFieldOption");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns options defined for a select list issue field that can be viewed and selected by the currently logged in user.  Note that this operation **cannot be used with the built-in custom fields**. It only works with issue fields added by Connect apps, as described above.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Get selectable issue field options
     * @param fieldKey The field key is specified in the following format: **$(app-key)__$(field-key)**. For example, _example-add-on__example-issue-field_.
     * @param startAt The starting index of the returned objects.
     * @param maxResults The maximum number of items to return per page.
     * @param projectId Filters the results to options that are only available in the specified project.
     */
    public comAtlassianJiraRestV2IssueFieldIssueFieldOptionResourceGetSelectableIssueFieldOptionsGet (fieldKey: string, startAt?: number, maxResults?: number, projectId?: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PageOfIssueFieldOption;  }> {
        const localVarPath = this.basePath + '/api/3/field/{fieldKey}/option/suggestions/edit'
            .replace('{' + 'fieldKey' + '}', encodeURIComponent(String(fieldKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'fieldKey' is not null or undefined
        if (fieldKey === null || fieldKey === undefined) {
            throw new Error('Required parameter fieldKey was null or undefined when calling comAtlassianJiraRestV2IssueFieldIssueFieldOptionResourceGetSelectableIssueFieldOptionsGet.');
        }

        if (startAt !== undefined) {
            localVarQueryParameters['startAt'] = ObjectSerializer.serialize(startAt, "number");
        }

        if (maxResults !== undefined) {
            localVarQueryParameters['maxResults'] = ObjectSerializer.serialize(maxResults, "number");
        }

        if (projectId !== undefined) {
            localVarQueryParameters['projectId'] = ObjectSerializer.serialize(projectId, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: PageOfIssueFieldOption;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "PageOfIssueFieldOption");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns options defined for a select list issue field that can be viewed by the currently logged in user.  Note that this operation **cannot be used with the built-in custom fields**. It only works with issue fields added by Connect apps, as described above.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Get visible issue field options
     * @param fieldKey The field key is specified in the following format: **$(app-key)__$(field-key)**. For example, _example-add-on__example-issue-field_.
     * @param startAt The starting index of the returned objects.
     * @param maxResults The maximum number of items to return per page.
     * @param projectId Filters the results to options that are only available in the specified project.
     */
    public comAtlassianJiraRestV2IssueFieldIssueFieldOptionResourceGetVisibleIssueFieldOptionsGet (fieldKey: string, startAt?: number, maxResults?: number, projectId?: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PageOfIssueFieldOption;  }> {
        const localVarPath = this.basePath + '/api/3/field/{fieldKey}/option/suggestions/search'
            .replace('{' + 'fieldKey' + '}', encodeURIComponent(String(fieldKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'fieldKey' is not null or undefined
        if (fieldKey === null || fieldKey === undefined) {
            throw new Error('Required parameter fieldKey was null or undefined when calling comAtlassianJiraRestV2IssueFieldIssueFieldOptionResourceGetVisibleIssueFieldOptionsGet.');
        }

        if (startAt !== undefined) {
            localVarQueryParameters['startAt'] = ObjectSerializer.serialize(startAt, "number");
        }

        if (maxResults !== undefined) {
            localVarQueryParameters['maxResults'] = ObjectSerializer.serialize(maxResults, "number");
        }

        if (projectId !== undefined) {
            localVarQueryParameters['projectId'] = ObjectSerializer.serialize(projectId, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: PageOfIssueFieldOption;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "PageOfIssueFieldOption");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Deselects a select list issue field option in all issues that it has been selected in. A different option can be selected to replace the deselected option. The update can also be limited to a smaller set of issues by using a JQL query.  This is an [asynchronous method](#async). The response object contains a link to the long-running task.  Note that this operation **cannot be used with the built-in custom fields**. It only works with issue fields added by Connect apps, as described above.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     * @summary Replace issue field option
     * @param fieldKey The field key is specified in the following format: **$(app-key)__$(field-key)**. For example, _example-add-on__example-issue-field_.
     * @param optionId The ID of the option to be deselected.
     * @param replaceWith The ID of the option that will replace the currently selected option.
     * @param jql A JQL query that specifies the issues to be updated. For example, _project&#x3D;10000_.
     */
    public comAtlassianJiraRestV2IssueFieldIssueFieldOptionResourceReplaceIssueFieldOptionDelete (fieldKey: string, optionId: number, replaceWith?: number, jql?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/field/{fieldKey}/option/{optionId}/issue'
            .replace('{' + 'fieldKey' + '}', encodeURIComponent(String(fieldKey)))
            .replace('{' + 'optionId' + '}', encodeURIComponent(String(optionId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'fieldKey' is not null or undefined
        if (fieldKey === null || fieldKey === undefined) {
            throw new Error('Required parameter fieldKey was null or undefined when calling comAtlassianJiraRestV2IssueFieldIssueFieldOptionResourceReplaceIssueFieldOptionDelete.');
        }

        // verify required parameter 'optionId' is not null or undefined
        if (optionId === null || optionId === undefined) {
            throw new Error('Required parameter optionId was null or undefined when calling comAtlassianJiraRestV2IssueFieldIssueFieldOptionResourceReplaceIssueFieldOptionDelete.');
        }

        if (replaceWith !== undefined) {
            localVarQueryParameters['replaceWith'] = ObjectSerializer.serialize(replaceWith, "number");
        }

        if (jql !== undefined) {
            localVarQueryParameters['jql'] = ObjectSerializer.serialize(jql, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Updates or creates an option for a select list issue field. This operation requires that the option ID is provided when creating an option, therefore, the option ID needs to be specified as a path and body parameter. The option ID provided in the path and body must be identical.  Note that this operation **cannot be used with the built-in custom fields**. It only works with issue fields added by Connect apps, as described above.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
     * @summary Update issue field option
     * @param fieldKey The field key is specified in the following format: **$(app-key)__$(field-key)**. For example, _example-add-on__example-issue-field_.
     * @param optionId The ID of the option to be updated.
     * @param issueFieldOption
     */
    public comAtlassianJiraRestV2IssueFieldIssueFieldOptionResourceUpdateIssueFieldOptionPut (fieldKey: string, optionId: number, issueFieldOption: IssueFieldOption, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: IssueFieldOption;  }> {
        const localVarPath = this.basePath + '/api/3/field/{fieldKey}/option/{optionId}'
            .replace('{' + 'fieldKey' + '}', encodeURIComponent(String(fieldKey)))
            .replace('{' + 'optionId' + '}', encodeURIComponent(String(optionId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'fieldKey' is not null or undefined
        if (fieldKey === null || fieldKey === undefined) {
            throw new Error('Required parameter fieldKey was null or undefined when calling comAtlassianJiraRestV2IssueFieldIssueFieldOptionResourceUpdateIssueFieldOptionPut.');
        }

        // verify required parameter 'optionId' is not null or undefined
        if (optionId === null || optionId === undefined) {
            throw new Error('Required parameter optionId was null or undefined when calling comAtlassianJiraRestV2IssueFieldIssueFieldOptionResourceUpdateIssueFieldOptionPut.');
        }

        // verify required parameter 'issueFieldOption' is not null or undefined
        if (issueFieldOption === null || issueFieldOption === undefined) {
            throw new Error('Required parameter issueFieldOption was null or undefined when calling comAtlassianJiraRestV2IssueFieldIssueFieldOptionResourceUpdateIssueFieldOptionPut.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(issueFieldOption, "IssueFieldOption")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: IssueFieldOption;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "IssueFieldOption");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Creates a custom field.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Create custom field
     * @param customFieldDefinitionJsonBean Definition of the custom field to be created
     */
    public comAtlassianJiraRestV2IssueFieldResourceCreateCustomFieldPost (customFieldDefinitionJsonBean: CustomFieldDefinitionJsonBean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Field;  }> {
        const localVarPath = this.basePath + '/api/3/field';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'customFieldDefinitionJsonBean' is not null or undefined
        if (customFieldDefinitionJsonBean === null || customFieldDefinitionJsonBean === undefined) {
            throw new Error('Required parameter customFieldDefinitionJsonBean was null or undefined when calling comAtlassianJiraRestV2IssueFieldResourceCreateCustomFieldPost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(customFieldDefinitionJsonBean, "CustomFieldDefinitionJsonBean")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Field;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Field");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns all issue fields in Jira, both system and custom fields.  **[Permissions](#permissions) required:** Permission to access Jira, however the following rules apply:  *   Fields that cannot be added to the issue navigator are always returned. *   Fields that cannot be placed on an issue screen are always returned. *   Fields that depend on global Jira settings are only returned if the setting is enabled. That is, timetracking fields, subtasks, votes, and watches. *   For all other fields, this method only returns the fields that the current user has permission to see (that is, the field can be used in at least one project that the user can see).
     * @summary Get fields
     */
    public comAtlassianJiraRestV2IssueFieldResourceGetFieldsGet (options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Array<Field>;  }> {
        const localVarPath = this.basePath + '/api/3/field';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<Field>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Field>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns a list of users and groups matching a string. The string is used:  *   for users, to find a case insensitive match with username, name, and e-mail address. *   for groups, to find a case-sensitive match with group name.  For example, if the string _tin_ is used, records with the username ptindall, name Tina, email address sarah@tinplatetraining.com, and the group accounting would be returned.  Optionally, the search can be refined to:  *   the projects and issue types associated with a custom field, such as a user picker. The search can then be further refined to return only users and groups that have permission to view specific:          *   projects.     *   issue types.          If multiple projects or issue types are specified. they must be a subset of those enabled for the custom field or no results will be returned. For example, if a field is enabled for projects A, B, and C then the search could be limited to projects B and C. However, if an attempt was made to limit the search to projects B and D, nothing would be returned.      *   not return Connect app users and groups. *   return groups that have a case insensitive match with the query.  The primary use case for this resource is to populate a picker field suggestion list with users or groups. To this end, the returned object includes an `html` field for each list. This field highlights the matched query term in the item name with the HTML strong tag. Also, each list is wrapped in a response object that contains a header for use in a picker, specifically _Showing X of Y matching groups_.  **[Permissions](#permissions) required:** _Browse users and groups_ [global permission](https://confluence.atlassian.com/x/yodKLg). Users with permission to access Jira can call this operation, but empty lists are returned.
     * @summary Find users and groups
     * @param query The search string.
     * @param maxResults The maximum number of items to return in each list. The maximum is &#x60;1000&#x60;.
     * @param showAvatar Indicates whether the user avatar should be returned. If an invalid value is provided, the default value is used.
     * @param fieldId The custom field ID of the field this request is for.
     * @param projectId The ID of a project that returned users and groups must have permission to view. To include multiple projects, provide multiple copies of this parameter. For example, &#x60;projectId&#x3D;10000&amp;projectId&#x3D;10001&#x60;. This parameter is only used when &#x60;fieldId&#x60; is present.
     * @param issueTypeId The ID of an issue type that returned users and groups must have permission to view. To include multiple issue types, provide multiple copies of this parameter. For example, &#x60;issueTypeId&#x3D;10000&amp;issueTypeId&#x3D;10001&#x60;. Special values, such as &#x60;-1&#x60; (all standard issue types) and &#x60;-2&#x60; (all subtask issue types), are supported. This parameter is only used when &#x60;fieldId&#x60; is present.
     * @param avatarSize The size of the avatar to return. If an invalid value is provided, the default value is used.
     * @param caseInsensitive Indicates whether the search for groups should be case insensitive.
     * @param excludeConnectAddons Indicates whether Connect app users and groups should be excluded from the search results. If an invalid value is provided, the default value is used.
     */
    public comAtlassianJiraRestV2IssueGroupAndUserPickerResourceFindUsersAndGroupsGet (query: string, maxResults?: number, showAvatar?: boolean, fieldId?: string, projectId?: Array<string>, issueTypeId?: Array<string>, avatarSize?: 'xsmall' | 'xsmall@2x' | 'xsmall@3x' | 'small' | 'small@2x' | 'small@3x' | 'medium' | 'medium@2x' | 'medium@3x' | 'large' | 'large@2x' | 'large@3x' | 'xlarge' | 'xlarge@2x' | 'xlarge@3x' | 'xxlarge' | 'xxlarge@2x' | 'xxlarge@3x' | 'xxxlarge' | 'xxxlarge@2x' | 'xxxlarge@3x', caseInsensitive?: boolean, excludeConnectAddons?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: FoundUsersAndGroups;  }> {
        const localVarPath = this.basePath + '/api/3/groupuserpicker';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'query' is not null or undefined
        if (query === null || query === undefined) {
            throw new Error('Required parameter query was null or undefined when calling comAtlassianJiraRestV2IssueGroupAndUserPickerResourceFindUsersAndGroupsGet.');
        }

        if (query !== undefined) {
            localVarQueryParameters['query'] = ObjectSerializer.serialize(query, "string");
        }

        if (maxResults !== undefined) {
            localVarQueryParameters['maxResults'] = ObjectSerializer.serialize(maxResults, "number");
        }

        if (showAvatar !== undefined) {
            localVarQueryParameters['showAvatar'] = ObjectSerializer.serialize(showAvatar, "boolean");
        }

        if (fieldId !== undefined) {
            localVarQueryParameters['fieldId'] = ObjectSerializer.serialize(fieldId, "string");
        }

        if (projectId !== undefined) {
            localVarQueryParameters['projectId'] = ObjectSerializer.serialize(projectId, "Array<string>");
        }

        if (issueTypeId !== undefined) {
            localVarQueryParameters['issueTypeId'] = ObjectSerializer.serialize(issueTypeId, "Array<string>");
        }

        if (avatarSize !== undefined) {
            localVarQueryParameters['avatarSize'] = ObjectSerializer.serialize(avatarSize, "'xsmall' | 'xsmall@2x' | 'xsmall@3x' | 'small' | 'small@2x' | 'small@3x' | 'medium' | 'medium@2x' | 'medium@3x' | 'large' | 'large@2x' | 'large@3x' | 'xlarge' | 'xlarge@2x' | 'xlarge@3x' | 'xxlarge' | 'xxlarge@2x' | 'xxlarge@3x' | 'xxxlarge' | 'xxxlarge@2x' | 'xxxlarge@3x'");
        }

        if (caseInsensitive !== undefined) {
            localVarQueryParameters['caseInsensitive'] = ObjectSerializer.serialize(caseInsensitive, "boolean");
        }

        if (excludeConnectAddons !== undefined) {
            localVarQueryParameters['excludeConnectAddons'] = ObjectSerializer.serialize(excludeConnectAddons, "boolean");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: FoundUsersAndGroups;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "FoundUsersAndGroups");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns a list of groups whose names contain a query string. A list of group names can be provided to exclude groups from the results.  The primary use case for this resource is to populate a group picker suggestions list. To this end, the returned object includes the `html` field where the matched query term is highlighted in the group name with the HTML strong tag. Also, the groups list is wrapped in a response object that contains a header for use in the picker, specifically _Showing X of Y matching groups_.  The list returns with the groups sorted. If no groups match the list criteria, an empty list is returned.  **[Permissions](#permissions) required:** _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg). Users with permission to access Jira can call this operation, but an empty list is returned.
     * @summary Find groups
     * @param query The string to find in group names.
     * @param exclude A group to exclude from the result. To exclude multiple groups, provide multiple copies of this parameter. For example, &#x60;exclude&#x3D;group1&amp;exclude&#x3D;group2&#x60;.
     * @param maxResults The maximum number of groups to return. The maximum number of groups that can be returned is limited by the system property &#x60;jira.ajax.autocomplete.limit&#x60;.
     */
    public comAtlassianJiraRestV2IssueGroupPickerResourceFindGroupsGet (query?: string, exclude?: Array<string>, maxResults?: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: FoundGroups;  }> {
        const localVarPath = this.basePath + '/api/3/groups/picker';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (query !== undefined) {
            localVarQueryParameters['query'] = ObjectSerializer.serialize(query, "string");
        }

        if (exclude !== undefined) {
            localVarQueryParameters['exclude'] = ObjectSerializer.serialize(exclude, "Array<string>");
        }

        if (maxResults !== undefined) {
            localVarQueryParameters['maxResults'] = ObjectSerializer.serialize(maxResults, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: FoundGroups;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "FoundGroups");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Adds a user to a group.  **[Permissions](#permissions) required:** Site administration (that is, member of the _site-admin_ [group](https://confluence.atlassian.com/x/24xjL)).
     * @summary Add user to group
     * @param groupname The name of the group (case sensitive).
     * @param updateUserToGroupBean The user to add to the group.
     */
    public comAtlassianJiraRestV2IssueGroupResourceAddUserToGroupPost (groupname: string, updateUserToGroupBean: UpdateUserToGroupBean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Group;  }> {
        const localVarPath = this.basePath + '/api/3/group/user';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'groupname' is not null or undefined
        if (groupname === null || groupname === undefined) {
            throw new Error('Required parameter groupname was null or undefined when calling comAtlassianJiraRestV2IssueGroupResourceAddUserToGroupPost.');
        }

        // verify required parameter 'updateUserToGroupBean' is not null or undefined
        if (updateUserToGroupBean === null || updateUserToGroupBean === undefined) {
            throw new Error('Required parameter updateUserToGroupBean was null or undefined when calling comAtlassianJiraRestV2IssueGroupResourceAddUserToGroupPost.');
        }

        if (groupname !== undefined) {
            localVarQueryParameters['groupname'] = ObjectSerializer.serialize(groupname, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(updateUserToGroupBean, "UpdateUserToGroupBean")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Group;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Group");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Creates a group.  **[Permissions](#permissions) required:** Site administration (that is, member of the _site-admin_ [group](https://confluence.atlassian.com/x/24xjL)).
     * @summary Create group
     * @param addGroupBean The name of the group.
     */
    public comAtlassianJiraRestV2IssueGroupResourceCreateGroupPost (addGroupBean: AddGroupBean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Group;  }> {
        const localVarPath = this.basePath + '/api/3/group';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'addGroupBean' is not null or undefined
        if (addGroupBean === null || addGroupBean === undefined) {
            throw new Error('Required parameter addGroupBean was null or undefined when calling comAtlassianJiraRestV2IssueGroupResourceCreateGroupPost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(addGroupBean, "AddGroupBean")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Group;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Group");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * This resource is deprecated, use [`group/member`](#api-api-3-group-member-get).  Returns all users in a group.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Get group
     * @param groupname The name of the group.
     * @param expand List of fields to expand.
     */
    public comAtlassianJiraRestV2IssueGroupResourceGetGroupGet (groupname: string, expand?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Group;  }> {
        const localVarPath = this.basePath + '/api/3/group';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'groupname' is not null or undefined
        if (groupname === null || groupname === undefined) {
            throw new Error('Required parameter groupname was null or undefined when calling comAtlassianJiraRestV2IssueGroupResourceGetGroupGet.');
        }

        if (groupname !== undefined) {
            localVarQueryParameters['groupname'] = ObjectSerializer.serialize(groupname, "string");
        }

        if (expand !== undefined) {
            localVarQueryParameters['expand'] = ObjectSerializer.serialize(expand, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Group;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Group");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns all users in a group. Users are ordered by username.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Get users from group
     * @param groupname The name of the group.
     * @param includeInactiveUsers Include inactive users.
     * @param startAt The index of the first item to return in a page of results (page offset).
     * @param maxResults The maximum number of items to return per page. The maximum is &#x60;50&#x60;.
     */
    public comAtlassianJiraRestV2IssueGroupResourceGetUsersFromGroupGet (groupname: string, includeInactiveUsers?: boolean, startAt?: number, maxResults?: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PageOfUserDetails;  }> {
        const localVarPath = this.basePath + '/api/3/group/member';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'groupname' is not null or undefined
        if (groupname === null || groupname === undefined) {
            throw new Error('Required parameter groupname was null or undefined when calling comAtlassianJiraRestV2IssueGroupResourceGetUsersFromGroupGet.');
        }

        if (groupname !== undefined) {
            localVarQueryParameters['groupname'] = ObjectSerializer.serialize(groupname, "string");
        }

        if (includeInactiveUsers !== undefined) {
            localVarQueryParameters['includeInactiveUsers'] = ObjectSerializer.serialize(includeInactiveUsers, "boolean");
        }

        if (startAt !== undefined) {
            localVarQueryParameters['startAt'] = ObjectSerializer.serialize(startAt, "number");
        }

        if (maxResults !== undefined) {
            localVarQueryParameters['maxResults'] = ObjectSerializer.serialize(maxResults, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: PageOfUserDetails;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "PageOfUserDetails");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Deletes a group.  **[Permissions](#permissions) required:** Site administration (that is, member of the _site-admin_ strategic [group](https://confluence.atlassian.com/x/24xjL)).
     * @summary Remove group
     * @param groupname The name of the group.
     * @param swapGroup The group to transfer restrictions to. Only comments and worklogs are transferred. If restrictions are not transferred, comments and worklogs will be inaccessible after the deletion.
     */
    public comAtlassianJiraRestV2IssueGroupResourceRemoveGroupDelete (groupname: string, swapGroup?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/group';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'groupname' is not null or undefined
        if (groupname === null || groupname === undefined) {
            throw new Error('Required parameter groupname was null or undefined when calling comAtlassianJiraRestV2IssueGroupResourceRemoveGroupDelete.');
        }

        if (groupname !== undefined) {
            localVarQueryParameters['groupname'] = ObjectSerializer.serialize(groupname, "string");
        }

        if (swapGroup !== undefined) {
            localVarQueryParameters['swapGroup'] = ObjectSerializer.serialize(swapGroup, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Removes a user from a group.  **[Permissions](#permissions) required:** Site administration (that is, member of the _site-admin_ [group](https://confluence.atlassian.com/x/24xjL)).
     * @summary Remove user from group
     * @param groupname The name of the group.
     * @param username This parameter has been deprecated due to privacy changes. Use &#x60;accountId&#x60; instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.  The username of the user. Required, unless &#x60;accountId&#x60; is specified.
     * @param accountId The accountId of the user, which uniquely identifies the user across all Atlassian products. For example, _384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192_. Required, unless &#x60;username&#x60; is specified.
     */
    public comAtlassianJiraRestV2IssueGroupResourceRemoveUserFromGroupDelete (groupname: string, username?: string, accountId?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/group/user';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'groupname' is not null or undefined
        if (groupname === null || groupname === undefined) {
            throw new Error('Required parameter groupname was null or undefined when calling comAtlassianJiraRestV2IssueGroupResourceRemoveUserFromGroupDelete.');
        }

        if (groupname !== undefined) {
            localVarQueryParameters['groupname'] = ObjectSerializer.serialize(groupname, "string");
        }

        if (username !== undefined) {
            localVarQueryParameters['username'] = ObjectSerializer.serialize(username, "string");
        }

        if (accountId !== undefined) {
            localVarQueryParameters['accountId'] = ObjectSerializer.serialize(accountId, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Adds one or more attachments to an issue. Attachments are posted as multipart/form-data ([RFC 1867](https://www.ietf.org/rfc/rfc1867.txt)).  Note that:  *   The request must have a `X-Atlassian-Token: no-check` header, otherwise it will be blocked. See [Special headers](#special-request-headers) for more information. *   The name of the multipart/form-data parameter that contains the attachments must be `file`.  The following example uploads a file called _myfile.txt_ to the issue _TEST-123_:  `curl -D- -u admin:admin -X POST -H \"X-Atlassian-Token: no-check\" -F \"file=@myfile.txt\" https://your-domain.atlassian.net/rest/api/3/issue/TEST-123/attachments`  Tip: Use a client library. Many client libraries have classes for handling multipart POST operations. For example, in Java, the Apache HTTP Components library provides a [MultiPartEntity](http://hc.apache.org/httpcomponents-client-ga/httpmime/apidocs/org/apache/http/entity/mime/MultipartEntity.html) class for multipart POST operations.  **[Permissions](#permissions) required:**  *   _Browse Projects_ and _Create attachments_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in. *   If configured, permission to view the issue granted by [issue-level security](https://confluence.atlassian.com/x/J4lKLg).
     * @summary Add attachment
     * @param issueIdOrKey The ID or key of the issue that attachments are added to.
     * @param file
     */
    public comAtlassianJiraRestV2IssueIssueAttachmentsResourceAddAttachmentPost (issueIdOrKey: string, file: Buffer, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Array<Attachment>;  }> {
        const localVarPath = this.basePath + '/api/3/issue/{issueIdOrKey}/attachments'
            .replace('{' + 'issueIdOrKey' + '}', encodeURIComponent(String(issueIdOrKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issueIdOrKey' is not null or undefined
        if (issueIdOrKey === null || issueIdOrKey === undefined) {
            throw new Error('Required parameter issueIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueIssueAttachmentsResourceAddAttachmentPost.');
        }

        // verify required parameter 'file' is not null or undefined
        if (file === null || file === undefined) {
            throw new Error('Required parameter file was null or undefined when calling comAtlassianJiraRestV2IssueIssueAttachmentsResourceAddAttachmentPost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (file !== undefined) {
            localVarFormParams['file'] = file;
        }
        localVarUseFormData = true;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<Attachment>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Attachment>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns all changelogs for an issue sorted by date, starting from the oldest.  **[Permissions](#permissions) required:**  *   _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in. *   If configured, permission to see the issue granted by [issue-level security](https://confluence.atlassian.com/x/J4lKLg).
     * @summary Get change logs
     * @param issueIdOrKey The ID or key of the issue.
     * @param startAt The index of the first item to return in a page of results (page offset).
     * @param maxResults The maximum number of items to return per page. The maximum is &#x60;100&#x60;.
     */
    public comAtlassianJiraRestV2IssueIssueChangelogResourceGetChangeLogsGet (issueIdOrKey: string, startAt?: number, maxResults?: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PageOfChangelog;  }> {
        const localVarPath = this.basePath + '/api/3/issue/{issueIdOrKey}/changelog'
            .replace('{' + 'issueIdOrKey' + '}', encodeURIComponent(String(issueIdOrKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issueIdOrKey' is not null or undefined
        if (issueIdOrKey === null || issueIdOrKey === undefined) {
            throw new Error('Required parameter issueIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueIssueChangelogResourceGetChangeLogsGet.');
        }

        if (startAt !== undefined) {
            localVarQueryParameters['startAt'] = ObjectSerializer.serialize(startAt, "number");
        }

        if (maxResults !== undefined) {
            localVarQueryParameters['maxResults'] = ObjectSerializer.serialize(maxResults, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: PageOfChangelog;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "PageOfChangelog");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the comments for a list of comment IDs.  **[Permissions](#permissions) required:** _Browse project_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing a requested issue. Issues in projects where the user doesn't have _browser project_ permission are excluded from the returned list. Also, when the visibility of a comment is restricted to a role or group the user must be a member of that role or group for the comment to be included in the returned list.
     * @summary Get comments by IDs
     * @param issueCommentListRequestBean The list of comment IDs.
     * @param expand Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts multiple values separated by a comma:  *   &#x60;renderedBody&#x60; Returns the comment body rendered in HTML. *   &#x60;properties&#x60; Returns the comment&#39;s properties.
     */
    public comAtlassianJiraRestV2IssueIssueCommentListResourceGetCommentsByIdsPost (issueCommentListRequestBean: IssueCommentListRequestBean, expand?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PageOfComment;  }> {
        const localVarPath = this.basePath + '/api/3/comment/list';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issueCommentListRequestBean' is not null or undefined
        if (issueCommentListRequestBean === null || issueCommentListRequestBean === undefined) {
            throw new Error('Required parameter issueCommentListRequestBean was null or undefined when calling comAtlassianJiraRestV2IssueIssueCommentListResourceGetCommentsByIdsPost.');
        }

        if (expand !== undefined) {
            localVarQueryParameters['expand'] = ObjectSerializer.serialize(expand, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(issueCommentListRequestBean, "IssueCommentListRequestBean")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: PageOfComment;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "PageOfComment");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Adds a comment to an issue.  **[Permissions](#permissions) required:**  *   _Browse projects_ and _Add comments_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in. *   If configured, permission to see the issue granted by [issue-level security](https://confluence.atlassian.com/x/J4lKLg).
     * @summary Add comment
     * @param issueIdOrKey The ID or key of the issue.
     * @param comment
     * @param expand Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts &#x60;renderedBody&#x60;, which returns the comment body rendered in HTML.
     */
    public comAtlassianJiraRestV2IssueIssueCommentResourceAddCommentPost (issueIdOrKey: string, comment: Comment, expand?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Comment;  }> {
        const localVarPath = this.basePath + '/api/3/issue/{issueIdOrKey}/comment'
            .replace('{' + 'issueIdOrKey' + '}', encodeURIComponent(String(issueIdOrKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issueIdOrKey' is not null or undefined
        if (issueIdOrKey === null || issueIdOrKey === undefined) {
            throw new Error('Required parameter issueIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueIssueCommentResourceAddCommentPost.');
        }

        // verify required parameter 'comment' is not null or undefined
        if (comment === null || comment === undefined) {
            throw new Error('Required parameter comment was null or undefined when calling comAtlassianJiraRestV2IssueIssueCommentResourceAddCommentPost.');
        }

        if (expand !== undefined) {
            localVarQueryParameters['expand'] = ObjectSerializer.serialize(expand, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(comment, "Comment")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Comment;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Comment");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Deletes a comment.  **[Permissions](#permissions) required:**  *   _Browse projects_ and _Delete all comments_ or _Delete own comments_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in. *   If configured, permission to see the issue granted by [issue-level security](https://confluence.atlassian.com/x/J4lKLg).  *   Where the visibility of the comment is restricted, the user must be a member of the group or role that visibility is restricted to.
     * @summary Delete comment
     * @param issueIdOrKey The ID or key of the issue.
     * @param id The ID of the comment.
     */
    public comAtlassianJiraRestV2IssueIssueCommentResourceDeleteCommentDelete (issueIdOrKey: string, id: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/issue/{issueIdOrKey}/comment/{id}'
            .replace('{' + 'issueIdOrKey' + '}', encodeURIComponent(String(issueIdOrKey)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issueIdOrKey' is not null or undefined
        if (issueIdOrKey === null || issueIdOrKey === undefined) {
            throw new Error('Required parameter issueIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueIssueCommentResourceDeleteCommentDelete.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2IssueIssueCommentResourceDeleteCommentDelete.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns a comment.  **[Permissions](#permissions) required:**  *   _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in. *   If configured, permission to see the issue granted by [issue-level security](https://confluence.atlassian.com/x/J4lKLg).  *   Where the visibility of the comment is restricted, the user must be a member of the group or role that visibility is restricted to.
     * @summary Get comment
     * @param issueIdOrKey The ID or key of the issue.
     * @param id The ID of the comment.
     * @param expand Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts &#x60;renderedBody&#x60;, which returns the comment body rendered in HTML.
     */
    public comAtlassianJiraRestV2IssueIssueCommentResourceGetCommentGet (issueIdOrKey: string, id: string, expand?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Comment;  }> {
        const localVarPath = this.basePath + '/api/3/issue/{issueIdOrKey}/comment/{id}'
            .replace('{' + 'issueIdOrKey' + '}', encodeURIComponent(String(issueIdOrKey)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issueIdOrKey' is not null or undefined
        if (issueIdOrKey === null || issueIdOrKey === undefined) {
            throw new Error('Required parameter issueIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueIssueCommentResourceGetCommentGet.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2IssueIssueCommentResourceGetCommentGet.');
        }

        if (expand !== undefined) {
            localVarQueryParameters['expand'] = ObjectSerializer.serialize(expand, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Comment;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Comment");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns all comments, that are visible to the user, for an issue.  **[Permissions](#permissions) required:**  *   _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in. *   If configured, permission to see the issue granted by [issue-level security](https://confluence.atlassian.com/x/J4lKLg).  Only comments visible to the user are returned. Visible comments are those:  *   that have no visibility restrictions set. *   where the user belongs to the group or role visibility is restricted to.
     * @summary Get comments
     * @param issueIdOrKey The ID or key of the issue.
     * @param startAt The index of the first item to return in a page of results (page offset).
     * @param maxResults The maximum number of items to return per page. The maximum is &#x60;50&#x60;.
     * @param orderBy The field to order returned comments by. Only accepts the value _created_, which orders comments by their created date.
     * @param expand Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts &#x60;renderedBody&#x60;, which returns the comment body rendered in HTML.
     */
    public comAtlassianJiraRestV2IssueIssueCommentResourceGetCommentsGet (issueIdOrKey: string, startAt?: number, maxResults?: number, orderBy?: 'created' | '-created', expand?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PageOfComments;  }> {
        const localVarPath = this.basePath + '/api/3/issue/{issueIdOrKey}/comment'
            .replace('{' + 'issueIdOrKey' + '}', encodeURIComponent(String(issueIdOrKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issueIdOrKey' is not null or undefined
        if (issueIdOrKey === null || issueIdOrKey === undefined) {
            throw new Error('Required parameter issueIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueIssueCommentResourceGetCommentsGet.');
        }

        if (startAt !== undefined) {
            localVarQueryParameters['startAt'] = ObjectSerializer.serialize(startAt, "number");
        }

        if (maxResults !== undefined) {
            localVarQueryParameters['maxResults'] = ObjectSerializer.serialize(maxResults, "number");
        }

        if (orderBy !== undefined) {
            localVarQueryParameters['orderBy'] = ObjectSerializer.serialize(orderBy, "'created' | '-created'");
        }

        if (expand !== undefined) {
            localVarQueryParameters['expand'] = ObjectSerializer.serialize(expand, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: PageOfComments;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "PageOfComments");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Updates a comment.  **[Permissions](#permissions) required:**  *   _Browse projects_ and _Edit all comments_ or _Edit own comments_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in. *   If configured, permission to see the issue granted by [issue-level security](https://confluence.atlassian.com/x/J4lKLg).  *   Where the visibility of the comment is restricted, the user must be a member of the group or role that visibility is restricted to.
     * @summary Update comment
     * @param issueIdOrKey The ID or key of the issue.
     * @param id The ID of the comment.
     * @param comment
     * @param expand Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts &#x60;renderedBody&#x60;, which returns the comment body rendered in HTML.
     */
    public comAtlassianJiraRestV2IssueIssueCommentResourceUpdateCommentPut (issueIdOrKey: string, id: string, comment: Comment, expand?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Comment;  }> {
        const localVarPath = this.basePath + '/api/3/issue/{issueIdOrKey}/comment/{id}'
            .replace('{' + 'issueIdOrKey' + '}', encodeURIComponent(String(issueIdOrKey)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issueIdOrKey' is not null or undefined
        if (issueIdOrKey === null || issueIdOrKey === undefined) {
            throw new Error('Required parameter issueIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueIssueCommentResourceUpdateCommentPut.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2IssueIssueCommentResourceUpdateCommentPut.');
        }

        // verify required parameter 'comment' is not null or undefined
        if (comment === null || comment === undefined) {
            throw new Error('Required parameter comment was null or undefined when calling comAtlassianJiraRestV2IssueIssueCommentResourceUpdateCommentPut.');
        }

        if (expand !== undefined) {
            localVarQueryParameters['expand'] = ObjectSerializer.serialize(expand, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(comment, "Comment")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Comment;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Comment");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Creates an issue link type. Use this operation to create descriptions of the reasons why issues are linked. The issue link type consists of a name and descriptions for a link's inward and outward relationships.  To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Create issue link type
     * @param issueLinkType
     */
    public comAtlassianJiraRestV2IssueIssueLinkTypeResourceCreateIssueLinkTypePost (issueLinkType: IssueLinkType, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: IssueLinkType;  }> {
        const localVarPath = this.basePath + '/api/3/issueLinkType';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issueLinkType' is not null or undefined
        if (issueLinkType === null || issueLinkType === undefined) {
            throw new Error('Required parameter issueLinkType was null or undefined when calling comAtlassianJiraRestV2IssueIssueLinkTypeResourceCreateIssueLinkTypePost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(issueLinkType, "IssueLinkType")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: IssueLinkType;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "IssueLinkType");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Deletes an issue link type.  To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Delete issue link type
     * @param issueLinkTypeId The ID of the issue link type.
     */
    public comAtlassianJiraRestV2IssueIssueLinkTypeResourceDeleteIssueLinkTypeDelete (issueLinkTypeId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/issueLinkType/{issueLinkTypeId}'
            .replace('{' + 'issueLinkTypeId' + '}', encodeURIComponent(String(issueLinkTypeId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issueLinkTypeId' is not null or undefined
        if (issueLinkTypeId === null || issueLinkTypeId === undefined) {
            throw new Error('Required parameter issueLinkTypeId was null or undefined when calling comAtlassianJiraRestV2IssueIssueLinkTypeResourceDeleteIssueLinkTypeDelete.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns an issue link type.  To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.  **[Permissions](#permissions) required:** _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg).
     * @summary Get issue link type
     * @param issueLinkTypeId The ID of the issue link type.
     */
    public comAtlassianJiraRestV2IssueIssueLinkTypeResourceGetIssueLinkTypeGet (issueLinkTypeId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: IssueLinkType;  }> {
        const localVarPath = this.basePath + '/api/3/issueLinkType/{issueLinkTypeId}'
            .replace('{' + 'issueLinkTypeId' + '}', encodeURIComponent(String(issueLinkTypeId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issueLinkTypeId' is not null or undefined
        if (issueLinkTypeId === null || issueLinkTypeId === undefined) {
            throw new Error('Required parameter issueLinkTypeId was null or undefined when calling comAtlassianJiraRestV2IssueIssueLinkTypeResourceGetIssueLinkTypeGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: IssueLinkType;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "IssueLinkType");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns a list of all issue link types.  To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.  **[Permissions](#permissions) required:** _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg). Users with permission to access Jira can call this method, but an empty list is returned.
     * @summary Get issue link types
     */
    public comAtlassianJiraRestV2IssueIssueLinkTypeResourceGetIssueLinkTypesGet (options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: IssueLinkTypes;  }> {
        const localVarPath = this.basePath + '/api/3/issueLinkType';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: IssueLinkTypes;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "IssueLinkTypes");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Updates an issue link type.  To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Update issue link type
     * @param issueLinkTypeId The ID of the issue link type.
     * @param issueLinkType
     */
    public comAtlassianJiraRestV2IssueIssueLinkTypeResourceUpdateIssueLinkTypePut (issueLinkTypeId: string, issueLinkType: IssueLinkType, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: IssueLinkType;  }> {
        const localVarPath = this.basePath + '/api/3/issueLinkType/{issueLinkTypeId}'
            .replace('{' + 'issueLinkTypeId' + '}', encodeURIComponent(String(issueLinkTypeId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issueLinkTypeId' is not null or undefined
        if (issueLinkTypeId === null || issueLinkTypeId === undefined) {
            throw new Error('Required parameter issueLinkTypeId was null or undefined when calling comAtlassianJiraRestV2IssueIssueLinkTypeResourceUpdateIssueLinkTypePut.');
        }

        // verify required parameter 'issueLinkType' is not null or undefined
        if (issueLinkType === null || issueLinkType === undefined) {
            throw new Error('Required parameter issueLinkType was null or undefined when calling comAtlassianJiraRestV2IssueIssueLinkTypeResourceUpdateIssueLinkTypePut.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(issueLinkType, "IssueLinkType")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: IssueLinkType;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "IssueLinkType");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Deletes an issue's property.  **[Permissions](#permissions) required:**  *   _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in. *   If configured, permission to view the issue granted by [issue-level security](https://confluence.atlassian.com/x/J4lKLg) .  *   _Edit issues_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the issue.
     * @summary Delete issue property
     * @param issueIdOrKey The key or ID of the issue.
     * @param propertyKey The key of the property.
     */
    public comAtlassianJiraRestV2IssueIssuePropertyResourceDeleteIssuePropertyDelete (issueIdOrKey: string, propertyKey: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/issue/{issueIdOrKey}/properties/{propertyKey}'
            .replace('{' + 'issueIdOrKey' + '}', encodeURIComponent(String(issueIdOrKey)))
            .replace('{' + 'propertyKey' + '}', encodeURIComponent(String(propertyKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issueIdOrKey' is not null or undefined
        if (issueIdOrKey === null || issueIdOrKey === undefined) {
            throw new Error('Required parameter issueIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueIssuePropertyResourceDeleteIssuePropertyDelete.');
        }

        // verify required parameter 'propertyKey' is not null or undefined
        if (propertyKey === null || propertyKey === undefined) {
            throw new Error('Required parameter propertyKey was null or undefined when calling comAtlassianJiraRestV2IssueIssuePropertyResourceDeleteIssuePropertyDelete.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the key and value of an issue's property.  **[Permissions](#permissions) required:**  *   _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in. *   If configured, permission to see the issue granted by [issue-level security](https://confluence.atlassian.com/x/J4lKLg).
     * @summary Get issue property
     * @param issueIdOrKey The key or ID of the issue.
     * @param propertyKey The key of the property.
     */
    public comAtlassianJiraRestV2IssueIssuePropertyResourceGetIssuePropertyGet (issueIdOrKey: string, propertyKey: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: EntityProperty;  }> {
        const localVarPath = this.basePath + '/api/3/issue/{issueIdOrKey}/properties/{propertyKey}'
            .replace('{' + 'issueIdOrKey' + '}', encodeURIComponent(String(issueIdOrKey)))
            .replace('{' + 'propertyKey' + '}', encodeURIComponent(String(propertyKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issueIdOrKey' is not null or undefined
        if (issueIdOrKey === null || issueIdOrKey === undefined) {
            throw new Error('Required parameter issueIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueIssuePropertyResourceGetIssuePropertyGet.');
        }

        // verify required parameter 'propertyKey' is not null or undefined
        if (propertyKey === null || propertyKey === undefined) {
            throw new Error('Required parameter propertyKey was null or undefined when calling comAtlassianJiraRestV2IssueIssuePropertyResourceGetIssuePropertyGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: EntityProperty;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "EntityProperty");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the URLs and keys of an issue's properties.  **[Permissions](#permissions) required:**  *   _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in. *   If configured, permission to see the issue granted by [issue-level security](https://confluence.atlassian.com/x/J4lKLg).
     * @summary Get issue property keys
     * @param issueIdOrKey The key or ID of the issue.
     */
    public comAtlassianJiraRestV2IssueIssuePropertyResourceGetIssuePropertyKeysGet (issueIdOrKey: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PropertyKeys;  }> {
        const localVarPath = this.basePath + '/api/3/issue/{issueIdOrKey}/properties'
            .replace('{' + 'issueIdOrKey' + '}', encodeURIComponent(String(issueIdOrKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issueIdOrKey' is not null or undefined
        if (issueIdOrKey === null || issueIdOrKey === undefined) {
            throw new Error('Required parameter issueIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueIssuePropertyResourceGetIssuePropertyKeysGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: PropertyKeys;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "PropertyKeys");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Sets the value of an issue's property. Use this resource to store custom data against an issue.  The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.  **[Permissions](#permissions) required:**  *   _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in. *   If configured, permission to see the issue granted by [issue-level security](https://confluence.atlassian.com/x/J4lKLg).  *   _Edit issues_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the issue.
     * @summary Set issue property
     * @param issueIdOrKey The ID or key of the issue.
     * @param propertyKey The key of the issue property. The maximum length is 255 characters.
     * @param body
     */
    public comAtlassianJiraRestV2IssueIssuePropertyResourceSetIssuePropertyPut (issueIdOrKey: string, propertyKey: string, body: any, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/issue/{issueIdOrKey}/properties/{propertyKey}'
            .replace('{' + 'issueIdOrKey' + '}', encodeURIComponent(String(issueIdOrKey)))
            .replace('{' + 'propertyKey' + '}', encodeURIComponent(String(propertyKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issueIdOrKey' is not null or undefined
        if (issueIdOrKey === null || issueIdOrKey === undefined) {
            throw new Error('Required parameter issueIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueIssuePropertyResourceSetIssuePropertyPut.');
        }

        // verify required parameter 'propertyKey' is not null or undefined
        if (propertyKey === null || propertyKey === undefined) {
            throw new Error('Required parameter propertyKey was null or undefined when calling comAtlassianJiraRestV2IssueIssuePropertyResourceSetIssuePropertyPut.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling comAtlassianJiraRestV2IssueIssuePropertyResourceSetIssuePropertyPut.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "any")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Adds the user's vote to an issue. This is the equivalent of the user clicking _Vote_ on an issue in Jira.  This operation requires the **Allow users to vote on issues** option to be _ON_. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.  **[Permissions](#permissions) required:**  *   _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in. *   If configured, permission to see the issue granted by [issue-level security](https://confluence.atlassian.com/x/J4lKLg).
     * @summary Add vote
     * @param issueIdOrKey The ID or key of the issue.
     */
    public comAtlassianJiraRestV2IssueIssueResourceAddVotePost (issueIdOrKey: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/issue/{issueIdOrKey}/votes'
            .replace('{' + 'issueIdOrKey' + '}', encodeURIComponent(String(issueIdOrKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issueIdOrKey' is not null or undefined
        if (issueIdOrKey === null || issueIdOrKey === undefined) {
            throw new Error('Required parameter issueIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueIssueResourceAddVotePost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Adds a user as a watcher of an issue by passing the account ID or name of the user as a JSON string. For example, `\"384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192\"`. The use of name is deprecated due to privacy changes. Use account ID instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. If no user is specified the calling user is added.  This operation requires the **Allow users to watch issues** option to be _ON_. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.  **[Permissions](#permissions) required:**  *   _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in. *   If configured, permission to see the issue granted by [issue-level security](https://confluence.atlassian.com/x/J4lKLg).  *   To add users other than themselves to the watchlist, _Manage watcher list_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     * @summary Add watcher
     * @param issueIdOrKey The ID or key of the issue.
     * @param body The account ID or name of the user. The use of name is deprecated due to privacy changes. Use account ID instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
     */
    public comAtlassianJiraRestV2IssueIssueResourceAddWatcherPost (issueIdOrKey: string, body: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/issue/{issueIdOrKey}/watchers'
            .replace('{' + 'issueIdOrKey' + '}', encodeURIComponent(String(issueIdOrKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issueIdOrKey' is not null or undefined
        if (issueIdOrKey === null || issueIdOrKey === undefined) {
            throw new Error('Required parameter issueIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueIssueResourceAddWatcherPost.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling comAtlassianJiraRestV2IssueIssueResourceAddWatcherPost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "string")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Assigns an issue to a user. Use this operation when the calling user does not have the _Edit Issues_ permission but has the _Assign issue_ permission for the project that the issue is in.  If `name` or `accountId` is set to:  *   `\"-1\"`, the issue is assigned to the default assignee for the project. *   `null`, the issue is set to unassigned.  **[Permissions](#permissions) required:**  *   _Browse Projects_ and _Assign Issues_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in. *   If configured, permission to view the issue granted by [issue-level security](https://confluence.atlassian.com/x/J4lKLg).
     * @summary Assign issue
     * @param issueIdOrKey The ID or key of the issue to be assigned.
     * @param user The request object with the user that the issue will be assigned to.
     */
    public comAtlassianJiraRestV2IssueIssueResourceAssignIssuePut (issueIdOrKey: string, user: User, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/issue/{issueIdOrKey}/assignee'
            .replace('{' + 'issueIdOrKey' + '}', encodeURIComponent(String(issueIdOrKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issueIdOrKey' is not null or undefined
        if (issueIdOrKey === null || issueIdOrKey === undefined) {
            throw new Error('Required parameter issueIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueIssueResourceAssignIssuePut.');
        }

        // verify required parameter 'user' is not null or undefined
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling comAtlassianJiraRestV2IssueIssueResourceAssignIssuePut.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(user, "User")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Creates an issue or, where the option to create sub-tasks is enabled in Jira, a sub-task. A transition may be applied, to move the issue or sub-task to a workflow step other than the default start step, and issue properties set.  The content of the issue or sub-task is defined using `update` and `fields`. The fields that can be set in the issue or sub-task are determined using the [Get create issue metadata](#api-api-3-issue-createmeta-get). These are the same fields that appear on the issue's create screen.  Creating a sub-task differs from creating an issue as follows:  *   `issueType` must be set to a sub-task issue type (use [Get create issue metadata](#api-api-3-issue-createmeta-get) to find sub-task issue types). *   `parent` the must contain the ID or key of the parent issue.  **[Permissions](#permissions) required:** _Browse projects_ and _Create issues_ [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project in which the issue or sub-task is created.
     * @summary Create issue
     * @param issueUpdateDetails
     * @param updateHistory Indicates whether the project in which the issue is created is added to the user&#39;s **Recently viewed** project list, as shown under **Projects** in Jira.
     */
    public comAtlassianJiraRestV2IssueIssueResourceCreateIssuePost (issueUpdateDetails: IssueUpdateDetails, updateHistory?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: CreatedIssue;  }> {
        const localVarPath = this.basePath + '/api/3/issue';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issueUpdateDetails' is not null or undefined
        if (issueUpdateDetails === null || issueUpdateDetails === undefined) {
            throw new Error('Required parameter issueUpdateDetails was null or undefined when calling comAtlassianJiraRestV2IssueIssueResourceCreateIssuePost.');
        }

        if (updateHistory !== undefined) {
            localVarQueryParameters['updateHistory'] = ObjectSerializer.serialize(updateHistory, "boolean");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(issueUpdateDetails, "IssueUpdateDetails")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: CreatedIssue;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "CreatedIssue");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Creates issues and, where the option to create sub-tasks is enabled in Jira, sub-tasks. Transitions may be applied, to move the issues or sub-tasks to a workflow step other than the default start step, and issue properties set.  The content of each issue or sub-task is defined using `update` and `fields`. The fields that can be set in the issue or sub-task are determined using the [Get create issue metadata](#api-api-3-issue-createmeta-get). These are the same fields that appear on the issues' create screens.  Creating a sub-task differs from creating an issue as follows:  *   `issueType` must be set to a sub-task issue type (use [Get create issue metadata](#api-api-3-issue-createmeta-get) to find sub-task issue types). *   `parent` the must contain the ID or key of the parent issue.  **[Permissions](#permissions) required:** _Browse projects_ and _Create issues_ [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project in which each issue or sub-task is created.
     * @summary Bulk issue create
     * @param issuesUpdateBean
     */
    public comAtlassianJiraRestV2IssueIssueResourceCreateIssuesPost (issuesUpdateBean: IssuesUpdateBean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: CreatedIssues;  }> {
        const localVarPath = this.basePath + '/api/3/issue/bulk';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issuesUpdateBean' is not null or undefined
        if (issuesUpdateBean === null || issuesUpdateBean === undefined) {
            throw new Error('Required parameter issuesUpdateBean was null or undefined when calling comAtlassianJiraRestV2IssueIssueResourceCreateIssuesPost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(issuesUpdateBean, "IssuesUpdateBean")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: CreatedIssues;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "CreatedIssues");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Creates or updates a remote issue link for an issue.  If a `globalId` is provided and a the remote issue link with that global ID exists it is updated. Any fields without values in the request are set to null. Otherwise, the remote issue link is created.  For more details on the content of the request body, see [Using fields in Remote Issue Links](https://developer.atlassian.com/server/jira/platform/using-fields-in-remote-issue-links/).  This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).  **[Permissions](#permissions) required:**  *   _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in. *   If configured, permission to see the issue granted by [issue-level security](https://confluence.atlassian.com/x/J4lKLg). *   _Link issues_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the issue.
     * @summary Create or update remote issue link
     * @param issueIdOrKey The ID or key of the issue.
     * @param remoteIssueLinkRequest
     */
    public comAtlassianJiraRestV2IssueIssueResourceCreateOrUpdateRemoteIssueLinkPost (issueIdOrKey: string, remoteIssueLinkRequest: RemoteIssueLinkRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: RemoteIssueLinkIdentifies;  }> {
        const localVarPath = this.basePath + '/api/3/issue/{issueIdOrKey}/remotelink'
            .replace('{' + 'issueIdOrKey' + '}', encodeURIComponent(String(issueIdOrKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issueIdOrKey' is not null or undefined
        if (issueIdOrKey === null || issueIdOrKey === undefined) {
            throw new Error('Required parameter issueIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueIssueResourceCreateOrUpdateRemoteIssueLinkPost.');
        }

        // verify required parameter 'remoteIssueLinkRequest' is not null or undefined
        if (remoteIssueLinkRequest === null || remoteIssueLinkRequest === undefined) {
            throw new Error('Required parameter remoteIssueLinkRequest was null or undefined when calling comAtlassianJiraRestV2IssueIssueResourceCreateOrUpdateRemoteIssueLinkPost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(remoteIssueLinkRequest, "RemoteIssueLinkRequest")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: RemoteIssueLinkIdentifies;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "RemoteIssueLinkIdentifies");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Deletes an issue.  An issue cannot be deleted if it has one or more sub-tasks. To delete an issue with sub-tasks, set `deleteSubtasks`. This causes the issue's sub-tasks to be deleted with the issue.  **[Permissions](#permissions) required:**  *   _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in. *   If configured, permission to see the issue granted by [issue-level security](https://confluence.atlassian.com/x/J4lKLg).  *   _Delete issues_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the issue.
     * @summary Delete issue
     * @param issueIdOrKey The ID or key of the issue.
     * @param deleteSubtasks Indicates whether the issue&#39;s sub-tasks are deleted when the issue is deleted.
     */
    public comAtlassianJiraRestV2IssueIssueResourceDeleteIssueDelete (issueIdOrKey: string, deleteSubtasks?: 'true' | 'false', options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/issue/{issueIdOrKey}'
            .replace('{' + 'issueIdOrKey' + '}', encodeURIComponent(String(issueIdOrKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issueIdOrKey' is not null or undefined
        if (issueIdOrKey === null || issueIdOrKey === undefined) {
            throw new Error('Required parameter issueIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueIssueResourceDeleteIssueDelete.');
        }

        if (deleteSubtasks !== undefined) {
            localVarQueryParameters['deleteSubtasks'] = ObjectSerializer.serialize(deleteSubtasks, "'true' | 'false'");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Deletes the remote issue link from the issue using the link's global ID.  This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).  **[Permissions](#permissions) required:**  *   _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in. *   If configured, permission to see the issue granted by [issue-level security](https://confluence.atlassian.com/x/J4lKLg). *   _Link issues_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the issue.
     * @summary Delete remote issue link by global id
     * @param issueIdOrKey The ID or key of the issue.
     * @param globalId The global ID of a remote issue link.
     */
    public comAtlassianJiraRestV2IssueIssueResourceDeleteRemoteIssueLinkByGlobalIdDelete (issueIdOrKey: string, globalId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/issue/{issueIdOrKey}/remotelink'
            .replace('{' + 'issueIdOrKey' + '}', encodeURIComponent(String(issueIdOrKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issueIdOrKey' is not null or undefined
        if (issueIdOrKey === null || issueIdOrKey === undefined) {
            throw new Error('Required parameter issueIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueIssueResourceDeleteRemoteIssueLinkByGlobalIdDelete.');
        }

        // verify required parameter 'globalId' is not null or undefined
        if (globalId === null || globalId === undefined) {
            throw new Error('Required parameter globalId was null or undefined when calling comAtlassianJiraRestV2IssueIssueResourceDeleteRemoteIssueLinkByGlobalIdDelete.');
        }

        if (globalId !== undefined) {
            localVarQueryParameters['globalId'] = ObjectSerializer.serialize(globalId, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Deletes a remote issue link from an issue.  This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).  **[Permissions](#permissions) required:**  *   _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in. *   If configured, permission to see the issue granted by [issue-level security](https://confluence.atlassian.com/x/J4lKLg). *   _Edit issues_ and _Link issues_ [project permissions](https://confluence.atlassian.com/x/yodKLg) for the issue.
     * @summary Delete remote issue link by id
     * @param issueIdOrKey The ID or key of the issue.
     * @param linkId The ID of a remote issue link.
     */
    public comAtlassianJiraRestV2IssueIssueResourceDeleteRemoteIssueLinkByIdDelete (issueIdOrKey: string, linkId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/issue/{issueIdOrKey}/remotelink/{linkId}'
            .replace('{' + 'issueIdOrKey' + '}', encodeURIComponent(String(issueIdOrKey)))
            .replace('{' + 'linkId' + '}', encodeURIComponent(String(linkId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issueIdOrKey' is not null or undefined
        if (issueIdOrKey === null || issueIdOrKey === undefined) {
            throw new Error('Required parameter issueIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueIssueResourceDeleteRemoteIssueLinkByIdDelete.');
        }

        // verify required parameter 'linkId' is not null or undefined
        if (linkId === null || linkId === undefined) {
            throw new Error('Required parameter linkId was null or undefined when calling comAtlassianJiraRestV2IssueIssueResourceDeleteRemoteIssueLinkByIdDelete.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Performs an issue transition and, if the transition has a screen, updates the fields from the transition screen.  To update the fields on the transition screen, specify the fields in the `fields` or `update` parameters in the request body. Get details about the fields by calling `fields` by [Get transition](#api-api-3-issue-issueIdOrKey-transitions-get) and using the `transitions.fields` expand.  **[Permissions](#permissions) required:**  *   _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in. *   If configured, permission to see the issue granted by [issue-level security](https://confluence.atlassian.com/x/J4lKLg).  *   _Transition issues_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the issue.
     * @summary Transition issue
     * @param issueIdOrKey The ID or key of the issue.
     * @param issueUpdateDetails
     */
    public comAtlassianJiraRestV2IssueIssueResourceDoTransitionPost (issueIdOrKey: string, issueUpdateDetails: IssueUpdateDetails, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/issue/{issueIdOrKey}/transitions'
            .replace('{' + 'issueIdOrKey' + '}', encodeURIComponent(String(issueIdOrKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issueIdOrKey' is not null or undefined
        if (issueIdOrKey === null || issueIdOrKey === undefined) {
            throw new Error('Required parameter issueIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueIssueResourceDoTransitionPost.');
        }

        // verify required parameter 'issueUpdateDetails' is not null or undefined
        if (issueUpdateDetails === null || issueUpdateDetails === undefined) {
            throw new Error('Required parameter issueUpdateDetails was null or undefined when calling comAtlassianJiraRestV2IssueIssueResourceDoTransitionPost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(issueUpdateDetails, "IssueUpdateDetails")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Edits an issue. A transition may be applied and issue properties updated as part of the edit.  The edits to the issue's fields are defined using `update` and `fields`. The fields that can be edited are determined using [Get edit issue metadata](#api-api-3-issue-issueIdOrKey-editmeta-get).  Connect app users with admin permissions (from user permissions and app scopes) can override the screen security configuration using `overrideScreenSecurity` and `overrideEditableFlag`.  **[Permissions](#permissions) required:**  *   _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in. *   If configured, permission to see the issue granted by [issue-level security](https://confluence.atlassian.com/x/J4lKLg).  *   _Edit issues_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the issue.
     * @summary Edit issue
     * @param issueIdOrKey The ID or key of the issue.
     * @param issueUpdateDetails
     * @param notifyUsers Indicates whether a notification email about the issue update is sent to all watchers. To disable the notification, administer Jira or administer project permissions are required. If the user doesn&#39;t have the necessary permission the request is ignored.
     * @param overrideScreenSecurity Indicates whether screen security should be overridden to enable hidden fields to be edited. Available to Connect app users with admin permissions.
     * @param overrideEditableFlag Indicates whether screen security should be overridden to enable uneditable fields to be edited. Available to Connect app users with admin permissions.
     */
    public comAtlassianJiraRestV2IssueIssueResourceEditIssuePut (issueIdOrKey: string, issueUpdateDetails: IssueUpdateDetails, notifyUsers?: boolean, overrideScreenSecurity?: boolean, overrideEditableFlag?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/issue/{issueIdOrKey}'
            .replace('{' + 'issueIdOrKey' + '}', encodeURIComponent(String(issueIdOrKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issueIdOrKey' is not null or undefined
        if (issueIdOrKey === null || issueIdOrKey === undefined) {
            throw new Error('Required parameter issueIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueIssueResourceEditIssuePut.');
        }

        // verify required parameter 'issueUpdateDetails' is not null or undefined
        if (issueUpdateDetails === null || issueUpdateDetails === undefined) {
            throw new Error('Required parameter issueUpdateDetails was null or undefined when calling comAtlassianJiraRestV2IssueIssueResourceEditIssuePut.');
        }

        if (notifyUsers !== undefined) {
            localVarQueryParameters['notifyUsers'] = ObjectSerializer.serialize(notifyUsers, "boolean");
        }

        if (overrideScreenSecurity !== undefined) {
            localVarQueryParameters['overrideScreenSecurity'] = ObjectSerializer.serialize(overrideScreenSecurity, "boolean");
        }

        if (overrideEditableFlag !== undefined) {
            localVarQueryParameters['overrideEditableFlag'] = ObjectSerializer.serialize(overrideEditableFlag, "boolean");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(issueUpdateDetails, "IssueUpdateDetails")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns details of projects, issue types within projects, and, when requested, the create screen fields for each issue type for the user. Use the information to populate the requests in [Create issue](#api-api-3-issue-post) and [Create issues](#api-api-3-issue-bulk-post).  The request can be restricted to specific projects or issue types using the query parameters. The response will contain information for the valid projects, issue types, or project and issue type combinations requested. Note that invalid project, issue type, or project and issue type combinations do not generate errors.  **[Permissions](#permissions) required:** _Create issues_ [project permission](https://confluence.atlassian.com/x/yodKLg) in the requested projects. Otherwise, the details for the requested projects are not returned.
     * @summary Get create issue metadata
     * @param projectIds Comma-separated list of project IDs. This parameter may be specified multiple times. For example, &#x60;projectIds&#x3D;10000,10001&amp;projectIds&#x3D;10020,10021&#x60;. This parameter may be provided with &#x60;projectKeys&#x60;.
     * @param projectKeys Comma-separated list of project keys. This parameter may be specified multiple times. For example, &#x60;projectKeys&#x3D;proj1,proj2&amp;projectKeys&#x3D;proj3&#x60;. This parameter may be provided with &#x60;projectIds&#x60;.
     * @param issuetypeIds Comma-separated list of issue type IDs. This parameter may be specified multiple times. For example, &#x60;issuetypeIds&#x3D;10000,10001&amp;issuetypeIds&#x3D;10020,10021&#x60;. This parameter may be provided with &#x60;issuetypeNames&#x60;.
     * @param issuetypeNames Comma-separated list of issue type names. This parameter may be specified multiple times. For example, &#x60;issuetypeNames&#x3D;name1,name2&amp;issuetypeNames&#x3D;name3&#x60;. This parameter may be provided with &#x60;issuetypeIds&#x60;.
     * @param expand Use [expand](#expansion) to include additional information about issue metadata in the response. This parameter accepts &#x60;projects.issuetypes.fields&#x60; which returns information about the fields in the issue creation screen for each issue type. Fields hidden from the screen are not returned. Use the information to populate the &#x60;fields&#x60; and &#x60;update&#x60; fields in [Create issue](#api-api-3-issue-post) and [Create issues](#api-api-3-issue-bulk-post).
     */
    public comAtlassianJiraRestV2IssueIssueResourceGetCreateIssueMetaGet (projectIds?: Array<string>, projectKeys?: Array<string>, issuetypeIds?: Array<string>, issuetypeNames?: Array<string>, expand?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: IssueCreateMetadata;  }> {
        const localVarPath = this.basePath + '/api/3/issue/createmeta';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (projectIds !== undefined) {
            localVarQueryParameters['projectIds'] = ObjectSerializer.serialize(projectIds, "Array<string>");
        }

        if (projectKeys !== undefined) {
            localVarQueryParameters['projectKeys'] = ObjectSerializer.serialize(projectKeys, "Array<string>");
        }

        if (issuetypeIds !== undefined) {
            localVarQueryParameters['issuetypeIds'] = ObjectSerializer.serialize(issuetypeIds, "Array<string>");
        }

        if (issuetypeNames !== undefined) {
            localVarQueryParameters['issuetypeNames'] = ObjectSerializer.serialize(issuetypeNames, "Array<string>");
        }

        if (expand !== undefined) {
            localVarQueryParameters['expand'] = ObjectSerializer.serialize(expand, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: IssueCreateMetadata;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "IssueCreateMetadata");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the edit screen fields for an issue that are visible to and editable by the user. Use the information to populate the requests in [Edit issue](#api-api-3-issue-issueIdOrKey-put).  Connect app users with admin permissions (from user permissions and app scopes) can return additional details using:  *   `overrideScreenSecurity` Returns hidden fields. *   `overrideEditableFlag` Returns uneditable fields. For example, where an issue has a workflow status of closed none of its fields are editable.  **[Permissions](#permissions) required:**  *   _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in. *   If configured, permission to see the issue granted by [issue-level security](https://confluence.atlassian.com/x/J4lKLg).  Note: For any fields to be editable the user must have the _Edit issues_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the issue.
     * @summary Get edit issue metadata
     * @param issueIdOrKey The ID or key of the issue.
     * @param overrideScreenSecurity Indicates whether hidden fields should be returned. Available to connect app users with admin permissions.
     * @param overrideEditableFlag Indicates whether non-editable fields should be returned. Available to connect app users with admin permissions.
     */
    public comAtlassianJiraRestV2IssueIssueResourceGetEditIssueMetaGet (issueIdOrKey: string, overrideScreenSecurity?: boolean, overrideEditableFlag?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: IssueUpdateMetadata;  }> {
        const localVarPath = this.basePath + '/api/3/issue/{issueIdOrKey}/editmeta'
            .replace('{' + 'issueIdOrKey' + '}', encodeURIComponent(String(issueIdOrKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issueIdOrKey' is not null or undefined
        if (issueIdOrKey === null || issueIdOrKey === undefined) {
            throw new Error('Required parameter issueIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueIssueResourceGetEditIssueMetaGet.');
        }

        if (overrideScreenSecurity !== undefined) {
            localVarQueryParameters['overrideScreenSecurity'] = ObjectSerializer.serialize(overrideScreenSecurity, "boolean");
        }

        if (overrideEditableFlag !== undefined) {
            localVarQueryParameters['overrideEditableFlag'] = ObjectSerializer.serialize(overrideEditableFlag, "boolean");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: IssueUpdateMetadata;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "IssueUpdateMetadata");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the details for an issue.  The issue is identified by its ID or key, however, if the identifier doesn't match an issue, a case-insensitive search and check for moved issues is performed. If a matching issue is found its details are returned, a 302 or other redirect is **not** returned. The issue key returned in the response is the key of the issue found.  **[Permissions](#permissions) required:**  *   _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in. *   If configured, permission to see the issue granted by [issue-level security](https://confluence.atlassian.com/x/J4lKLg).
     * @summary Get issue
     * @param issueIdOrKey The ID or key of the issue.
     * @param fields A comma-separated list of fields to return for the issue. Use it to retrieve a subset of fields. Allowed values:  *   &#x60;*all&#x60; Returns all fields. *   &#x60;*navigable&#x60; Returns navigable fields. *   Any issue field, prefixed with a minus to exclude.  Examples:  *   &#x60;summary,comment&#x60; Returns only the summary and comments fields. *   &#x60;-description&#x60; Returns all (default) fields except description. *   &#x60;*navigable,-comment&#x60; Returns all navigable fields except comment.  This parameter may be specified multiple times. For example, &#x60;fields&#x3D;field1,field2&amp; fields&#x3D;field3&#x60;.  Note: All fields are returned by default. This differs from [Search for issues using JQL (GET)](#api-api-3-search-get) and [Search for issues using JQL (POST)](#api-api-3-search-post) where the default is all navigable fields.
     * @param fieldsByKeys Indicates whether fields in &#x60;fields&#x60; are referenced by keys rather than IDs. This parameter is useful where fields have been added by a connect app and a field&#39;s key may differ from its ID.
     * @param expand Use [expand](#expansion) to include additional information about the issues in the response. This parameter accepts multiple values separated by a comma:  *   &#x60;renderedFields&#x60; Returns field values rendered in HTML format. *   &#x60;names&#x60; Returns the display name of each field. *   &#x60;schema&#x60; Returns the schema describing a field type. *   &#x60;transitions&#x60; Returns all possible transitions for the issue. *   &#x60;editmeta&#x60; Returns information about how each field can be edited. *   &#x60;changelog&#x60; Returns a list of recent updates to an issue, sorted by date, starting from the most recent. *   &#x60;versionedRepresentations&#x60; Returns a JSON array for each version of a field&#39;s value, with the highest number representing the most recent version. Note: When included in the request, the &#x60;fields&#x60; parameter is ignored.
     * @param properties A comma-separated list of issue properties to return for the issue. Allowed values:  *   &#x60;*all&#x60; Returns all issue properties. *   Any issue property key, prefixed with a minus to exclude.  Examples:  *   &#x60;*all&#x60; Returns all properties. *   &#x60;*all,-prop1&#x60; Returns all properties except &#x60;prop1&#x60;. *   &#x60;prop1,prop2&#x60; Returns &#x60;prop1&#x60; and &#x60;prop2&#x60; properties.  This parameter may be specified multiple times. For example, &#x60;properties&#x3D;prop1,prop2&amp; properties&#x3D;prop3&#x60;.
     * @param updateHistory Indicates whether the project in which the issue is created is added to the user&#39;s **Recently viewed** project list, as shown under **Projects** in Jira. This also populates the [JQL issues search](#api-api-3-search-get) &#x60;lastViewed&#x60; field.
     */
    public comAtlassianJiraRestV2IssueIssueResourceGetIssueGet (issueIdOrKey: string, fields?: Array<string>, fieldsByKeys?: boolean, expand?: string, properties?: Array<string>, updateHistory?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Issue;  }> {
        const localVarPath = this.basePath + '/api/3/issue/{issueIdOrKey}'
            .replace('{' + 'issueIdOrKey' + '}', encodeURIComponent(String(issueIdOrKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issueIdOrKey' is not null or undefined
        if (issueIdOrKey === null || issueIdOrKey === undefined) {
            throw new Error('Required parameter issueIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueIssueResourceGetIssueGet.');
        }

        if (fields !== undefined) {
            localVarQueryParameters['fields'] = ObjectSerializer.serialize(fields, "Array<string>");
        }

        if (fieldsByKeys !== undefined) {
            localVarQueryParameters['fieldsByKeys'] = ObjectSerializer.serialize(fieldsByKeys, "boolean");
        }

        if (expand !== undefined) {
            localVarQueryParameters['expand'] = ObjectSerializer.serialize(expand, "string");
        }

        if (properties !== undefined) {
            localVarQueryParameters['properties'] = ObjectSerializer.serialize(properties, "Array<string>");
        }

        if (updateHistory !== undefined) {
            localVarQueryParameters['updateHistory'] = ObjectSerializer.serialize(updateHistory, "boolean");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Issue;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Issue");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns lists of issues matching a query string. Use this resource to provide auto-completion suggestions when the user is looking for an issue using a word or string.  This operation returns two lists:  *   `History Search` which includes issues from the user's history of created, edited, or viewed issues that contain the string in the `query` parameter. *   `Current Search` which includes issues that match the JQL expression in `currentJQL` and contain the string in the `query` parameter.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Get issue picker suggestions
     * @param query A string to match against text fields in the issue such as title, description, or comments.
     * @param currentJQL A JQL query defining a list of issues to search for the query term. Note that &#x60;username&#x60; and &#x60;userkey&#x60; have been deprecated as search terms for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. Use &#x60;accountId&#x60; instead.
     * @param currentIssueKey The key of an issue to exclude from search results. For example, the issue the user is viewing when they perform this query.
     * @param currentProjectId The ID of a project that suggested issues must belong to.
     * @param showSubTasks Indicate whether to include subtasks in the suggestions list.
     * @param showSubTaskParent When &#x60;currentIssueKey&#x60; is a sub-task, indicates whether to include the parent issue in the suggestions if it matches the query.
     */
    public comAtlassianJiraRestV2IssueIssueResourceGetIssuePickerResourceGet (query?: string, currentJQL?: string, currentIssueKey?: string, currentProjectId?: string, showSubTasks?: boolean, showSubTaskParent?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: IssuePickerSuggestions;  }> {
        const localVarPath = this.basePath + '/api/3/issue/picker';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (query !== undefined) {
            localVarQueryParameters['query'] = ObjectSerializer.serialize(query, "string");
        }

        if (currentJQL !== undefined) {
            localVarQueryParameters['currentJQL'] = ObjectSerializer.serialize(currentJQL, "string");
        }

        if (currentIssueKey !== undefined) {
            localVarQueryParameters['currentIssueKey'] = ObjectSerializer.serialize(currentIssueKey, "string");
        }

        if (currentProjectId !== undefined) {
            localVarQueryParameters['currentProjectId'] = ObjectSerializer.serialize(currentProjectId, "string");
        }

        if (showSubTasks !== undefined) {
            localVarQueryParameters['showSubTasks'] = ObjectSerializer.serialize(showSubTasks, "boolean");
        }

        if (showSubTaskParent !== undefined) {
            localVarQueryParameters['showSubTaskParent'] = ObjectSerializer.serialize(showSubTaskParent, "boolean");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: IssuePickerSuggestions;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "IssuePickerSuggestions");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the watchers for an issue.  This operation requires the **Allow users to watch issues** option to be _ON_. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.  **[Permissions](#permissions) required:**  *   _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in. *   If configured, permission to see the issue granted by [issue-level security](https://confluence.atlassian.com/x/J4lKLg).  *   To see details of users on the watchlist other than themselves, _View voters and watchers_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     * @summary Get issue watchers
     * @param issueIdOrKey The ID or key of the issue.
     */
    public comAtlassianJiraRestV2IssueIssueResourceGetIssueWatchersGet (issueIdOrKey: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Watchers;  }> {
        const localVarPath = this.basePath + '/api/3/issue/{issueIdOrKey}/watchers'
            .replace('{' + 'issueIdOrKey' + '}', encodeURIComponent(String(issueIdOrKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issueIdOrKey' is not null or undefined
        if (issueIdOrKey === null || issueIdOrKey === undefined) {
            throw new Error('Required parameter issueIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueIssueResourceGetIssueWatchersGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Watchers;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Watchers");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns a remote issue link for an issue.  This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).  **[Permissions](#permissions) required:**  *   _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in. *   If configured, permission to see the issue granted by [issue-level security](https://confluence.atlassian.com/x/J4lKLg).
     * @summary Get remote issue link by id
     * @param issueIdOrKey The ID or key of the issue.
     * @param linkId The ID of the remote issue link.
     */
    public comAtlassianJiraRestV2IssueIssueResourceGetRemoteIssueLinkByIdGet (issueIdOrKey: string, linkId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: RemoteIssueLink;  }> {
        const localVarPath = this.basePath + '/api/3/issue/{issueIdOrKey}/remotelink/{linkId}'
            .replace('{' + 'issueIdOrKey' + '}', encodeURIComponent(String(issueIdOrKey)))
            .replace('{' + 'linkId' + '}', encodeURIComponent(String(linkId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issueIdOrKey' is not null or undefined
        if (issueIdOrKey === null || issueIdOrKey === undefined) {
            throw new Error('Required parameter issueIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueIssueResourceGetRemoteIssueLinkByIdGet.');
        }

        // verify required parameter 'linkId' is not null or undefined
        if (linkId === null || linkId === undefined) {
            throw new Error('Required parameter linkId was null or undefined when calling comAtlassianJiraRestV2IssueIssueResourceGetRemoteIssueLinkByIdGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: RemoteIssueLink;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "RemoteIssueLink");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the remote issue links for an issue. When a remote issue link global ID is provided the record with that global ID is returned, otherwise all remote issue links are returned.  This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).  **[Permissions](#permissions) required:**  *   _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in. *   If configured, permission to see the issue granted by [issue-level security](https://confluence.atlassian.com/x/J4lKLg).
     * @summary Get remote issue links
     * @param issueIdOrKey The ID or key of the issue.
     * @param globalId The global ID of the remote issue link.
     */
    public comAtlassianJiraRestV2IssueIssueResourceGetRemoteIssueLinksGet (issueIdOrKey: string, globalId?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: RemoteIssueLink;  }> {
        const localVarPath = this.basePath + '/api/3/issue/{issueIdOrKey}/remotelink'
            .replace('{' + 'issueIdOrKey' + '}', encodeURIComponent(String(issueIdOrKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issueIdOrKey' is not null or undefined
        if (issueIdOrKey === null || issueIdOrKey === undefined) {
            throw new Error('Required parameter issueIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueIssueResourceGetRemoteIssueLinksGet.');
        }

        if (globalId !== undefined) {
            localVarQueryParameters['globalId'] = ObjectSerializer.serialize(globalId, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: RemoteIssueLink;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "RemoteIssueLink");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns either all transitions or a transition that can be performed by the user on an issue, based on the issue's status.  Note, if a request is made for a transition that does not exist or cannot be performed on the issue, given its status, the response will return any empty transitions list.  **[Permissions](#permissions) required:**  *   _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in. *   If configured, permission to see the issue granted by [issue-level security](https://confluence.atlassian.com/x/J4lKLg).  If the user does not have the _Transition issues_ [project permission](https://confluence.atlassian.com/x/yodKLg) the response will not list any transitions.
     * @summary Get transitions
     * @param issueIdOrKey The ID or key of the issue.
     * @param expand Use [expand](#expansion) to include additional information about transitions in the response. This parameter accepts &#x60;transitions.fields&#x60; which returns information about the fields in the transition screen for each transition. Fields hidden from the screen are not returned. Use this information to populate the &#x60;fields&#x60; and &#x60;update&#x60; fields in [Transition issue](#api-api-3-issue-issueIdOrKey-transitions-post).
     * @param transitionId The ID of the transition.
     * @param skipRemoteOnlyCondition Indicates whether transitions with the condition _Hide From User Condition_ are included in the response.
     */
    public comAtlassianJiraRestV2IssueIssueResourceGetTransitionsGet (issueIdOrKey: string, expand?: string, transitionId?: string, skipRemoteOnlyCondition?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Transitions;  }> {
        const localVarPath = this.basePath + '/api/3/issue/{issueIdOrKey}/transitions'
            .replace('{' + 'issueIdOrKey' + '}', encodeURIComponent(String(issueIdOrKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issueIdOrKey' is not null or undefined
        if (issueIdOrKey === null || issueIdOrKey === undefined) {
            throw new Error('Required parameter issueIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueIssueResourceGetTransitionsGet.');
        }

        if (expand !== undefined) {
            localVarQueryParameters['expand'] = ObjectSerializer.serialize(expand, "string");
        }

        if (transitionId !== undefined) {
            localVarQueryParameters['transitionId'] = ObjectSerializer.serialize(transitionId, "string");
        }

        if (skipRemoteOnlyCondition !== undefined) {
            localVarQueryParameters['skipRemoteOnlyCondition'] = ObjectSerializer.serialize(skipRemoteOnlyCondition, "boolean");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Transitions;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Transitions");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns details about the votes on an issue.  This operation requires the **Allow users to vote on issues** option to be _ON_. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.  **[Permissions](#permissions) required:**  *   _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in. *   If configured, permission to see the issue granted by [issue-level security](https://confluence.atlassian.com/x/J4lKLg).  Note that users with the necessary permissions for this operation but without the _View voters and watchers_ project permissions are not returned details in the `voters` field.
     * @summary Get votes
     * @param issueIdOrKey The ID or key of the issue.
     */
    public comAtlassianJiraRestV2IssueIssueResourceGetVotesGet (issueIdOrKey: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Votes;  }> {
        const localVarPath = this.basePath + '/api/3/issue/{issueIdOrKey}/votes'
            .replace('{' + 'issueIdOrKey' + '}', encodeURIComponent(String(issueIdOrKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issueIdOrKey' is not null or undefined
        if (issueIdOrKey === null || issueIdOrKey === undefined) {
            throw new Error('Required parameter issueIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueIssueResourceGetVotesGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Votes;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Votes");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Creates an email notification for an issue and adds it to the mail queue.  **[Permissions](#permissions) required:**  *   _Browse Projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in. *   If configured, permission to view the issue granted by [issue-level security](https://confluence.atlassian.com/x/J4lKLg).
     * @summary Send notification for issue
     * @param issueIdOrKey ID or key of the issue that the notification is sent for.
     * @param notification The request object for the notification and recipients.
     */
    public comAtlassianJiraRestV2IssueIssueResourceNotifyPost (issueIdOrKey: string, notification: Notification, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/issue/{issueIdOrKey}/notify'
            .replace('{' + 'issueIdOrKey' + '}', encodeURIComponent(String(issueIdOrKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issueIdOrKey' is not null or undefined
        if (issueIdOrKey === null || issueIdOrKey === undefined) {
            throw new Error('Required parameter issueIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueIssueResourceNotifyPost.');
        }

        // verify required parameter 'notification' is not null or undefined
        if (notification === null || notification === undefined) {
            throw new Error('Required parameter notification was null or undefined when calling comAtlassianJiraRestV2IssueIssueResourceNotifyPost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(notification, "Notification")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Deletes a user's vote from an issue. This is the equivalent of the user clicking _Unvote_ on an issue in Jira.  This operation requires the **Allow users to vote on issues** option to be _ON_. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.  **[Permissions](#permissions) required:**  *   _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in. *   If configured, permission to see the issue granted by [issue-level security](https://confluence.atlassian.com/x/J4lKLg).
     * @summary Delete vote
     * @param issueIdOrKey The ID or key of the issue.
     */
    public comAtlassianJiraRestV2IssueIssueResourceRemoveVoteDelete (issueIdOrKey: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/issue/{issueIdOrKey}/votes'
            .replace('{' + 'issueIdOrKey' + '}', encodeURIComponent(String(issueIdOrKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issueIdOrKey' is not null or undefined
        if (issueIdOrKey === null || issueIdOrKey === undefined) {
            throw new Error('Required parameter issueIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueIssueResourceRemoveVoteDelete.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Deletes a user as a watcher of an issue.  This operation requires the **Allow users to watch issues** option to be _ON_. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.  **[Permissions](#permissions) required:**  *   _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in. *   If configured, permission to see the issue granted by [issue-level security](https://confluence.atlassian.com/x/J4lKLg).  *   To remove users other than themselves from the watchlist, _Manage watcher list_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
     * @summary Delete watcher
     * @param issueIdOrKey The ID or key of the issue.
     * @param username This parameter has been deprecated due to privacy changes. Use &#x60;accountId&#x60; instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.  The username of the user. For example, _admin_. Required, unless &#x60;accountId&#x60; is specified.
     * @param accountId The accountId of the user, which uniquely identifies the user across all Atlassian products. For example, _384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192_. Required, unless &#x60;username&#x60; is specified.
     */
    public comAtlassianJiraRestV2IssueIssueResourceRemoveWatcherDelete (issueIdOrKey: string, username?: string, accountId?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/issue/{issueIdOrKey}/watchers'
            .replace('{' + 'issueIdOrKey' + '}', encodeURIComponent(String(issueIdOrKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issueIdOrKey' is not null or undefined
        if (issueIdOrKey === null || issueIdOrKey === undefined) {
            throw new Error('Required parameter issueIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueIssueResourceRemoveWatcherDelete.');
        }

        if (username !== undefined) {
            localVarQueryParameters['username'] = ObjectSerializer.serialize(username, "string");
        }

        if (accountId !== undefined) {
            localVarQueryParameters['accountId'] = ObjectSerializer.serialize(accountId, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Updates a remote issue link for an issue.  For more details on the content of the request body, see [Using fields in Remote Issue Links](https://developer.atlassian.com/server/jira/platform/using-fields-in-remote-issue-links/)  Note: Fields without values in the request are set to null.  This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).  **[Permissions](#permissions) required:**  *   _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in. *   If configured, permission to see the issue granted by [issue-level security](https://confluence.atlassian.com/x/J4lKLg). *   _Link issues_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the issue.
     * @summary Update remote issue link
     * @param issueIdOrKey The ID or key of the issue.
     * @param linkId The ID of the remote issue link.
     * @param remoteIssueLinkRequest
     */
    public comAtlassianJiraRestV2IssueIssueResourceUpdateRemoteIssueLinkPut (issueIdOrKey: string, linkId: string, remoteIssueLinkRequest: RemoteIssueLinkRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/issue/{issueIdOrKey}/remotelink/{linkId}'
            .replace('{' + 'issueIdOrKey' + '}', encodeURIComponent(String(issueIdOrKey)))
            .replace('{' + 'linkId' + '}', encodeURIComponent(String(linkId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issueIdOrKey' is not null or undefined
        if (issueIdOrKey === null || issueIdOrKey === undefined) {
            throw new Error('Required parameter issueIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueIssueResourceUpdateRemoteIssueLinkPut.');
        }

        // verify required parameter 'linkId' is not null or undefined
        if (linkId === null || linkId === undefined) {
            throw new Error('Required parameter linkId was null or undefined when calling comAtlassianJiraRestV2IssueIssueResourceUpdateRemoteIssueLinkPut.');
        }

        // verify required parameter 'remoteIssueLinkRequest' is not null or undefined
        if (remoteIssueLinkRequest === null || remoteIssueLinkRequest === undefined) {
            throw new Error('Required parameter remoteIssueLinkRequest was null or undefined when calling comAtlassianJiraRestV2IssueIssueResourceUpdateRemoteIssueLinkPut.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(remoteIssueLinkRequest, "RemoteIssueLinkRequest")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns details of an issue security level.  Use [Get issue security scheme](#api-api-3-issuesecurityschemes-id-get) to obtain the IDs of issue security levels associated with the issue security scheme.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Get issue security level
     * @param id The ID of the issue security level.
     */
    public comAtlassianJiraRestV2IssueIssueSecurityLevelResourceGetIssueSecurityLevelGet (id: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: SecurityLevel;  }> {
        const localVarPath = this.basePath + '/api/3/securitylevel/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2IssueIssueSecurityLevelResourceGetIssueSecurityLevelGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: SecurityLevel;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "SecurityLevel");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns an issue security scheme along with its security levels.  **[Permissions](#permissions) required:**  *   _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg). *   _Administer Projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) for a project that uses the requested issue security scheme.
     * @summary Get issue security scheme
     * @param id The ID of the issue security scheme. Use the [Get issue security schemes](#api-api-3-issuesecurityschemes-get) operation to get a list of issue security scheme IDs.
     */
    public comAtlassianJiraRestV2IssueIssueSecuritySchemeResourceGetIssueSecuritySchemeGet (id: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: SecurityScheme;  }> {
        const localVarPath = this.basePath + '/api/3/issuesecurityschemes/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2IssueIssueSecuritySchemeResourceGetIssueSecuritySchemeGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: SecurityScheme;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "SecurityScheme");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns all [issue security schemes](https://confluence.atlassian.com/x/J4lKLg).  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Get issue security schemes
     */
    public comAtlassianJiraRestV2IssueIssueSecuritySchemeResourceGetIssueSecuritySchemesGet (options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: SecuritySchemes;  }> {
        const localVarPath = this.basePath + '/api/3/issuesecurityschemes';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: SecuritySchemes;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "SecuritySchemes");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Deletes the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Delete issue type property
     * @param issueTypeId The ID of the issue type.
     * @param propertyKey The key of the property. Use [Get issue type property keys](#api-api-3-issuetype-issueTypeId-properties-get) to get a list of all issue type property keys.
     */
    public comAtlassianJiraRestV2IssueIssueTypePropertyResourceDeleteIssueTypePropertyDelete (issueTypeId: string, propertyKey: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/issuetype/{issueTypeId}/properties/{propertyKey}'
            .replace('{' + 'issueTypeId' + '}', encodeURIComponent(String(issueTypeId)))
            .replace('{' + 'propertyKey' + '}', encodeURIComponent(String(propertyKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issueTypeId' is not null or undefined
        if (issueTypeId === null || issueTypeId === undefined) {
            throw new Error('Required parameter issueTypeId was null or undefined when calling comAtlassianJiraRestV2IssueIssueTypePropertyResourceDeleteIssueTypePropertyDelete.');
        }

        // verify required parameter 'propertyKey' is not null or undefined
        if (propertyKey === null || propertyKey === undefined) {
            throw new Error('Required parameter propertyKey was null or undefined when calling comAtlassianJiraRestV2IssueIssueTypePropertyResourceDeleteIssueTypePropertyDelete.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the key and value of the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).  **[Permissions](#permissions) required:**  *   _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg) to get the details of any issue type. *   _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) to get the details of any issue types associated with the projects the user has permission to browse.
     * @summary Get issue type property
     * @param issueTypeId The ID of the issue type.
     * @param propertyKey The key of the property. Use [Get issue type property keys](#api-api-3-issuetype-issueTypeId-properties-get) to get a list of all issue type property keys.
     */
    public comAtlassianJiraRestV2IssueIssueTypePropertyResourceGetIssueTypePropertyGet (issueTypeId: string, propertyKey: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: EntityProperty;  }> {
        const localVarPath = this.basePath + '/api/3/issuetype/{issueTypeId}/properties/{propertyKey}'
            .replace('{' + 'issueTypeId' + '}', encodeURIComponent(String(issueTypeId)))
            .replace('{' + 'propertyKey' + '}', encodeURIComponent(String(propertyKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issueTypeId' is not null or undefined
        if (issueTypeId === null || issueTypeId === undefined) {
            throw new Error('Required parameter issueTypeId was null or undefined when calling comAtlassianJiraRestV2IssueIssueTypePropertyResourceGetIssueTypePropertyGet.');
        }

        // verify required parameter 'propertyKey' is not null or undefined
        if (propertyKey === null || propertyKey === undefined) {
            throw new Error('Required parameter propertyKey was null or undefined when calling comAtlassianJiraRestV2IssueIssueTypePropertyResourceGetIssueTypePropertyGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: EntityProperty;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "EntityProperty");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns all the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties) keys of the issue type.  **[Permissions](#permissions) required:**  *   _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg) to get the property keys of any issue type. *   _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) to get the property keys of any issue types associated with the projects the user has permission to browse.
     * @summary Get issue type property keys
     * @param issueTypeId The ID of the issue type.
     */
    public comAtlassianJiraRestV2IssueIssueTypePropertyResourceGetIssueTypePropertyKeysGet (issueTypeId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PropertyKeys;  }> {
        const localVarPath = this.basePath + '/api/3/issuetype/{issueTypeId}/properties'
            .replace('{' + 'issueTypeId' + '}', encodeURIComponent(String(issueTypeId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issueTypeId' is not null or undefined
        if (issueTypeId === null || issueTypeId === undefined) {
            throw new Error('Required parameter issueTypeId was null or undefined when calling comAtlassianJiraRestV2IssueIssueTypePropertyResourceGetIssueTypePropertyKeysGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: PropertyKeys;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "PropertyKeys");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Creates or updates the value of the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties). Use this resource to store and update data against an issue type.  The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Set issue type property
     * @param issueTypeId The ID of the issue type.
     * @param propertyKey The key of the issue type property. The maximum length is 255 characters.
     * @param body
     */
    public comAtlassianJiraRestV2IssueIssueTypePropertyResourceSetIssueTypePropertyPut (issueTypeId: string, propertyKey: string, body: any, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/issuetype/{issueTypeId}/properties/{propertyKey}'
            .replace('{' + 'issueTypeId' + '}', encodeURIComponent(String(issueTypeId)))
            .replace('{' + 'propertyKey' + '}', encodeURIComponent(String(propertyKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issueTypeId' is not null or undefined
        if (issueTypeId === null || issueTypeId === undefined) {
            throw new Error('Required parameter issueTypeId was null or undefined when calling comAtlassianJiraRestV2IssueIssueTypePropertyResourceSetIssueTypePropertyPut.');
        }

        // verify required parameter 'propertyKey' is not null or undefined
        if (propertyKey === null || propertyKey === undefined) {
            throw new Error('Required parameter propertyKey was null or undefined when calling comAtlassianJiraRestV2IssueIssueTypePropertyResourceSetIssueTypePropertyPut.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling comAtlassianJiraRestV2IssueIssueTypePropertyResourceSetIssueTypePropertyPut.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "any")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Loads an avatar for the issue type.  Specify the avatar's local file location in the body of the request. Also, include the following headers:  *   `X-Atlassian-Token: no-check` To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers). *   `Content-Type: image/_image type_` Valid image types are JPEG, GIF, or PNG.  For example:   `curl --request POST \\ --user email@example.com:<api_token> \\ --header 'X-Atlassian-Token: no-check' \\ --header 'Content-Type: image/< image_type>' \\ --data-binary \"<@/path/to/file/with/your/avatar>\" \\ --url 'https://your-domain.atlassian.net/rest/api/3/issuetype/{issueTypeId}'This`  The avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square's sides is set to the smaller of the height or width of the image.  The cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.  After creating the avatar, use [Update issue type](#api-api-3-issuetype-id-put) to set it as the issue type's displayed avatar.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Load issue type avatar
     * @param id The ID of the issue type.
     * @param size The length of each side of the crop region.
     * @param body
     * @param x The X coordinate of the top-left corner of the crop region.
     * @param y The Y coordinate of the top-left corner of the crop region.
     */
    public comAtlassianJiraRestV2IssueIssueTypeResourceCreateIssueTypeAvatarPost (id: string, size: number, body: any, x?: number, y?: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Avatar;  }> {
        const localVarPath = this.basePath + '/api/3/issuetype/{id}/avatar2'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2IssueIssueTypeResourceCreateIssueTypeAvatarPost.');
        }

        // verify required parameter 'size' is not null or undefined
        if (size === null || size === undefined) {
            throw new Error('Required parameter size was null or undefined when calling comAtlassianJiraRestV2IssueIssueTypeResourceCreateIssueTypeAvatarPost.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling comAtlassianJiraRestV2IssueIssueTypeResourceCreateIssueTypeAvatarPost.');
        }

        if (x !== undefined) {
            localVarQueryParameters['x'] = ObjectSerializer.serialize(x, "number");
        }

        if (y !== undefined) {
            localVarQueryParameters['y'] = ObjectSerializer.serialize(y, "number");
        }

        if (size !== undefined) {
            localVarQueryParameters['size'] = ObjectSerializer.serialize(size, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "any")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Avatar;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Avatar");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Creates an issue type and adds it to the default issue type scheme.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Create issue type
     * @param issueTypeCreateBean
     */
    public comAtlassianJiraRestV2IssueIssueTypeResourceCreateIssueTypePost (issueTypeCreateBean: IssueTypeCreateBean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: IssueType;  }> {
        const localVarPath = this.basePath + '/api/3/issuetype';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issueTypeCreateBean' is not null or undefined
        if (issueTypeCreateBean === null || issueTypeCreateBean === undefined) {
            throw new Error('Required parameter issueTypeCreateBean was null or undefined when calling comAtlassianJiraRestV2IssueIssueTypeResourceCreateIssueTypePost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(issueTypeCreateBean, "IssueTypeCreateBean")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: IssueType;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "IssueType");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Deletes the issue type. If the issue type is in use, all uses are updated with the alternative issue type (`alternativeIssueTypeId`). A list of alternative issue types can be obtained from the [Get alternative issue types](#api-api-3-issuetype-id-alternatives-get) resource.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Delete issue type
     * @param id The ID of the issue type.
     * @param alternativeIssueTypeId The ID of the replacement issue type.
     */
    public comAtlassianJiraRestV2IssueIssueTypeResourceDeleteIssueTypeDelete (id: string, alternativeIssueTypeId?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/issuetype/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2IssueIssueTypeResourceDeleteIssueTypeDelete.');
        }

        if (alternativeIssueTypeId !== undefined) {
            localVarQueryParameters['alternativeIssueTypeId'] = ObjectSerializer.serialize(alternativeIssueTypeId, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns a list of issue types that can be used to replace the issue type. The alternative issue types are those assigned to the same workflow scheme, field configuration scheme, and screen scheme.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Get alternative issue types
     * @param id The ID of the issue type.
     */
    public comAtlassianJiraRestV2IssueIssueTypeResourceGetAlternativeIssueTypesGet (id: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Array<IssueType>;  }> {
        const localVarPath = this.basePath + '/api/3/issuetype/{id}/alternatives'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2IssueIssueTypeResourceGetAlternativeIssueTypesGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<IssueType>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<IssueType>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns all issue types.  **[Permissions](#permissions) required:** Permission to access Jira, however, issue types are only returned as follows:  *   if the user has the _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg), all issue types are returned. *   if the user has the _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) for one or more projects, the issue types associated with the projects the user has permission to browse are returned.
     * @summary Get all issue types for user
     */
    public comAtlassianJiraRestV2IssueIssueTypeResourceGetIssueAllTypesGet (options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Array<IssueType>;  }> {
        const localVarPath = this.basePath + '/api/3/issuetype';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<IssueType>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<IssueType>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns an issue type.  **[Permissions](#permissions) required:**  *   _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg) to get the details of any issue type. *   _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) to get the details of any issue type associated with the projects the user has permission to browse.
     * @summary Get issue type
     * @param id The ID of the issue type.
     */
    public comAtlassianJiraRestV2IssueIssueTypeResourceGetIssueTypeGet (id: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: IssueType;  }> {
        const localVarPath = this.basePath + '/api/3/issuetype/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2IssueIssueTypeResourceGetIssueTypeGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: IssueType;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "IssueType");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Updates the issue type.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Update issue type
     * @param id The ID of the issue type.
     * @param issueTypeUpdateBean
     */
    public comAtlassianJiraRestV2IssueIssueTypeResourceUpdateIssueTypePut (id: string, issueTypeUpdateBean: IssueTypeUpdateBean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: IssueType;  }> {
        const localVarPath = this.basePath + '/api/3/issuetype/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2IssueIssueTypeResourceUpdateIssueTypePut.');
        }

        // verify required parameter 'issueTypeUpdateBean' is not null or undefined
        if (issueTypeUpdateBean === null || issueTypeUpdateBean === undefined) {
            throw new Error('Required parameter issueTypeUpdateBean was null or undefined when calling comAtlassianJiraRestV2IssueIssueTypeResourceUpdateIssueTypePut.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(issueTypeUpdateBean, "IssueTypeUpdateBean")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: IssueType;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "IssueType");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Adds a worklog to an issue.  Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).  **[Permissions](#permissions) required:**  *   _Browse projects_ and _Work on issues_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in. *   If configured, permission to see the issue granted by [issue-level security](https://confluence.atlassian.com/x/J4lKLg).
     * @summary Add worklog
     * @param issueIdOrKey The ID or key the issue.
     * @param worklog
     * @param notifyUsers Indicates whether users watching the issue are notified by email.
     * @param adjustEstimate Defines how to update the issue&#39;s time estimate, the options are:  *   &#x60;new&#x60; Sets the estimate to a specific value, defined in &#x60;newEstimate&#x60;. *   &#x60;leave&#x60; Leaves the estimate unchanged. *   &#x60;manual&#x60; Reduces the estimate by amount specified in &#x60;reduceBy&#x60;. *   &#x60;auto&#x60; Reduces the estimate by the value of &#x60;timeSpent&#x60; in the worklog.
     * @param newEstimate The value to set as the issue&#39;s remaining time estimate, as days (#d), hours (#h), or minutes (#m or #). For example, _2d_. Required when &#x60;adjustEstimate&#x60; is &#x60;new&#x60;.
     * @param reduceBy The amount to reduce the issue&#39;s remaining estimate by, as days (#d), hours (#h), or minutes (#m). For example, _2d_. Required when &#x60;adjustEstimate&#x60; is &#x60;manual&#x60;.
     * @param expand Use [expand](#expansion) to include additional information about work logs in the response. This parameter accepts multiple values separated by a comma:  *   &#x60;properties&#x60; Returns worklog properties.
     * @param overrideEditableFlag Indicates whether the worklog entry should be added to the issue even if the issue is not editable, because jira.issue.editable set to false or missing. For example, the issue is closed. Only connect app users with admin scope permission can use this flag.
     */
    public comAtlassianJiraRestV2IssueIssueWorklogsResourceAddWorklogPost (issueIdOrKey: string, worklog: Worklog, notifyUsers?: boolean, adjustEstimate?: 'new' | 'leave' | 'manual' | 'auto', newEstimate?: string, reduceBy?: string, expand?: string, overrideEditableFlag?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Worklog;  }> {
        const localVarPath = this.basePath + '/api/3/issue/{issueIdOrKey}/worklog'
            .replace('{' + 'issueIdOrKey' + '}', encodeURIComponent(String(issueIdOrKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issueIdOrKey' is not null or undefined
        if (issueIdOrKey === null || issueIdOrKey === undefined) {
            throw new Error('Required parameter issueIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueIssueWorklogsResourceAddWorklogPost.');
        }

        // verify required parameter 'worklog' is not null or undefined
        if (worklog === null || worklog === undefined) {
            throw new Error('Required parameter worklog was null or undefined when calling comAtlassianJiraRestV2IssueIssueWorklogsResourceAddWorklogPost.');
        }

        if (notifyUsers !== undefined) {
            localVarQueryParameters['notifyUsers'] = ObjectSerializer.serialize(notifyUsers, "boolean");
        }

        if (adjustEstimate !== undefined) {
            localVarQueryParameters['adjustEstimate'] = ObjectSerializer.serialize(adjustEstimate, "'new' | 'leave' | 'manual' | 'auto'");
        }

        if (newEstimate !== undefined) {
            localVarQueryParameters['newEstimate'] = ObjectSerializer.serialize(newEstimate, "string");
        }

        if (reduceBy !== undefined) {
            localVarQueryParameters['reduceBy'] = ObjectSerializer.serialize(reduceBy, "string");
        }

        if (expand !== undefined) {
            localVarQueryParameters['expand'] = ObjectSerializer.serialize(expand, "string");
        }

        if (overrideEditableFlag !== undefined) {
            localVarQueryParameters['overrideEditableFlag'] = ObjectSerializer.serialize(overrideEditableFlag, "boolean");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(worklog, "Worklog")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Worklog;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Worklog");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Deletes a worklog from an issue.  Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).  **[Permissions](#permissions) required:**  *   _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in. *   If configured, permission to see the issue granted by [issue-level security](https://confluence.atlassian.com/x/J4lKLg). *   _Delete all worklogs_ [project permission](https://confluence.atlassian.com/x/yodKLg) to delete any worklog or _Delete own worklogs_ to delete worklogs created by the user. *   Where the workload has visibility restrictions, the user must be a member of the group or have the role that the visibility of the worklog is restricted to.
     * @summary Delete worklog
     * @param issueIdOrKey The ID or key of the issue.
     * @param id The ID of the worklog.
     * @param notifyUsers Indicates whether users watching the issue are notified by email.
     * @param adjustEstimate Defines how to update the issue&#39;s time estimate, the options are:  *   &#x60;new&#x60; Sets the estimate to a specific value, defined in &#x60;newEstimate&#x60;. *   &#x60;leave&#x60; Leaves the estimate unchanged. *   &#x60;manual&#x60; Increases the estimate by amount specified in &#x60;increaseBy&#x60;. *   &#x60;auto&#x60; Reduces the estimate by the value of &#x60;timeSpent&#x60; in the worklog.
     * @param newEstimate The value to set as the issue&#39;s remaining time estimate, as days (#d), hours (#h), or minutes (#m or #). For example, _2d_. Required when &#x60;adjustEstimate&#x60; is &#x60;new&#x60;.
     * @param increaseBy The amount to increase the issue&#39;s remaining estimate by, as days (#d), hours (#h), or minutes (#m or #). For example, _2d_. Required when &#x60;adjustEstimate&#x60; is &#x60;manual&#x60;.
     * @param overrideEditableFlag Indicates whether the work log entry should be added to the issue even if the issue is not editable, because jira.issue.editable set to false or missing. For example, the issue is closed. Only connect app users with admin permissions can use this flag.
     */
    public comAtlassianJiraRestV2IssueIssueWorklogsResourceDeleteWorklogDelete (issueIdOrKey: string, id: string, notifyUsers?: boolean, adjustEstimate?: 'new' | 'leave' | 'manual' | 'auto', newEstimate?: string, increaseBy?: string, overrideEditableFlag?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/issue/{issueIdOrKey}/worklog/{id}'
            .replace('{' + 'issueIdOrKey' + '}', encodeURIComponent(String(issueIdOrKey)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issueIdOrKey' is not null or undefined
        if (issueIdOrKey === null || issueIdOrKey === undefined) {
            throw new Error('Required parameter issueIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueIssueWorklogsResourceDeleteWorklogDelete.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2IssueIssueWorklogsResourceDeleteWorklogDelete.');
        }

        if (notifyUsers !== undefined) {
            localVarQueryParameters['notifyUsers'] = ObjectSerializer.serialize(notifyUsers, "boolean");
        }

        if (adjustEstimate !== undefined) {
            localVarQueryParameters['adjustEstimate'] = ObjectSerializer.serialize(adjustEstimate, "'new' | 'leave' | 'manual' | 'auto'");
        }

        if (newEstimate !== undefined) {
            localVarQueryParameters['newEstimate'] = ObjectSerializer.serialize(newEstimate, "string");
        }

        if (increaseBy !== undefined) {
            localVarQueryParameters['increaseBy'] = ObjectSerializer.serialize(increaseBy, "string");
        }

        if (overrideEditableFlag !== undefined) {
            localVarQueryParameters['overrideEditableFlag'] = ObjectSerializer.serialize(overrideEditableFlag, "boolean");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns all worklogs for an issue.  Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).  **[Permissions](#permissions) required:**  *   _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in. *   If configured, permission to see the issue granted by [issue-level security](https://confluence.atlassian.com/x/J4lKLg).  Only worklogs visible to the user are returned. Visible worklogs are those:  *   that have no visibility restrictions set. *   where the user belongs to the group or has the role visibility is restricted to.
     * @summary Get issue worklogs
     * @param issueIdOrKey The ID or key of the issue.
     * @param startAt The index of the first item to return in a page of results (page offset).
     * @param maxResults The maximum number of items to return per page. The maximum is &#x60;1048576&#x60;.
     * @param expand Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts multiple values separated by a comma:  *   &#x60;properties&#x60; Returns worklog properties.
     */
    public comAtlassianJiraRestV2IssueIssueWorklogsResourceGetIssueWorklogGet (issueIdOrKey: string, startAt?: number, maxResults?: number, expand?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PageOfWorklogs;  }> {
        const localVarPath = this.basePath + '/api/3/issue/{issueIdOrKey}/worklog'
            .replace('{' + 'issueIdOrKey' + '}', encodeURIComponent(String(issueIdOrKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issueIdOrKey' is not null or undefined
        if (issueIdOrKey === null || issueIdOrKey === undefined) {
            throw new Error('Required parameter issueIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueIssueWorklogsResourceGetIssueWorklogGet.');
        }

        if (startAt !== undefined) {
            localVarQueryParameters['startAt'] = ObjectSerializer.serialize(startAt, "number");
        }

        if (maxResults !== undefined) {
            localVarQueryParameters['maxResults'] = ObjectSerializer.serialize(maxResults, "number");
        }

        if (expand !== undefined) {
            localVarQueryParameters['expand'] = ObjectSerializer.serialize(expand, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: PageOfWorklogs;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "PageOfWorklogs");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns a worklog.  Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).  **[Permissions](#permissions) required:**  *   _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in. *   If configured, permission to see the issue granted by [issue-level security](https://confluence.atlassian.com/x/J4lKLg). *   Where the workload has visibility restrictions, the user must be a member of the group or have the role that the visibility of the worklog is restricted to.
     * @summary Get worklog
     * @param issueIdOrKey The ID or key of the issue.
     * @param id The ID of the worklog.
     * @param expand Use [expand](#expansion) to include additional information about work logs in the response. This parameter accepts multiple values separated by a comma:  *   &#x60;properties&#x60; Returns worklog properties.
     */
    public comAtlassianJiraRestV2IssueIssueWorklogsResourceGetWorklogGet (issueIdOrKey: string, id: string, expand?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Worklog;  }> {
        const localVarPath = this.basePath + '/api/3/issue/{issueIdOrKey}/worklog/{id}'
            .replace('{' + 'issueIdOrKey' + '}', encodeURIComponent(String(issueIdOrKey)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issueIdOrKey' is not null or undefined
        if (issueIdOrKey === null || issueIdOrKey === undefined) {
            throw new Error('Required parameter issueIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueIssueWorklogsResourceGetWorklogGet.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2IssueIssueWorklogsResourceGetWorklogGet.');
        }

        if (expand !== undefined) {
            localVarQueryParameters['expand'] = ObjectSerializer.serialize(expand, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Worklog;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Worklog");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Updates a worklog.  Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).  **[Permissions](#permissions) required:**  *   _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in. *   If configured, permission to see the issue granted by [issue-level security](https://confluence.atlassian.com/x/J4lKLg). *   _Edit all worklogs_ [project permission](https://confluence.atlassian.com/x/yodKLg) to update any worklog or _Edit own worklogs_ to update worklogs created by the user. *   Where the workload has visibility restrictions, the user must be a member of the group or have the role that the visibility of the worklog is restricted to.
     * @summary Update worklog
     * @param issueIdOrKey The ID or key the issue.
     * @param id The ID of the worklog.
     * @param worklog
     * @param notifyUsers Indicates whether users watching the issue are notified by email.
     * @param adjustEstimate Defines how to update the issue&#39;s time estimate, the options are:  *   &#x60;new&#x60; Sets the estimate to a specific value, defined in &#x60;newEstimate&#x60;. *   &#x60;leave&#x60; Leaves the estimate unchanged. *   &#x60;auto&#x60; Updates the estimate by the difference between the original and updated value of &#x60;timeSpent&#x60; or &#x60;timeSpentSeconds&#x60;.
     * @param newEstimate The value to set as the issue&#39;s remaining time estimate, as days (#d), hours (#h), or minutes (#m or #). For example, _2d_. Required when &#x60;adjustEstimate&#x60; is &#x60;new&#x60;.
     * @param expand Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts multiple values separated by a comma:  *   &#x60;properties&#x60; Returns worklog properties.
     * @param overrideEditableFlag Indicates whether the worklog should be added to the issue even if the issue is not editable. For example, because the issue is closed. Only connect app users with admin permissions can use this flag.
     */
    public comAtlassianJiraRestV2IssueIssueWorklogsResourceUpdateWorklogPut (issueIdOrKey: string, id: string, worklog: Worklog, notifyUsers?: boolean, adjustEstimate?: 'new' | 'leave' | 'manual' | 'auto', newEstimate?: string, expand?: string, overrideEditableFlag?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Worklog;  }> {
        const localVarPath = this.basePath + '/api/3/issue/{issueIdOrKey}/worklog/{id}'
            .replace('{' + 'issueIdOrKey' + '}', encodeURIComponent(String(issueIdOrKey)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issueIdOrKey' is not null or undefined
        if (issueIdOrKey === null || issueIdOrKey === undefined) {
            throw new Error('Required parameter issueIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueIssueWorklogsResourceUpdateWorklogPut.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2IssueIssueWorklogsResourceUpdateWorklogPut.');
        }

        // verify required parameter 'worklog' is not null or undefined
        if (worklog === null || worklog === undefined) {
            throw new Error('Required parameter worklog was null or undefined when calling comAtlassianJiraRestV2IssueIssueWorklogsResourceUpdateWorklogPut.');
        }

        if (notifyUsers !== undefined) {
            localVarQueryParameters['notifyUsers'] = ObjectSerializer.serialize(notifyUsers, "boolean");
        }

        if (adjustEstimate !== undefined) {
            localVarQueryParameters['adjustEstimate'] = ObjectSerializer.serialize(adjustEstimate, "'new' | 'leave' | 'manual' | 'auto'");
        }

        if (newEstimate !== undefined) {
            localVarQueryParameters['newEstimate'] = ObjectSerializer.serialize(newEstimate, "string");
        }

        if (expand !== undefined) {
            localVarQueryParameters['expand'] = ObjectSerializer.serialize(expand, "string");
        }

        if (overrideEditableFlag !== undefined) {
            localVarQueryParameters['overrideEditableFlag'] = ObjectSerializer.serialize(overrideEditableFlag, "boolean");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(worklog, "Worklog")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Worklog;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Worklog");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Deletes an issue link.  **[Permissions](#permissions) required:**  *   Browse project [project permission](https://confluence.atlassian.com/x/yodKLg) for all the projects containing the issues in the link. *   If configured, permission to see both of the issues granted by [issue-level security](https://confluence.atlassian.com/x/J4lKLg).  *   _Link issues_ [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one of the projects containing issues in the link.
     * @summary Delete issue link
     * @param linkId The ID of the issue link.
     */
    public comAtlassianJiraRestV2IssueLinkIssueResourceDeleteIssueLinkDelete (linkId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/issueLink/{linkId}'
            .replace('{' + 'linkId' + '}', encodeURIComponent(String(linkId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'linkId' is not null or undefined
        if (linkId === null || linkId === undefined) {
            throw new Error('Required parameter linkId was null or undefined when calling comAtlassianJiraRestV2IssueLinkIssueResourceDeleteIssueLinkDelete.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns an issue link.  **[Permissions](#permissions) required:**  *   _Browse project_ [project permission](https://confluence.atlassian.com/x/yodKLg) for all the projects containing the linked issues. *   If configured, permission to see both of the issues granted by [issue-level security](https://confluence.atlassian.com/x/J4lKLg).
     * @summary Get issue link
     * @param linkId The ID of the issue link.
     */
    public comAtlassianJiraRestV2IssueLinkIssueResourceGetIssueLinkGet (linkId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: IssueLink;  }> {
        const localVarPath = this.basePath + '/api/3/issueLink/{linkId}'
            .replace('{' + 'linkId' + '}', encodeURIComponent(String(linkId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'linkId' is not null or undefined
        if (linkId === null || linkId === undefined) {
            throw new Error('Required parameter linkId was null or undefined when calling comAtlassianJiraRestV2IssueLinkIssueResourceGetIssueLinkGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: IssueLink;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "IssueLink");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Creates a link between two issues. Use this operation to indicate a relationship between two issues and optionally add a comment to the from (outward) issue. To use this resource the site must have [Issue Linking](https://confluence.atlassian.com/x/yoXKM) enabled.  This resource returns nothing on the creation of an issue link. To obtain the ID of the issue link, use `https://your-domain.atlassian.net/rest/api/3/issue/[linked issue key]?fields=issuelinks`.  If the link request duplicates an existing link, the response indicates that the issue link was created. If the request included a comment, the comment is added.  **[Permissions](#permissions) required:**  *   _Browse project_ [project permission](https://confluence.atlassian.com/x/yodKLg) for all the projects containing the issues to be linked. *   _Link issues_ [project permission](https://confluence.atlassian.com/x/yodKLg) on the project containing the from (outward) issue. *   If configured, permission to see both of the issues granted by [issue-level security](https://confluence.atlassian.com/x/J4lKLg).  *   when the visibility of a comment included in the link is restricted to a role or group, the user creating the link must be a member of the role or group.
     * @summary Create issue link
     * @param linkIssueRequestJsonBean The issue link request.
     */
    public comAtlassianJiraRestV2IssueLinkIssueResourceLinkIssuesPost (linkIssueRequestJsonBean: LinkIssueRequestJsonBean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/issueLink';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'linkIssueRequestJsonBean' is not null or undefined
        if (linkIssueRequestJsonBean === null || linkIssueRequestJsonBean === undefined) {
            throw new Error('Required parameter linkIssueRequestJsonBean was null or undefined when calling comAtlassianJiraRestV2IssueLinkIssueResourceLinkIssuesPost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(linkIssueRequestJsonBean, "LinkIssueRequestJsonBean")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the list of all issue priorities.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Get priorities
     */
    public comAtlassianJiraRestV2IssuePriorityResourceGetPrioritiesGet (options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Array<Priority>;  }> {
        const localVarPath = this.basePath + '/api/3/priority';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<Priority>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Priority>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns an issue priority.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Get priority
     * @param id The ID of the issue priority.
     */
    public comAtlassianJiraRestV2IssuePriorityResourceGetPriorityGet (id: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Priority;  }> {
        const localVarPath = this.basePath + '/api/3/priority/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2IssuePriorityResourceGetPriorityGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Priority;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Priority");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Creates a project category.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Create project category
     * @param projectCategory
     */
    public comAtlassianJiraRestV2IssueProjectCategoryResourceCreateProjectCategoryPost (projectCategory: ProjectCategory, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: ProjectCategory;  }> {
        const localVarPath = this.basePath + '/api/3/projectCategory';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'projectCategory' is not null or undefined
        if (projectCategory === null || projectCategory === undefined) {
            throw new Error('Required parameter projectCategory was null or undefined when calling comAtlassianJiraRestV2IssueProjectCategoryResourceCreateProjectCategoryPost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(projectCategory, "ProjectCategory")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ProjectCategory;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ProjectCategory");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns all project categories.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Get all project categories
     */
    public comAtlassianJiraRestV2IssueProjectCategoryResourceGetAllProjectCategoriesGet (options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Array<ProjectCategory>;  }> {
        const localVarPath = this.basePath + '/api/3/projectCategory';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<ProjectCategory>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<ProjectCategory>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns a project category.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Get project category by id
     * @param id The ID of the project category.
     */
    public comAtlassianJiraRestV2IssueProjectCategoryResourceGetProjectCategoryByIdGet (id: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: ProjectCategory;  }> {
        const localVarPath = this.basePath + '/api/3/projectCategory/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2IssueProjectCategoryResourceGetProjectCategoryByIdGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ProjectCategory;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ProjectCategory");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Deletes a project category.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Delete project category
     * @param id ID of the project category to delete.
     */
    public comAtlassianJiraRestV2IssueProjectCategoryResourceRemoveProjectCategoryDelete (id: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/projectCategory/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2IssueProjectCategoryResourceRemoveProjectCategoryDelete.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Updates a project category.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Update project category
     * @param id
     * @param projectCategory
     */
    public comAtlassianJiraRestV2IssueProjectCategoryResourceUpdateProjectCategoryPut (id: number, projectCategory: ProjectCategory, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: UpdatedProjectCategory;  }> {
        const localVarPath = this.basePath + '/api/3/projectCategory/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2IssueProjectCategoryResourceUpdateProjectCategoryPut.');
        }

        // verify required parameter 'projectCategory' is not null or undefined
        if (projectCategory === null || projectCategory === undefined) {
            throw new Error('Required parameter projectCategory was null or undefined when calling comAtlassianJiraRestV2IssueProjectCategoryResourceUpdateProjectCategoryPut.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(projectCategory, "ProjectCategory")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: UpdatedProjectCategory;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "UpdatedProjectCategory");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the [issue security scheme](https://confluence.atlassian.com/x/J4lKLg) associated with the project.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg) or the _Administer Projects_ [project permission](https://confluence.atlassian.com/x/yodKLg).
     * @summary Get project issue security scheme
     * @param projectKeyOrId The project ID or project key (case sensitive).
     */
    public comAtlassianJiraRestV2IssueProjectIssueSecurityLevelSchemeResourceGetIssueSecuritySchemeGet (projectKeyOrId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: SecurityScheme;  }> {
        const localVarPath = this.basePath + '/api/3/project/{projectKeyOrId}/issuesecuritylevelscheme'
            .replace('{' + 'projectKeyOrId' + '}', encodeURIComponent(String(projectKeyOrId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'projectKeyOrId' is not null or undefined
        if (projectKeyOrId === null || projectKeyOrId === undefined) {
            throw new Error('Required parameter projectKeyOrId was null or undefined when calling comAtlassianJiraRestV2IssueProjectIssueSecurityLevelSchemeResourceGetIssueSecuritySchemeGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: SecurityScheme;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "SecurityScheme");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns all [project roles](https://confluence.atlassian.com/x/3odKLg) and the details for each role. Note that the list of project roles is common to all projects.
     * @summary Get project role details
     * @param projectIdOrKey The project ID or project key (case sensitive).
     * @param currentMember A boolean indicating if the roles should be filtered to only include those which the authenticated user is a member of.
     */
    public comAtlassianJiraRestV2IssueProjectProjectRoleDetailsResourceGetProjectRoleDetailsGet (projectIdOrKey: string, currentMember?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Array<ProjectRole>;  }> {
        const localVarPath = this.basePath + '/api/3/project/{projectIdOrKey}/roledetails'
            .replace('{' + 'projectIdOrKey' + '}', encodeURIComponent(String(projectIdOrKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'projectIdOrKey' is not null or undefined
        if (projectIdOrKey === null || projectIdOrKey === undefined) {
            throw new Error('Required parameter projectIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueProjectProjectRoleDetailsResourceGetProjectRoleDetailsGet.');
        }

        if (currentMember !== undefined) {
            localVarQueryParameters['currentMember'] = ObjectSerializer.serialize(currentMember, "boolean");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<ProjectRole>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<ProjectRole>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Adds additional actors to a project role for the project.  If you want to replace all actors for the project, then use [Set actors for project role](#api-api-3-project-projectIdOrKey-role-id-put).  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg) or _Administer Projects_ [project permission](https://confluence.atlassian.com/x/yodKLg).
     * @summary Add actors to project role
     * @param projectIdOrKey The project ID or project key (case sensitive).
     * @param id The ID of the project role. Use [Get all project roles](#api-api-3-role-get) to get a list of project role IDs.
     * @param actorsMap The groups or users to associate with the project role for this project. Provide the user account ID or group name.
     */
    public comAtlassianJiraRestV2IssueProjectProjectRoleResourceAddActorUsersPost (projectIdOrKey: string, id: number, actorsMap: ActorsMap, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: ProjectRole;  }> {
        const localVarPath = this.basePath + '/api/3/project/{projectIdOrKey}/role/{id}'
            .replace('{' + 'projectIdOrKey' + '}', encodeURIComponent(String(projectIdOrKey)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'projectIdOrKey' is not null or undefined
        if (projectIdOrKey === null || projectIdOrKey === undefined) {
            throw new Error('Required parameter projectIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueProjectProjectRoleResourceAddActorUsersPost.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2IssueProjectProjectRoleResourceAddActorUsersPost.');
        }

        // verify required parameter 'actorsMap' is not null or undefined
        if (actorsMap === null || actorsMap === undefined) {
            throw new Error('Required parameter actorsMap was null or undefined when calling comAtlassianJiraRestV2IssueProjectProjectRoleResourceAddActorUsersPost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(actorsMap, "ActorsMap")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ProjectRole;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ProjectRole");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Deletes actors from a project role for the project.  If you want to remove default actors from the project role, see the [Delete default actors from project role](#api-api-3-role-id-actors-delete) resource.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg) or _Administer Projects_ [project permission](https://confluence.atlassian.com/x/yodKLg).
     * @summary Delete actors from project role
     * @param projectIdOrKey The project ID or project key (case sensitive).
     * @param id The ID of the project role. Use [Get all project roles](#api-api-3-role-get) to get a list of project role IDs.
     * @param user The user account ID of the user to remove from the project role.
     * @param group The name of the group to remove from the project role.
     */
    public comAtlassianJiraRestV2IssueProjectProjectRoleResourceDeleteActorDelete (projectIdOrKey: string, id: number, user?: string, group?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/project/{projectIdOrKey}/role/{id}'
            .replace('{' + 'projectIdOrKey' + '}', encodeURIComponent(String(projectIdOrKey)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'projectIdOrKey' is not null or undefined
        if (projectIdOrKey === null || projectIdOrKey === undefined) {
            throw new Error('Required parameter projectIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueProjectProjectRoleResourceDeleteActorDelete.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2IssueProjectProjectRoleResourceDeleteActorDelete.');
        }

        if (user !== undefined) {
            localVarQueryParameters['user'] = ObjectSerializer.serialize(user, "string");
        }

        if (group !== undefined) {
            localVarQueryParameters['group'] = ObjectSerializer.serialize(group, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the project role's details and actors associated with the project. The list of actors is sorted by display name.  If you would like to check to see whether a user belongs to a role based on their group memberships, use the [Get user](#api-api-3-user-get) resource with the `groups` expand parameter selected. Then check whether the user keys and groups match with the actors returned for the project.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg) or _Administer Projects_ [project permission](https://confluence.atlassian.com/x/yodKLg).
     * @summary Get project role for project
     * @param projectIdOrKey The project ID or project key (case sensitive).
     * @param id The ID of the project role. Use [Get all project roles](#api-api-3-role-get) to get a list of project role IDs.
     */
    public comAtlassianJiraRestV2IssueProjectProjectRoleResourceGetProjectRoleGet (projectIdOrKey: string, id: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: ProjectRole;  }> {
        const localVarPath = this.basePath + '/api/3/project/{projectIdOrKey}/role/{id}'
            .replace('{' + 'projectIdOrKey' + '}', encodeURIComponent(String(projectIdOrKey)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'projectIdOrKey' is not null or undefined
        if (projectIdOrKey === null || projectIdOrKey === undefined) {
            throw new Error('Required parameter projectIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueProjectProjectRoleResourceGetProjectRoleGet.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2IssueProjectProjectRoleResourceGetProjectRoleGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ProjectRole;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ProjectRole");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns a list of [project roles](https://confluence.atlassian.com/x/3odKLg) for the project returning the name and self URL for each role.  Note that all project roles are shared with all projects in Jira Cloud. See the [Get all project roles](#api-api-3-role-get) resource for more information.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg) or _Administer Projects_ [project permission](https://confluence.atlassian.com/x/yodKLg).
     * @summary Get project roles for project
     * @param projectIdOrKey The project ID or project key (case sensitive).
     */
    public comAtlassianJiraRestV2IssueProjectProjectRoleResourceGetProjectRolesGet (projectIdOrKey: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: { [key: string]: string; };  }> {
        const localVarPath = this.basePath + '/api/3/project/{projectIdOrKey}/role'
            .replace('{' + 'projectIdOrKey' + '}', encodeURIComponent(String(projectIdOrKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'projectIdOrKey' is not null or undefined
        if (projectIdOrKey === null || projectIdOrKey === undefined) {
            throw new Error('Required parameter projectIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueProjectProjectRoleResourceGetProjectRolesGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: { [key: string]: string; };  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "{ [key: string]: string; }");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Associates actors with the project role for the project, replacing all existing actors.  If you want to add actors to the project without overwriting the existing list, then use [Add actors to project role](#api-api-3-project-projectIdOrKey-role-id-post).  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg) or _Administer Projects_ [project permission](https://confluence.atlassian.com/x/yodKLg).
     * @summary Set actors for project role
     * @param projectIdOrKey The project ID or project key (case sensitive).
     * @param id The ID of the project role. Use [Get all project roles](#api-api-3-role-get) to get a list of project role IDs.
     * @param projectRoleActorsUpdateBean The groups or users to associate with the project role for this project. Provide the user account ID or group name.
     */
    public comAtlassianJiraRestV2IssueProjectProjectRoleResourceSetActorsPut (projectIdOrKey: string, id: number, projectRoleActorsUpdateBean: ProjectRoleActorsUpdateBean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: ProjectRole;  }> {
        const localVarPath = this.basePath + '/api/3/project/{projectIdOrKey}/role/{id}'
            .replace('{' + 'projectIdOrKey' + '}', encodeURIComponent(String(projectIdOrKey)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'projectIdOrKey' is not null or undefined
        if (projectIdOrKey === null || projectIdOrKey === undefined) {
            throw new Error('Required parameter projectIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueProjectProjectRoleResourceSetActorsPut.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2IssueProjectProjectRoleResourceSetActorsPut.');
        }

        // verify required parameter 'projectRoleActorsUpdateBean' is not null or undefined
        if (projectRoleActorsUpdateBean === null || projectRoleActorsUpdateBean === undefined) {
            throw new Error('Required parameter projectRoleActorsUpdateBean was null or undefined when calling comAtlassianJiraRestV2IssueProjectProjectRoleResourceSetActorsPut.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(projectRoleActorsUpdateBean, "ProjectRoleActorsUpdateBean")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ProjectRole;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ProjectRole");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Removes the [property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties) from the project.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Delete project property
     * @param projectIdOrKey The project ID or project key (case sensitive).
     * @param propertyKey The project property key. Use [Get project property keys](#api-api-3-project-projectIdOrKey-properties-get) to get a list of all project property keys.
     */
    public comAtlassianJiraRestV2IssueProjectPropertyResourceDeleteProjectPropertyDelete (projectIdOrKey: string, propertyKey: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/project/{projectIdOrKey}/properties/{propertyKey}'
            .replace('{' + 'projectIdOrKey' + '}', encodeURIComponent(String(projectIdOrKey)))
            .replace('{' + 'propertyKey' + '}', encodeURIComponent(String(propertyKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'projectIdOrKey' is not null or undefined
        if (projectIdOrKey === null || projectIdOrKey === undefined) {
            throw new Error('Required parameter projectIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueProjectPropertyResourceDeleteProjectPropertyDelete.');
        }

        // verify required parameter 'propertyKey' is not null or undefined
        if (propertyKey === null || propertyKey === undefined) {
            throw new Error('Required parameter propertyKey was null or undefined when calling comAtlassianJiraRestV2IssueProjectPropertyResourceDeleteProjectPropertyDelete.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the value of the [project property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).  **[Permissions](#permissions) required:** _Browse Projects_ [project permission](https://confluence.atlassian.com/x/yodKLg).
     * @summary Get project property
     * @param projectIdOrKey The project ID or project key (case sensitive).
     * @param propertyKey The project property key. Use [Get project property keys](#api-api-3-project-projectIdOrKey-properties-get) to get a list of all project property keys.
     */
    public comAtlassianJiraRestV2IssueProjectPropertyResourceGetProjectPropertyGet (projectIdOrKey: string, propertyKey: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: EntityProperty;  }> {
        const localVarPath = this.basePath + '/api/3/project/{projectIdOrKey}/properties/{propertyKey}'
            .replace('{' + 'projectIdOrKey' + '}', encodeURIComponent(String(projectIdOrKey)))
            .replace('{' + 'propertyKey' + '}', encodeURIComponent(String(propertyKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'projectIdOrKey' is not null or undefined
        if (projectIdOrKey === null || projectIdOrKey === undefined) {
            throw new Error('Required parameter projectIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueProjectPropertyResourceGetProjectPropertyGet.');
        }

        // verify required parameter 'propertyKey' is not null or undefined
        if (propertyKey === null || propertyKey === undefined) {
            throw new Error('Required parameter propertyKey was null or undefined when calling comAtlassianJiraRestV2IssueProjectPropertyResourceGetProjectPropertyGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: EntityProperty;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "EntityProperty");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns all [project property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties) keys for the project.  **[Permissions](#permissions) required:** _Browse Projects_ [project permission](https://confluence.atlassian.com/x/yodKLg).
     * @summary Get project property keys
     * @param projectIdOrKey The project ID or project key (case sensitive).
     */
    public comAtlassianJiraRestV2IssueProjectPropertyResourceGetProjectPropertyKeysGet (projectIdOrKey: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PropertyKeys;  }> {
        const localVarPath = this.basePath + '/api/3/project/{projectIdOrKey}/properties'
            .replace('{' + 'projectIdOrKey' + '}', encodeURIComponent(String(projectIdOrKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'projectIdOrKey' is not null or undefined
        if (projectIdOrKey === null || projectIdOrKey === undefined) {
            throw new Error('Required parameter projectIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueProjectPropertyResourceGetProjectPropertyKeysGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: PropertyKeys;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "PropertyKeys");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Sets the value of the [project property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties). You can use project properties to store custom data against the project.  The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg) or _Administer Projects_ [project permission](https://confluence.atlassian.com/x/yodKLg).
     * @summary Set project property
     * @param projectIdOrKey The project ID or project key (case sensitive).
     * @param propertyKey The key of the project property. The maximum length is 255 characters.
     * @param body
     */
    public comAtlassianJiraRestV2IssueProjectPropertyResourceSetProjectPropertyPut (projectIdOrKey: string, propertyKey: string, body: any, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/project/{projectIdOrKey}/properties/{propertyKey}'
            .replace('{' + 'projectIdOrKey' + '}', encodeURIComponent(String(projectIdOrKey)))
            .replace('{' + 'propertyKey' + '}', encodeURIComponent(String(propertyKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'projectIdOrKey' is not null or undefined
        if (projectIdOrKey === null || projectIdOrKey === undefined) {
            throw new Error('Required parameter projectIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueProjectPropertyResourceSetProjectPropertyPut.');
        }

        // verify required parameter 'propertyKey' is not null or undefined
        if (propertyKey === null || propertyKey === undefined) {
            throw new Error('Required parameter propertyKey was null or undefined when calling comAtlassianJiraRestV2IssueProjectPropertyResourceSetProjectPropertyPut.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling comAtlassianJiraRestV2IssueProjectPropertyResourceSetProjectPropertyPut.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "any")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Loads an avatar for a project.  Specify the avatar's local file location in the body of the request. Also, include the following headers:  *   `X-Atlassian-Token: no-check` To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers). *   `Content-Type: image/_image type_` Valid image types are JPEG, GIF, or PNG.  For example:   `curl --request POST `  `--user email@example.com:<api_token> `  `--header 'X-Atlassian-Token: no-check' `  `--header 'Content-Type: image/< image_type>' `  `--data-binary \"<@/path/to/file/with/your/avatar>\" `  `--url 'https://your-domain.atlassian.net/rest/api/3/project/{projectIdOrKey}/avatar2'`  The avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square's sides is set to the smaller of the height or width of the image.  The cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.  After creating the avatar use [Set project avatar](#api-api-3-project-projectIdOrKey-avatar-put) to set it as the project's displayed avatar.  **[Permissions](#permissions) required:** _Administer projects_ [project permission](https://confluence.atlassian.com/x/yodKLg).
     * @summary Load project avatar
     * @param projectIdOrKey The ID or (case-sensitive) key of the project.
     * @param body
     * @param x The X coordinate of the top-left corner of the crop region.
     * @param y The Y coordinate of the top-left corner of the crop region.
     * @param size The length of each side of the crop region.
     */
    public comAtlassianJiraRestV2IssueProjectResourceCreateProjectAvatarPost (projectIdOrKey: string, body: any, x?: number, y?: number, size?: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Avatar;  }> {
        const localVarPath = this.basePath + '/api/3/project/{projectIdOrKey}/avatar2'
            .replace('{' + 'projectIdOrKey' + '}', encodeURIComponent(String(projectIdOrKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'projectIdOrKey' is not null or undefined
        if (projectIdOrKey === null || projectIdOrKey === undefined) {
            throw new Error('Required parameter projectIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueProjectResourceCreateProjectAvatarPost.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling comAtlassianJiraRestV2IssueProjectResourceCreateProjectAvatarPost.');
        }

        if (x !== undefined) {
            localVarQueryParameters['x'] = ObjectSerializer.serialize(x, "number");
        }

        if (y !== undefined) {
            localVarQueryParameters['y'] = ObjectSerializer.serialize(y, "number");
        }

        if (size !== undefined) {
            localVarQueryParameters['size'] = ObjectSerializer.serialize(size, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "any")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Avatar;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Avatar");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Creates a project based on a project type template, as shown in the following table:  | Project Type Key | Project Template Key | | --- | --- | | `business` | `com.atlassian.jira-core-project-templates:jira-core-simplified-content-management`, `com.atlassian.jira-core-project-templates:jira-core-simplified-document-approval`, `com.atlassian.jira-core-project-templates:jira-core-simplified-lead-tracking`, `com.atlassian.jira-core-project-templates:jira-core-simplified-process-control`, `com.atlassian.jira-core-project-templates:jira-core-simplified-procurement`, `com.atlassian.jira-core-project-templates:jira-core-simplified-project-management`, `com.atlassian.jira-core-project-templates:jira-core-simplified-recruitment`, `com.atlassian.jira-core-project-templates:jira-core-simplified-task-tracking` | | `service_desk` | `com.atlassian.servicedesk:simplified-it-service-desk`, `com.atlassian.servicedesk:simplified-internal-service-desk`, `com.atlassian.servicedesk:simplified-external-service-desk` | | `software` | `com.pyxis.greenhopper.jira:gh-simplified-agility-kanban`, `com.pyxis.greenhopper.jira:gh-simplified-agility-scrum`, `com.pyxis.greenhopper.jira:gh-simplified-basic`, `com.pyxis.greenhopper.jira:gh-simplified-kanban-classic`, `com.pyxis.greenhopper.jira:gh-simplified-scrum-classic` | | `ops` | `com.atlassian.jira.jira-incident-management-plugin:im-incident-management` |  The project types are available according to the installed Jira features as follows:  *   Jira Core, the default, enables `business` projects. *   Jira Service Desk enables `service_desk` projects. *   Jira Software enables `software` projects. *   Jira Ops enables `ops` projects.Jira  To determine which features are installed, go to **Jira settings** \\> **Apps** \\> **Manage apps** and review the System Apps list. To add JIRA Software or JIRA Service Desk into a JIRA instance, use **Jira settings** \\> **Apps** \\> **Finding new apps**. For more information, see [Managing add-ons](https://confluence.atlassian.com/x/S31NLg). To enable Jira Ops, see [Jira Ops](https://www.atlassian.com/software/jira/ops).  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Create project
     * @param projectInputBean The JSON representation of the project being created.
     */
    public comAtlassianJiraRestV2IssueProjectResourceCreateProjectPost (projectInputBean: ProjectInputBean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: ProjectIdentifiers;  }> {
        const localVarPath = this.basePath + '/api/3/project';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'projectInputBean' is not null or undefined
        if (projectInputBean === null || projectInputBean === undefined) {
            throw new Error('Required parameter projectInputBean was null or undefined when calling comAtlassianJiraRestV2IssueProjectResourceCreateProjectPost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(projectInputBean, "ProjectInputBean")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ProjectIdentifiers;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ProjectIdentifiers");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Deletes a custom avatar from a project. Note that system avatars cannot be deleted.  **[Permissions](#permissions) required:** _Administer projects_ [project permission](https://confluence.atlassian.com/x/yodKLg).
     * @summary Delete project avatar
     * @param projectIdOrKey The project ID or (case-sensitive) key.
     * @param id The ID of the avatar.
     */
    public comAtlassianJiraRestV2IssueProjectResourceDeleteProjectAvatarDelete (projectIdOrKey: string, id: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/project/{projectIdOrKey}/avatar/{id}'
            .replace('{' + 'projectIdOrKey' + '}', encodeURIComponent(String(projectIdOrKey)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'projectIdOrKey' is not null or undefined
        if (projectIdOrKey === null || projectIdOrKey === undefined) {
            throw new Error('Required parameter projectIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueProjectResourceDeleteProjectAvatarDelete.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2IssueProjectResourceDeleteProjectAvatarDelete.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Deletes a project.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Delete project
     * @param projectIdOrKey The project ID or project key (case sensitive).
     */
    public comAtlassianJiraRestV2IssueProjectResourceDeleteProjectDelete (projectIdOrKey: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/project/{projectIdOrKey}'
            .replace('{' + 'projectIdOrKey' + '}', encodeURIComponent(String(projectIdOrKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'projectIdOrKey' is not null or undefined
        if (projectIdOrKey === null || projectIdOrKey === undefined) {
            throw new Error('Required parameter projectIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueProjectResourceDeleteProjectDelete.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns all project avatars, grouped by system and custom avatars.  **[Permissions](#permissions) required:** _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg).
     * @summary Get all project avatars
     * @param projectIdOrKey The ID or (case-sensitive) key of the project.
     */
    public comAtlassianJiraRestV2IssueProjectResourceGetAllProjectAvatarsGet (projectIdOrKey: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: ProjectAvatars;  }> {
        const localVarPath = this.basePath + '/api/3/project/{projectIdOrKey}/avatars'
            .replace('{' + 'projectIdOrKey' + '}', encodeURIComponent(String(projectIdOrKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'projectIdOrKey' is not null or undefined
        if (projectIdOrKey === null || projectIdOrKey === undefined) {
            throw new Error('Required parameter projectIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueProjectResourceGetAllProjectAvatarsGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ProjectAvatars;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ProjectAvatars");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns all projects visible to the currently logged in user. Deprecated, use [Get projects paginated](#api-api-3-project-search-get) that supports search and pagination.  For projects to be visible, the authenticated user must be granted either _Browse projects_ or _Administer projects_ permissions. If no user is logged in, it returns all projects that are visible for anonymous users.  **[Permissions](#permissions) required:** _Browse Projects_ [project permission](https://confluence.atlassian.com/x/yodKLg).
     * @summary Get all projects
     * @param expand Use [expand](#expansion) to include additional information in the response. This parameter accepts multiple values separated by a comma:  *   &#x60;description&#x60; Returns the project description. *   &#x60;issueTypes&#x60; Returns all issue types associated with the project. *   &#x60;lead&#x60; Returns information about the the project lead. *   &#x60;projectKeys&#x60; Returns all project keys associated with the project.
     * @param recent Returns the most recently accessed projects for the current user. You may specify the number of results to return up to a maximum of 20. If no user is logged in, then the recently accessed projects will be returned based on the current HTTP session.
     */
    public comAtlassianJiraRestV2IssueProjectResourceGetAllProjectsGet (expand?: string, recent?: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Array<Project>;  }> {
        const localVarPath = this.basePath + '/api/3/project';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (expand !== undefined) {
            localVarQueryParameters['expand'] = ObjectSerializer.serialize(expand, "string");
        }

        if (recent !== undefined) {
            localVarQueryParameters['recent'] = ObjectSerializer.serialize(recent, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<Project>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Project>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the valid statuses for a project. The statuses are grouped by issue type, as each project has a set of valid issue types and each issue type has a set of valid statuses.  **[Permissions](#permissions) required:** _Browse Projects_ [project permission](https://confluence.atlassian.com/x/yodKLg).
     * @summary Get all statuses for project
     * @param projectIdOrKey The project ID or project key (case sensitive).
     */
    public comAtlassianJiraRestV2IssueProjectResourceGetAllStatusesGet (projectIdOrKey: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Array<IssueTypeWithStatus>;  }> {
        const localVarPath = this.basePath + '/api/3/project/{projectIdOrKey}/statuses'
            .replace('{' + 'projectIdOrKey' + '}', encodeURIComponent(String(projectIdOrKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'projectIdOrKey' is not null or undefined
        if (projectIdOrKey === null || projectIdOrKey === undefined) {
            throw new Error('Required parameter projectIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueProjectResourceGetAllStatusesGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<IssueTypeWithStatus>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<IssueTypeWithStatus>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns all components in a project. See the [Get project components paginated](#api-api-3-project-projectIdOrKey-component-get) resource if you want to get a full list of components with pagination.  **[Permissions](#permissions) required:** _Browse Projects_ [project permission](https://confluence.atlassian.com/x/yodKLg).
     * @summary Get project components
     * @param projectIdOrKey The project ID or project key (case sensitive).
     */
    public comAtlassianJiraRestV2IssueProjectResourceGetProjectComponentsGet (projectIdOrKey: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Array<Component>;  }> {
        const localVarPath = this.basePath + '/api/3/project/{projectIdOrKey}/components'
            .replace('{' + 'projectIdOrKey' + '}', encodeURIComponent(String(projectIdOrKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'projectIdOrKey' is not null or undefined
        if (projectIdOrKey === null || projectIdOrKey === undefined) {
            throw new Error('Required parameter projectIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueProjectResourceGetProjectComponentsGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<Component>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Component>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns a [paginated](#pagination) representation of all components existing in a single project. See the [Get project components](#api-api-3-project-projectIdOrKey-components-get) resource if you want to get a full list of versions without pagination.  **[Permissions](#permissions) required:** _Browse Projects_ [project permission](https://confluence.atlassian.com/x/yodKLg).
     * @summary Get project components paginated
     * @param projectIdOrKey The project ID or project key (case sensitive).
     * @param startAt The index of the first item to return in a page of results (page offset).
     * @param maxResults The maximum number of items to return per page. The maximum is &#x60;50&#x60;.
     * @param orderBy [Order](#ordering) the results by a particular field:  *   &#x60;description&#x60; Sorts components in alphabetical order by description. *   &#x60;issueCount&#x60; Sorts components by the count of issues associated with the component in ascending order. *   &#x60;lead&#x60; Sorts by the project lead&#39;s user key in alphabetical order. *   &#x60;name&#x60; Sorts components in alphabetical order by component name.
     * @param query Filter the results using a literal string. Components with a matching &#x60;name&#x60; or &#x60;description&#x60; are returned (case insensitive).
     */
    public comAtlassianJiraRestV2IssueProjectResourceGetProjectComponentsPaginatedGet (projectIdOrKey: string, startAt?: number, maxResults?: number, orderBy?: 'description' | '-description' | '+description' | 'issueCount' | '-issueCount' | '+issueCount' | 'lead' | '-lead' | '+lead' | 'name' | '-name' | '+name', query?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PageOfComponentWithIssueCount;  }> {
        const localVarPath = this.basePath + '/api/3/project/{projectIdOrKey}/component'
            .replace('{' + 'projectIdOrKey' + '}', encodeURIComponent(String(projectIdOrKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'projectIdOrKey' is not null or undefined
        if (projectIdOrKey === null || projectIdOrKey === undefined) {
            throw new Error('Required parameter projectIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueProjectResourceGetProjectComponentsPaginatedGet.');
        }

        if (startAt !== undefined) {
            localVarQueryParameters['startAt'] = ObjectSerializer.serialize(startAt, "number");
        }

        if (maxResults !== undefined) {
            localVarQueryParameters['maxResults'] = ObjectSerializer.serialize(maxResults, "number");
        }

        if (orderBy !== undefined) {
            localVarQueryParameters['orderBy'] = ObjectSerializer.serialize(orderBy, "'description' | '-description' | '+description' | 'issueCount' | '-issueCount' | '+issueCount' | 'lead' | '-lead' | '+lead' | 'name' | '-name' | '+name'");
        }

        if (query !== undefined) {
            localVarQueryParameters['query'] = ObjectSerializer.serialize(query, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: PageOfComponentWithIssueCount;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "PageOfComponentWithIssueCount");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the [project details](https://confluence.atlassian.com/x/ahLpNw) for the specified project.  **[Permissions](#permissions) required:** _Browse Projects_ [project permission](https://confluence.atlassian.com/x/yodKLg).
     * @summary Get project
     * @param projectIdOrKey The project ID or project key (case sensitive).
     * @param expand Use [expand](#expansion) to include additional information in the response. This parameter accepts multiple values separated by a comma. Note that the project description, issue types, and project lead are included in all responses by default:  *   &#x60;description&#x60; The project description. *   &#x60;issueTypes&#x60; The issue types associated with the project. *   &#x60;lead&#x60; The project lead. *   &#x60;projectKeys&#x60; All project keys associated with the project.
     */
    public comAtlassianJiraRestV2IssueProjectResourceGetProjectGet (projectIdOrKey: string, expand?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Project;  }> {
        const localVarPath = this.basePath + '/api/3/project/{projectIdOrKey}'
            .replace('{' + 'projectIdOrKey' + '}', encodeURIComponent(String(projectIdOrKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'projectIdOrKey' is not null or undefined
        if (projectIdOrKey === null || projectIdOrKey === undefined) {
            throw new Error('Required parameter projectIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueProjectResourceGetProjectGet.');
        }

        if (expand !== undefined) {
            localVarQueryParameters['expand'] = ObjectSerializer.serialize(expand, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Project;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Project");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns all versions existing in a project. The response is not paginated. Use [Get project versions paginated](#api-api-3-project-projectIdOrKey-version-get) if you want to get the versions in a project with pagination.  **[Permissions](#permissions) required:** _Browse Projects_ [project permission](https://confluence.atlassian.com/x/yodKLg).
     * @summary Get project versions
     * @param projectIdOrKey The project ID or project key (case sensitive).
     * @param expand Use [expand](#expansion) to include additional information in the response. This parameter accepts multiple values separated by a comma:  *   &#x60;operations&#x60; Returns actions that can be performed on the specified version.
     */
    public comAtlassianJiraRestV2IssueProjectResourceGetProjectVersionsGet (projectIdOrKey: string, expand?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Array<Version>;  }> {
        const localVarPath = this.basePath + '/api/3/project/{projectIdOrKey}/versions'
            .replace('{' + 'projectIdOrKey' + '}', encodeURIComponent(String(projectIdOrKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'projectIdOrKey' is not null or undefined
        if (projectIdOrKey === null || projectIdOrKey === undefined) {
            throw new Error('Required parameter projectIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueProjectResourceGetProjectVersionsGet.');
        }

        if (expand !== undefined) {
            localVarQueryParameters['expand'] = ObjectSerializer.serialize(expand, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<Version>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Version>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns a [paginated](#pagination) representation of all versions in a project. See the [Get project versions](#api-api-3-project-projectIdOrKey-versions-get) resource if you want to get a full list of versions without pagination.  **[Permissions](#permissions) required:** _Browse Projects_ [project permission](https://confluence.atlassian.com/x/yodKLg).
     * @summary Get project versions paginated
     * @param projectIdOrKey The project ID or project key (case sensitive).
     * @param startAt The index of the first item to return in a page of results (page offset).
     * @param maxResults The maximum number of items to return per page. The maximum is &#x60;50&#x60;.
     * @param orderBy [Order](#ordering) the results by a particular field:  *   &#x60;description&#x60; Sorts versions in alphabetical order by description. *   &#x60;name&#x60; Sorts versions in alphabetical order by version name. *   &#x60;releaseDate&#x60; Sorts versions in order by release date, starting with the oldest date. Versions with no release date are listed last. *   &#x60;sequence&#x60; Sorts versions by the order of appearance in the user interface. *   &#x60;startDate&#x60; Sorts versions in order by start date, starting with the oldest date. Versions with no start date are listed last.
     * @param query Filter the results using a literal string. Versions with matching &#x60;name&#x60; or &#x60;description&#x60; are returned (case insensitive).
     * @param status A comma-separated list of status values used to filter the results by version status. The status values are &#x60;released&#x60;, &#x60;unreleased&#x60;, and &#x60;archived&#x60;.
     * @param expand Use [expand](#expansion) to include additional information in the response. This parameter accepts multiple values separated by a comma:  *   &#x60;issuesstatus&#x60; Returns the number of issues in each status category for each version. *   &#x60;operations&#x60; Returns actions that can be performed on the specified version. *   &#x60;remotelinks&#x60; Returns remote version links.
     */
    public comAtlassianJiraRestV2IssueProjectResourceGetProjectVersionsPaginatedGet (projectIdOrKey: string, startAt?: number, maxResults?: number, orderBy?: 'description' | '-description' | '+description' | 'name' | '-name' | '+name' | 'releaseDate' | '-releaseDate' | '+releaseDate' | 'sequence' | '-sequence' | '+sequence' | 'startDate' | '-startDate' | '+startDate', query?: string, status?: string, expand?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PageOfVersion;  }> {
        const localVarPath = this.basePath + '/api/3/project/{projectIdOrKey}/version'
            .replace('{' + 'projectIdOrKey' + '}', encodeURIComponent(String(projectIdOrKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'projectIdOrKey' is not null or undefined
        if (projectIdOrKey === null || projectIdOrKey === undefined) {
            throw new Error('Required parameter projectIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueProjectResourceGetProjectVersionsPaginatedGet.');
        }

        if (startAt !== undefined) {
            localVarQueryParameters['startAt'] = ObjectSerializer.serialize(startAt, "number");
        }

        if (maxResults !== undefined) {
            localVarQueryParameters['maxResults'] = ObjectSerializer.serialize(maxResults, "number");
        }

        if (orderBy !== undefined) {
            localVarQueryParameters['orderBy'] = ObjectSerializer.serialize(orderBy, "'description' | '-description' | '+description' | 'name' | '-name' | '+name' | 'releaseDate' | '-releaseDate' | '+releaseDate' | 'sequence' | '-sequence' | '+sequence' | 'startDate' | '-startDate' | '+startDate'");
        }

        if (query !== undefined) {
            localVarQueryParameters['query'] = ObjectSerializer.serialize(query, "string");
        }

        if (status !== undefined) {
            localVarQueryParameters['status'] = ObjectSerializer.serialize(status, "string");
        }

        if (expand !== undefined) {
            localVarQueryParameters['expand'] = ObjectSerializer.serialize(expand, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: PageOfVersion;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "PageOfVersion");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns projects visible to the currently logged in user. For projects to be visible, the authenticated user must be granted either _Browse projects_ or _Administer projects_ permissions. If no user is logged in, then all projects visible to anonymous users are returned.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Get projects paginated
     * @param startAt The index of the first item to return in a page of results (page offset).
     * @param maxResults The maximum number of items to return per page. The maximum is &#x60;50&#x60;.
     * @param orderBy [Order](#ordering) the results by a particular field. If the &#x60;orderBy&#x60; field is not set, then projects are listed in ascending order by project key:  *   &#x60;category&#x60; Sorts projects in order by project category. A complete list of category IDs can be found using the [Get all project categories](#api-api-3-projectCategory-get) resource. *   &#x60;key&#x60; Sorts projects in order by project key. *   &#x60;name&#x60; Sorts projects in alphabetical order by project name. *   &#x60;owner&#x60; Sorts projects in order by the project lead.
     * @param query Filter the results using a literal string. Projects with a matching &#x60;key&#x60; or &#x60;name&#x60; are returned (case insensitive).
     * @param typeKey Orders results by the [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes). This parameter accepts multiple values separated by a comma. Valid values are &#x60;business&#x60;, &#x60;ops&#x60;, &#x60;service_desk&#x60;, and &#x60;software&#x60;.
     * @param categoryId The ID of the project&#39;s category. A complete list of category IDs can be found using the [Get all project categories](#api-api-3-projectCategory-get) resource.
     * @param action Filter results by projects for which the calling user has permission to perform the given action. The &#x60;view&#x60; action corresponds with the _Browse projects_ project permission, and the &#x60;edit&#x60; action corresponds with _Administer project_ permissions.
     * @param expand Use [expand](#expansion) to include additional information in the response. This parameter accepts multiple values separated by a comma:  *   &#x60;description&#x60; Returns the project description. *   &#x60;projectKeys&#x60; Returns all project keys associated with a project. *   &#x60;lead&#x60; Returns information about the the project lead. *   &#x60;issueTypes&#x60; Returns all issue types associated with the project. *   &#x60;url&#x60; Returns the URL associated with the project.
     */
    public comAtlassianJiraRestV2IssueProjectResourceSearchProjectsGet (startAt?: number, maxResults?: number, orderBy?: 'category' | '-category' | '+category' | 'key' | '-key' | '+key' | 'name' | '-name' | '+name' | 'owner' | '-owner' | '+owner', query?: string, typeKey?: string, categoryId?: number, action?: 'view' | 'edit', expand?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PageOfProject;  }> {
        const localVarPath = this.basePath + '/api/3/project/search';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (startAt !== undefined) {
            localVarQueryParameters['startAt'] = ObjectSerializer.serialize(startAt, "number");
        }

        if (maxResults !== undefined) {
            localVarQueryParameters['maxResults'] = ObjectSerializer.serialize(maxResults, "number");
        }

        if (orderBy !== undefined) {
            localVarQueryParameters['orderBy'] = ObjectSerializer.serialize(orderBy, "'category' | '-category' | '+category' | 'key' | '-key' | '+key' | 'name' | '-name' | '+name' | 'owner' | '-owner' | '+owner'");
        }

        if (query !== undefined) {
            localVarQueryParameters['query'] = ObjectSerializer.serialize(query, "string");
        }

        if (typeKey !== undefined) {
            localVarQueryParameters['typeKey'] = ObjectSerializer.serialize(typeKey, "string");
        }

        if (categoryId !== undefined) {
            localVarQueryParameters['categoryId'] = ObjectSerializer.serialize(categoryId, "number");
        }

        if (action !== undefined) {
            localVarQueryParameters['action'] = ObjectSerializer.serialize(action, "'view' | 'edit'");
        }

        if (expand !== undefined) {
            localVarQueryParameters['expand'] = ObjectSerializer.serialize(expand, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: PageOfProject;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "PageOfProject");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Sets the avatar displayed for a project.  Use [Load project avatar](#api-api-3-project-projectIdOrKey-avatar2-post) to store avatars against the project, before using this operation to set the displayed avatar.  **[Permissions](#permissions) required:** _Administer projects_ [project permission](https://confluence.atlassian.com/x/yodKLg).
     * @summary Set project avatar
     * @param projectIdOrKey The ID or (case-sensitive) key of the project.
     * @param avatar
     */
    public comAtlassianJiraRestV2IssueProjectResourceUpdateProjectAvatarPut (projectIdOrKey: string, avatar: Avatar, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/project/{projectIdOrKey}/avatar'
            .replace('{' + 'projectIdOrKey' + '}', encodeURIComponent(String(projectIdOrKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'projectIdOrKey' is not null or undefined
        if (projectIdOrKey === null || projectIdOrKey === undefined) {
            throw new Error('Required parameter projectIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueProjectResourceUpdateProjectAvatarPut.');
        }

        // verify required parameter 'avatar' is not null or undefined
        if (avatar === null || avatar === undefined) {
            throw new Error('Required parameter avatar was null or undefined when calling comAtlassianJiraRestV2IssueProjectResourceUpdateProjectAvatarPut.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(avatar, "Avatar")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Updates the [project details](https://confluence.atlassian.com/x/ahLpNw) of a project.  All parameters are optional in the body of the request.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Update project
     * @param projectIdOrKey The project ID or project key (case sensitive).
     * @param projectInputBean The project details to be updated.
     * @param expand Use [expand](#expansion) to include additional information in the response. This parameter accepts multiple values separated by a comma. Note that the project description, issue types, and project lead are included in all responses by default:  *   &#x60;description&#x60; The project description. *   &#x60;issueTypes&#x60; The issue types associated with the project. *   &#x60;lead&#x60; The project lead. *   &#x60;projectKeys&#x60; All project keys associated with the project.
     */
    public comAtlassianJiraRestV2IssueProjectResourceUpdateProjectPut (projectIdOrKey: string, projectInputBean: ProjectInputBean, expand?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Project;  }> {
        const localVarPath = this.basePath + '/api/3/project/{projectIdOrKey}'
            .replace('{' + 'projectIdOrKey' + '}', encodeURIComponent(String(projectIdOrKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'projectIdOrKey' is not null or undefined
        if (projectIdOrKey === null || projectIdOrKey === undefined) {
            throw new Error('Required parameter projectIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueProjectResourceUpdateProjectPut.');
        }

        // verify required parameter 'projectInputBean' is not null or undefined
        if (projectInputBean === null || projectInputBean === undefined) {
            throw new Error('Required parameter projectInputBean was null or undefined when calling comAtlassianJiraRestV2IssueProjectResourceUpdateProjectPut.');
        }

        if (expand !== undefined) {
            localVarQueryParameters['expand'] = ObjectSerializer.serialize(expand, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(projectInputBean, "ProjectInputBean")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Project;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Project");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Updates a [project type](https://confluence.atlassian.com/x/GwiiLQ). The project type can be updated for classic projects only, project type cannot be updated for next-gen projects.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Update project type
     * @param projectIdOrKey The project ID or project key (case sensitive).
     * @param newProjectTypeKey The key of the new project type.
     */
    public comAtlassianJiraRestV2IssueProjectResourceUpdateProjectTypePut (projectIdOrKey: string, newProjectTypeKey: 'business' | 'ops' | 'service_desk' | 'software', options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Project;  }> {
        const localVarPath = this.basePath + '/api/3/project/{projectIdOrKey}/type/{newProjectTypeKey}'
            .replace('{' + 'projectIdOrKey' + '}', encodeURIComponent(String(projectIdOrKey)))
            .replace('{' + 'newProjectTypeKey' + '}', encodeURIComponent(String(newProjectTypeKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'projectIdOrKey' is not null or undefined
        if (projectIdOrKey === null || projectIdOrKey === undefined) {
            throw new Error('Required parameter projectIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueProjectResourceUpdateProjectTypePut.');
        }

        // verify required parameter 'newProjectTypeKey' is not null or undefined
        if (newProjectTypeKey === null || newProjectTypeKey === undefined) {
            throw new Error('Required parameter newProjectTypeKey was null or undefined when calling comAtlassianJiraRestV2IssueProjectResourceUpdateProjectTypePut.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Project;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Project");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Adds [default actors](#api-api-3-resolution-get) to the given role. You may add either groups or users, but you cannot add groups and users in the same request.  Changing a project role's default actors does not affect project role members for projects already created.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Add default actors to project role
     * @param id The ID of the project role. Use [Get all project roles](#api-api-3-role-get) to get a list of project role IDs.
     * @param actorInputBean
     */
    public comAtlassianJiraRestV2IssueProjectRoleResourceAddProjectRoleActorsToRolePost (id: number, actorInputBean: ActorInputBean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: ProjectRole;  }> {
        const localVarPath = this.basePath + '/api/3/role/{id}/actors'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2IssueProjectRoleResourceAddProjectRoleActorsToRolePost.');
        }

        // verify required parameter 'actorInputBean' is not null or undefined
        if (actorInputBean === null || actorInputBean === undefined) {
            throw new Error('Required parameter actorInputBean was null or undefined when calling comAtlassianJiraRestV2IssueProjectRoleResourceAddProjectRoleActorsToRolePost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(actorInputBean, "ActorInputBean")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ProjectRole;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ProjectRole");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Creates a new project role with no [default actors](#api-api-3-resolution-get). You can use the [Add default actors to project role](#api-api-3-role-id-actors-post) the project method to add default actors to the project role after creating it.  _Note that although a new project role is available to all projects upon creation, any default actors that are associated with the project role are not added to projects that existed prior to the role being created._<  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Create project role
     * @param createUpdateRoleRequestBean
     */
    public comAtlassianJiraRestV2IssueProjectRoleResourceCreateProjectRolePost (createUpdateRoleRequestBean: CreateUpdateRoleRequestBean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: ProjectRole;  }> {
        const localVarPath = this.basePath + '/api/3/role';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'createUpdateRoleRequestBean' is not null or undefined
        if (createUpdateRoleRequestBean === null || createUpdateRoleRequestBean === undefined) {
            throw new Error('Required parameter createUpdateRoleRequestBean was null or undefined when calling comAtlassianJiraRestV2IssueProjectRoleResourceCreateProjectRolePost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(createUpdateRoleRequestBean, "CreateUpdateRoleRequestBean")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ProjectRole;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ProjectRole");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Removes [default actors](#api-api-3-resolution-get) from the project role. You may remove either a group or user, but you cannot remove a group and a user in the same request.  Changing a project role's default actors does not affect project role members for projects already created.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Delete default actors from project role
     * @param id The ID of the project role. Use [Get all project roles](#api-api-3-role-get) to get a list of project role IDs.
     * @param user The user account ID of the user to remove as a default actor.
     * @param group The group name of the group to be removed as a default actor.
     */
    public comAtlassianJiraRestV2IssueProjectRoleResourceDeleteProjectRoleActorsFromRoleDelete (id: number, user?: string, group?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: ProjectRole;  }> {
        const localVarPath = this.basePath + '/api/3/role/{id}/actors'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2IssueProjectRoleResourceDeleteProjectRoleActorsFromRoleDelete.');
        }

        if (user !== undefined) {
            localVarQueryParameters['user'] = ObjectSerializer.serialize(user, "string");
        }

        if (group !== undefined) {
            localVarQueryParameters['group'] = ObjectSerializer.serialize(group, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ProjectRole;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ProjectRole");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Deletes a project role. You must specify a replacement project role if you wish to delete a project role that is in use.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Delete project role
     * @param id The ID of the project role to delete. Use [Get all project roles](#api-api-3-role-get) to get a list of project role IDs.
     * @param swap The ID of the project role that will replace the one being deleted.
     */
    public comAtlassianJiraRestV2IssueProjectRoleResourceDeleteProjectRoleDelete (id: number, swap?: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/role/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2IssueProjectRoleResourceDeleteProjectRoleDelete.');
        }

        if (swap !== undefined) {
            localVarQueryParameters['swap'] = ObjectSerializer.serialize(swap, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Update the project role's name and description. You must include both a name and a description in the request.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Fully update project role
     * @param id The ID of the project role. Use [Get all project roles](#api-api-3-role-get) to get a list of project role IDs.
     * @param createUpdateRoleRequestBean
     */
    public comAtlassianJiraRestV2IssueProjectRoleResourceFullyUpdateProjectRolePut (id: number, createUpdateRoleRequestBean: CreateUpdateRoleRequestBean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: ProjectRole;  }> {
        const localVarPath = this.basePath + '/api/3/role/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2IssueProjectRoleResourceFullyUpdateProjectRolePut.');
        }

        // verify required parameter 'createUpdateRoleRequestBean' is not null or undefined
        if (createUpdateRoleRequestBean === null || createUpdateRoleRequestBean === undefined) {
            throw new Error('Required parameter createUpdateRoleRequestBean was null or undefined when calling comAtlassianJiraRestV2IssueProjectRoleResourceFullyUpdateProjectRolePut.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(createUpdateRoleRequestBean, "CreateUpdateRoleRequestBean")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ProjectRole;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ProjectRole");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Gets a list of all project roles, complete with project role details and default actors.  ### About project roles  [Project roles](https://confluence.atlassian.com/x/3odKLg) are a flexible way to to associate users and groups with projects. In Jira Cloud, the list of project roles is shared globally with all projects, but each project can have a different set of actors associated with it (unlike groups, which have the same membership throughout all Jira applications).  Project roles can be used in [permission schemes](#api-api-3-permissionscheme-get), [email notification schemes](#api-api-3-notificationscheme-get), [issue security levels](#api-api-3-issuesecurityschemes-get), [comment visibility](#api-api-3-comment-list-post), and workflow conditions.  #### Members and actors  In the Jira REST API, a member of a project role is called an _actor_. An _actor_ is a group or user associated with a project role.  Actors may be set as [default members](https://confluence.atlassian.com/x/3odKLg#Managingprojectroles-Specifying'defaultmembers'foraprojectrole) of the project role or set at the project level:  *   Default actors: Users and groups that are assigned to the project role for all newly created projects. The default actors can be removed at the project level later if desired. *   Actors: Users and groups that are associated with a project role for a particular project, which may differ from the default actors. This allows you to assign a particular user to different roles in different projects.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Get all project roles
     */
    public comAtlassianJiraRestV2IssueProjectRoleResourceGetAllProjectRolesGet (options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Array<ProjectRole>;  }> {
        const localVarPath = this.basePath + '/api/3/role';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<ProjectRole>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<ProjectRole>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the [default actors](#api-api-3-resolution-get) for the project role.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Get default actors for project role
     * @param id The ID of the project role. Use [Get all project roles](#api-api-3-role-get) to get a list of project role IDs.
     */
    public comAtlassianJiraRestV2IssueProjectRoleResourceGetProjectRoleActorsForRoleGet (id: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: ProjectRole;  }> {
        const localVarPath = this.basePath + '/api/3/role/{id}/actors'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2IssueProjectRoleResourceGetProjectRoleActorsForRoleGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ProjectRole;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ProjectRole");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Gets the project role details and the default actors associated with the role. The list of default actors is sorted by display name.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Get project role by ID
     * @param id The ID of the project role. Use [Get all project roles](#api-api-3-role-get) to get a list of project role IDs.
     */
    public comAtlassianJiraRestV2IssueProjectRoleResourceGetProjectRoleByIdGet (id: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: ProjectRole;  }> {
        const localVarPath = this.basePath + '/api/3/role/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2IssueProjectRoleResourceGetProjectRoleByIdGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ProjectRole;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ProjectRole");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Update either the project role's name or its description.  You cannot update both the name and description at the same time using this method. If you send a request with both a name and a description, then only the name will be updated, regardless of the order of appearance in the body of the request.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Partial update project role
     * @param id The ID of the project role. Use [Get all project roles](#api-api-3-role-get) to get a list of project role IDs.
     * @param createUpdateRoleRequestBean
     */
    public comAtlassianJiraRestV2IssueProjectRoleResourcePartialUpdateProjectRolePost (id: number, createUpdateRoleRequestBean: CreateUpdateRoleRequestBean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: ProjectRole;  }> {
        const localVarPath = this.basePath + '/api/3/role/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2IssueProjectRoleResourcePartialUpdateProjectRolePost.');
        }

        // verify required parameter 'createUpdateRoleRequestBean' is not null or undefined
        if (createUpdateRoleRequestBean === null || createUpdateRoleRequestBean === undefined) {
            throw new Error('Required parameter createUpdateRoleRequestBean was null or undefined when calling comAtlassianJiraRestV2IssueProjectRoleResourcePartialUpdateProjectRolePost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(createUpdateRoleRequestBean, "CreateUpdateRoleRequestBean")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ProjectRole;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ProjectRole");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Validates a project key and, if the key is invalid or in use, generates a valid random string for the project key.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Get valid project key
     * @param key The project key.
     */
    public comAtlassianJiraRestV2IssueProjectValidateResourceGetValidProjectKeyGet (key?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: string;  }> {
        const localVarPath = this.basePath + '/api/3/projectvalidate/validProjectKey';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (key !== undefined) {
            localVarQueryParameters['key'] = ObjectSerializer.serialize(key, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: string;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Checks that a project name isn't in use. If the name isn't in use, the passed string is returned. If the name is in use, this operation attempts to generate a valid project name based on the one supplied, usually by adding a sequence number. If a valid project name cannot be generated, a 404 response is returned.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Get valid project name
     * @param name The project name.
     */
    public comAtlassianJiraRestV2IssueProjectValidateResourceGetValidProjectNameGet (name: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: string;  }> {
        const localVarPath = this.basePath + '/api/3/projectvalidate/validProjectName';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'name' is not null or undefined
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling comAtlassianJiraRestV2IssueProjectValidateResourceGetValidProjectNameGet.');
        }

        if (name !== undefined) {
            localVarQueryParameters['name'] = ObjectSerializer.serialize(name, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: string;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Validates a project key by confirming the key is a valid string and not in use.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Validate project key
     * @param key The project key.
     */
    public comAtlassianJiraRestV2IssueProjectValidateResourceValidateProjectKeyGet (key?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: ErrorCollection;  }> {
        const localVarPath = this.basePath + '/api/3/projectvalidate/key';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (key !== undefined) {
            localVarQueryParameters['key'] = ObjectSerializer.serialize(key, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ErrorCollection;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ErrorCollection");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns an issue resolution value.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Get resolution
     * @param id The ID of the issue resolution value.
     */
    public comAtlassianJiraRestV2IssueResolutionResourceGetResolutionGet (id: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Resolution;  }> {
        const localVarPath = this.basePath + '/api/3/resolution/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2IssueResolutionResourceGetResolutionGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Resolution;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Resolution");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns a list of all issue resolution values.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Get resolutions
     */
    public comAtlassianJiraRestV2IssueResolutionResourceGetResolutionsGet (options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Array<Resolution>;  }> {
        const localVarPath = this.basePath + '/api/3/resolution';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<Resolution>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Resolution>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Adds a field to the default tab of the default screen.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Add field to default screen
     * @param fieldId The ID of the field.
     */
    public comAtlassianJiraRestV2IssueScreensResourceAddFieldToDefaultScreenPost (fieldId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/screens/addToDefault/{fieldId}'
            .replace('{' + 'fieldId' + '}', encodeURIComponent(String(fieldId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'fieldId' is not null or undefined
        if (fieldId === null || fieldId === undefined) {
            throw new Error('Required parameter fieldId was null or undefined when calling comAtlassianJiraRestV2IssueScreensResourceAddFieldToDefaultScreenPost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Adds a field to a screen tab.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Add screen tab field
     * @param screenId The ID of the screen.
     * @param tabId The ID of the screen tab.
     * @param addFieldBean
     */
    public comAtlassianJiraRestV2IssueScreensResourceAddScreenTabFieldPost (screenId: number, tabId: number, addFieldBean: AddFieldBean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: ScreenableField;  }> {
        const localVarPath = this.basePath + '/api/3/screens/{screenId}/tabs/{tabId}/fields'
            .replace('{' + 'screenId' + '}', encodeURIComponent(String(screenId)))
            .replace('{' + 'tabId' + '}', encodeURIComponent(String(tabId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'screenId' is not null or undefined
        if (screenId === null || screenId === undefined) {
            throw new Error('Required parameter screenId was null or undefined when calling comAtlassianJiraRestV2IssueScreensResourceAddScreenTabFieldPost.');
        }

        // verify required parameter 'tabId' is not null or undefined
        if (tabId === null || tabId === undefined) {
            throw new Error('Required parameter tabId was null or undefined when calling comAtlassianJiraRestV2IssueScreensResourceAddScreenTabFieldPost.');
        }

        // verify required parameter 'addFieldBean' is not null or undefined
        if (addFieldBean === null || addFieldBean === undefined) {
            throw new Error('Required parameter addFieldBean was null or undefined when calling comAtlassianJiraRestV2IssueScreensResourceAddScreenTabFieldPost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(addFieldBean, "AddFieldBean")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ScreenableField;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ScreenableField");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Creates a tab for a screen.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Create screen tab
     * @param screenId The ID of the screen.
     * @param screenableTab
     */
    public comAtlassianJiraRestV2IssueScreensResourceAddScreenTabPost (screenId: number, screenableTab: ScreenableTab, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: ScreenableTab;  }> {
        const localVarPath = this.basePath + '/api/3/screens/{screenId}/tabs'
            .replace('{' + 'screenId' + '}', encodeURIComponent(String(screenId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'screenId' is not null or undefined
        if (screenId === null || screenId === undefined) {
            throw new Error('Required parameter screenId was null or undefined when calling comAtlassianJiraRestV2IssueScreensResourceAddScreenTabPost.');
        }

        // verify required parameter 'screenableTab' is not null or undefined
        if (screenableTab === null || screenableTab === undefined) {
            throw new Error('Required parameter screenableTab was null or undefined when calling comAtlassianJiraRestV2IssueScreensResourceAddScreenTabPost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(screenableTab, "ScreenableTab")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ScreenableTab;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ScreenableTab");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Deletes a screen tab.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Delete screen tab
     * @param screenId The ID of the screen.
     * @param tabId The ID of the screen tab.
     */
    public comAtlassianJiraRestV2IssueScreensResourceDeleteScreenTabDelete (screenId: number, tabId: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/screens/{screenId}/tabs/{tabId}'
            .replace('{' + 'screenId' + '}', encodeURIComponent(String(screenId)))
            .replace('{' + 'tabId' + '}', encodeURIComponent(String(tabId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'screenId' is not null or undefined
        if (screenId === null || screenId === undefined) {
            throw new Error('Required parameter screenId was null or undefined when calling comAtlassianJiraRestV2IssueScreensResourceDeleteScreenTabDelete.');
        }

        // verify required parameter 'tabId' is not null or undefined
        if (tabId === null || tabId === undefined) {
            throw new Error('Required parameter tabId was null or undefined when calling comAtlassianJiraRestV2IssueScreensResourceDeleteScreenTabDelete.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns all fields for a screen tab.  **[Permissions](#permissions) required:**  *   _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg). *   _Administer projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) when the project key is specified, providing that the screen is associated with the project through a Screen Scheme and Issue Type Screen Scheme.
     * @summary Get all screen tab fields
     * @param screenId The ID of the screen.
     * @param tabId The ID of the screen tab.
     * @param projectKey The key of the project.
     */
    public comAtlassianJiraRestV2IssueScreensResourceGetAllScreenTabFieldsGet (screenId: number, tabId: number, projectKey?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Array<ScreenableField>;  }> {
        const localVarPath = this.basePath + '/api/3/screens/{screenId}/tabs/{tabId}/fields'
            .replace('{' + 'screenId' + '}', encodeURIComponent(String(screenId)))
            .replace('{' + 'tabId' + '}', encodeURIComponent(String(tabId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'screenId' is not null or undefined
        if (screenId === null || screenId === undefined) {
            throw new Error('Required parameter screenId was null or undefined when calling comAtlassianJiraRestV2IssueScreensResourceGetAllScreenTabFieldsGet.');
        }

        // verify required parameter 'tabId' is not null or undefined
        if (tabId === null || tabId === undefined) {
            throw new Error('Required parameter tabId was null or undefined when calling comAtlassianJiraRestV2IssueScreensResourceGetAllScreenTabFieldsGet.');
        }

        if (projectKey !== undefined) {
            localVarQueryParameters['projectKey'] = ObjectSerializer.serialize(projectKey, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<ScreenableField>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<ScreenableField>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the list of tabs for a screen.  **[Permissions](#permissions) required:**  *   _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg). *   _Administer projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) when the project key is specified, providing that the screen is associated with the project through a Screen Scheme and Issue Type Screen Scheme.
     * @summary Get all screen tabs
     * @param screenId The ID of the screen.
     * @param projectKey The key of the project.
     */
    public comAtlassianJiraRestV2IssueScreensResourceGetAllScreenTabsGet (screenId: number, projectKey?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Array<ScreenableTab>;  }> {
        const localVarPath = this.basePath + '/api/3/screens/{screenId}/tabs'
            .replace('{' + 'screenId' + '}', encodeURIComponent(String(screenId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'screenId' is not null or undefined
        if (screenId === null || screenId === undefined) {
            throw new Error('Required parameter screenId was null or undefined when calling comAtlassianJiraRestV2IssueScreensResourceGetAllScreenTabsGet.');
        }

        if (projectKey !== undefined) {
            localVarQueryParameters['projectKey'] = ObjectSerializer.serialize(projectKey, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<ScreenableTab>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<ScreenableTab>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns all screens.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Get all screens
     * @param startAt The index of the first item to return in a page of results (page offset).
     * @param maxResults The maximum number of items to return per page. The maximum is &#x60;100&#x60;.
     */
    public comAtlassianJiraRestV2IssueScreensResourceGetAllScreensGet (startAt?: number, maxResults?: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PageOfScreen;  }> {
        const localVarPath = this.basePath + '/api/3/screens';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (startAt !== undefined) {
            localVarQueryParameters['startAt'] = ObjectSerializer.serialize(startAt, "number");
        }

        if (maxResults !== undefined) {
            localVarQueryParameters['maxResults'] = ObjectSerializer.serialize(maxResults, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: PageOfScreen;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "PageOfScreen");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the fields that can be added to a tab on a screen.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Get available screen fields
     * @param screenId The ID of the screen.
     */
    public comAtlassianJiraRestV2IssueScreensResourceGetAvailableScreenFieldsGet (screenId: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Array<ScreenableField>;  }> {
        const localVarPath = this.basePath + '/api/3/screens/{screenId}/availableFields'
            .replace('{' + 'screenId' + '}', encodeURIComponent(String(screenId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'screenId' is not null or undefined
        if (screenId === null || screenId === undefined) {
            throw new Error('Required parameter screenId was null or undefined when calling comAtlassianJiraRestV2IssueScreensResourceGetAvailableScreenFieldsGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<ScreenableField>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<ScreenableField>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Moves a screen tab field.  If `after` and `position` are provided in the request, `position` is ignored.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Move screen tab field
     * @param screenId The ID of the screen.
     * @param tabId The ID of the screen tab.
     * @param id The ID of the field.
     * @param moveFieldBean
     */
    public comAtlassianJiraRestV2IssueScreensResourceMoveScreenTabFieldPost (screenId: number, tabId: number, id: string, moveFieldBean: MoveFieldBean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/screens/{screenId}/tabs/{tabId}/fields/{id}/move'
            .replace('{' + 'screenId' + '}', encodeURIComponent(String(screenId)))
            .replace('{' + 'tabId' + '}', encodeURIComponent(String(tabId)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'screenId' is not null or undefined
        if (screenId === null || screenId === undefined) {
            throw new Error('Required parameter screenId was null or undefined when calling comAtlassianJiraRestV2IssueScreensResourceMoveScreenTabFieldPost.');
        }

        // verify required parameter 'tabId' is not null or undefined
        if (tabId === null || tabId === undefined) {
            throw new Error('Required parameter tabId was null or undefined when calling comAtlassianJiraRestV2IssueScreensResourceMoveScreenTabFieldPost.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2IssueScreensResourceMoveScreenTabFieldPost.');
        }

        // verify required parameter 'moveFieldBean' is not null or undefined
        if (moveFieldBean === null || moveFieldBean === undefined) {
            throw new Error('Required parameter moveFieldBean was null or undefined when calling comAtlassianJiraRestV2IssueScreensResourceMoveScreenTabFieldPost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(moveFieldBean, "MoveFieldBean")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Moves a screen tab.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Move screen tab
     * @param screenId The ID of the screen.
     * @param tabId The ID of the screen tab.
     * @param pos The position of tab. The base index is 0.
     */
    public comAtlassianJiraRestV2IssueScreensResourceMoveScreenTabPost (screenId: number, tabId: number, pos: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/screens/{screenId}/tabs/{tabId}/move/{pos}'
            .replace('{' + 'screenId' + '}', encodeURIComponent(String(screenId)))
            .replace('{' + 'tabId' + '}', encodeURIComponent(String(tabId)))
            .replace('{' + 'pos' + '}', encodeURIComponent(String(pos)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'screenId' is not null or undefined
        if (screenId === null || screenId === undefined) {
            throw new Error('Required parameter screenId was null or undefined when calling comAtlassianJiraRestV2IssueScreensResourceMoveScreenTabPost.');
        }

        // verify required parameter 'tabId' is not null or undefined
        if (tabId === null || tabId === undefined) {
            throw new Error('Required parameter tabId was null or undefined when calling comAtlassianJiraRestV2IssueScreensResourceMoveScreenTabPost.');
        }

        // verify required parameter 'pos' is not null or undefined
        if (pos === null || pos === undefined) {
            throw new Error('Required parameter pos was null or undefined when calling comAtlassianJiraRestV2IssueScreensResourceMoveScreenTabPost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Removes a field from a screen tab.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Remove screen tab field
     * @param screenId The ID of the screen.
     * @param tabId The ID of the screen tab.
     * @param id The ID of the field.
     */
    public comAtlassianJiraRestV2IssueScreensResourceRemoveScreenTabFieldDelete (screenId: number, tabId: number, id: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/screens/{screenId}/tabs/{tabId}/fields/{id}'
            .replace('{' + 'screenId' + '}', encodeURIComponent(String(screenId)))
            .replace('{' + 'tabId' + '}', encodeURIComponent(String(tabId)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'screenId' is not null or undefined
        if (screenId === null || screenId === undefined) {
            throw new Error('Required parameter screenId was null or undefined when calling comAtlassianJiraRestV2IssueScreensResourceRemoveScreenTabFieldDelete.');
        }

        // verify required parameter 'tabId' is not null or undefined
        if (tabId === null || tabId === undefined) {
            throw new Error('Required parameter tabId was null or undefined when calling comAtlassianJiraRestV2IssueScreensResourceRemoveScreenTabFieldDelete.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2IssueScreensResourceRemoveScreenTabFieldDelete.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Updates the name of a screen tab.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Update screen tab
     * @param screenId The ID of the screen.
     * @param tabId The ID of the screen tab.
     * @param screenableTab
     */
    public comAtlassianJiraRestV2IssueScreensResourceRenameScreenTabPut (screenId: number, tabId: number, screenableTab: ScreenableTab, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: ScreenableTab;  }> {
        const localVarPath = this.basePath + '/api/3/screens/{screenId}/tabs/{tabId}'
            .replace('{' + 'screenId' + '}', encodeURIComponent(String(screenId)))
            .replace('{' + 'tabId' + '}', encodeURIComponent(String(tabId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'screenId' is not null or undefined
        if (screenId === null || screenId === undefined) {
            throw new Error('Required parameter screenId was null or undefined when calling comAtlassianJiraRestV2IssueScreensResourceRenameScreenTabPut.');
        }

        // verify required parameter 'tabId' is not null or undefined
        if (tabId === null || tabId === undefined) {
            throw new Error('Required parameter tabId was null or undefined when calling comAtlassianJiraRestV2IssueScreensResourceRenameScreenTabPut.');
        }

        // verify required parameter 'screenableTab' is not null or undefined
        if (screenableTab === null || screenableTab === undefined) {
            throw new Error('Required parameter screenableTab was null or undefined when calling comAtlassianJiraRestV2IssueScreensResourceRenameScreenTabPut.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(screenableTab, "ScreenableTab")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ScreenableTab;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ScreenableTab");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns a list of all status categories.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Get all status categories
     */
    public comAtlassianJiraRestV2IssueStatusCategoryResourceGetStatusCategoriesGet (options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Array<StatusCategory>;  }> {
        const localVarPath = this.basePath + '/api/3/statuscategory';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<StatusCategory>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<StatusCategory>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns a status category. Status categories provided a mechanism for categorizing [statuses](#api-api-3-status-idOrName-get).  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Get status category
     * @param idOrKey The ID or key of the status category.
     */
    public comAtlassianJiraRestV2IssueStatusCategoryResourceGetStatusCategoryGet (idOrKey: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: StatusCategory;  }> {
        const localVarPath = this.basePath + '/api/3/statuscategory/{idOrKey}'
            .replace('{' + 'idOrKey' + '}', encodeURIComponent(String(idOrKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'idOrKey' is not null or undefined
        if (idOrKey === null || idOrKey === undefined) {
            throw new Error('Required parameter idOrKey was null or undefined when calling comAtlassianJiraRestV2IssueStatusCategoryResourceGetStatusCategoryGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: StatusCategory;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "StatusCategory");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns a status. The status must be associated with a workflow to be returned.  If a name is used on more than one status, only the status found first is returned. Therefore, identifying the status by its ID may be preferable.  [Permissions](#permissions) required: _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg).
     * @summary Get status
     * @param idOrName The ID or name of the status.
     */
    public comAtlassianJiraRestV2IssueStatusResourceGetStatusGet (idOrName: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: StatusDetails;  }> {
        const localVarPath = this.basePath + '/api/3/status/{idOrName}'
            .replace('{' + 'idOrName' + '}', encodeURIComponent(String(idOrName)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'idOrName' is not null or undefined
        if (idOrName === null || idOrName === undefined) {
            throw new Error('Required parameter idOrName was null or undefined when calling comAtlassianJiraRestV2IssueStatusResourceGetStatusGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: StatusDetails;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "StatusDetails");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns a list of all statuses associated with workflows.  **[Permissions](#permissions) required:** _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg). Users with permission to access Jira can call this method, but an empty list is returned.
     * @summary Get all statuses
     */
    public comAtlassianJiraRestV2IssueStatusResourceGetStatusesGet (options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Array<StatusDetails>;  }> {
        const localVarPath = this.basePath + '/api/3/status';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<StatusDetails>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<StatusDetails>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Deletes an avatar from a project or issue type.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Delete avatar
     * @param type The type of the entity. Valid values are &#x60;project&#x60; and &#x60;issuetype&#x60;.
     * @param owningObjectId The ID of the entity item.
     * @param id The ID of the avatar.
     */
    public comAtlassianJiraRestV2IssueUniversalAvatarResourceDeleteAvatarDelete (type: string, owningObjectId: string, id: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/universal_avatar/type/{type}/owner/{owningObjectId}/avatar/{id}'
            .replace('{' + 'type' + '}', encodeURIComponent(String(type)))
            .replace('{' + 'owningObjectId' + '}', encodeURIComponent(String(owningObjectId)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling comAtlassianJiraRestV2IssueUniversalAvatarResourceDeleteAvatarDelete.');
        }

        // verify required parameter 'owningObjectId' is not null or undefined
        if (owningObjectId === null || owningObjectId === undefined) {
            throw new Error('Required parameter owningObjectId was null or undefined when calling comAtlassianJiraRestV2IssueUniversalAvatarResourceDeleteAvatarDelete.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2IssueUniversalAvatarResourceDeleteAvatarDelete.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the system and custom avatars for a project or issue type.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Get avatars
     * @param type The type of the entity. Valid values are &#x60;project&#x60; and &#x60;issuetype&#x60;.
     * @param entityId The ID of the entity item.
     */
    public comAtlassianJiraRestV2IssueUniversalAvatarResourceGetAvatarsGet (type: string, entityId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Avatars;  }> {
        const localVarPath = this.basePath + '/api/3/universal_avatar/type/{type}/owner/{entityId}'
            .replace('{' + 'type' + '}', encodeURIComponent(String(type)))
            .replace('{' + 'entityId' + '}', encodeURIComponent(String(entityId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling comAtlassianJiraRestV2IssueUniversalAvatarResourceGetAvatarsGet.');
        }

        // verify required parameter 'entityId' is not null or undefined
        if (entityId === null || entityId === undefined) {
            throw new Error('Required parameter entityId was null or undefined when calling comAtlassianJiraRestV2IssueUniversalAvatarResourceGetAvatarsGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Avatars;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Avatars");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Loads a custom avatar for a project or issue type.  Specify the avatar's local file location in the body of the request. Also, include the following headers:  *   `X-Atlassian-Token: no-check` To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers). *   `Content-Type: image/_image type_` Valid image types are JPEG, GIF, or PNG.  For example:   `curl --request POST `  `--user email@example.com:<api_token> `  `--header 'X-Atlassian-Token: no-check' `  `--header 'Content-Type: image/< image_type>' `  `--data-binary \"<@/path/to/file/with/your/avatar>\" `  `--url 'https://your-domain.atlassian.net/rest/api/3/universal_avatar/type/{type}/owner/{entityId}'`  The avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square's sides is set to the smaller of the height or width of the image.  The cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.  After creating the avatar use:  *   [Update issue type](#api-api-3-issuetype-id-put) to set it as the issue type's displayed avatar. *   [Set project avatar](#api-api-3-project-projectIdOrKey-avatar-put) to set it as the project's displayed avatar.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Load avatar
     * @param type The type of the entity. Valid values are &#x60;project&#x60; and &#x60;issuetype&#x60;.
     * @param entityId The ID of the entity item.
     * @param size The length of each side of the crop region.
     * @param body
     * @param x The X coordinate of the top-left corner of the crop region.
     * @param y The Y coordinate of the top-left corner of the crop region.
     */
    public comAtlassianJiraRestV2IssueUniversalAvatarResourceStoreAvatarPost (type: string, entityId: string, size: number, body: any, x?: number, y?: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Avatar;  }> {
        const localVarPath = this.basePath + '/api/3/universal_avatar/type/{type}/owner/{entityId}'
            .replace('{' + 'type' + '}', encodeURIComponent(String(type)))
            .replace('{' + 'entityId' + '}', encodeURIComponent(String(entityId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'type' is not null or undefined
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling comAtlassianJiraRestV2IssueUniversalAvatarResourceStoreAvatarPost.');
        }

        // verify required parameter 'entityId' is not null or undefined
        if (entityId === null || entityId === undefined) {
            throw new Error('Required parameter entityId was null or undefined when calling comAtlassianJiraRestV2IssueUniversalAvatarResourceStoreAvatarPost.');
        }

        // verify required parameter 'size' is not null or undefined
        if (size === null || size === undefined) {
            throw new Error('Required parameter size was null or undefined when calling comAtlassianJiraRestV2IssueUniversalAvatarResourceStoreAvatarPost.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling comAtlassianJiraRestV2IssueUniversalAvatarResourceStoreAvatarPost.');
        }

        if (x !== undefined) {
            localVarQueryParameters['x'] = ObjectSerializer.serialize(x, "number");
        }

        if (y !== undefined) {
            localVarQueryParameters['y'] = ObjectSerializer.serialize(y, "number");
        }

        if (size !== undefined) {
            localVarQueryParameters['size'] = ObjectSerializer.serialize(size, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "any")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Avatar;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Avatar");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Creates a user. This resource is retained for legacy compatibility. As soon as a more suitable alternative is available this resource will be deprecated.  The option is provided to set or generate a password for the user. When using the option to generate a password, by omitting `password` from the request, include `\"notification\": \"true\"` to ensure the user is sent an email advising them that their account has been created. This email includes a link for the user to set their password. If the notification isn't sent for a generated password, the user will need to be sent a reset password request from Jira.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Create user
     * @param userWriteBean
     */
    public comAtlassianJiraRestV2IssueUserResourceCreateUserPost (userWriteBean: UserWriteBean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: User;  }> {
        const localVarPath = this.basePath + '/api/3/user';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'userWriteBean' is not null or undefined
        if (userWriteBean === null || userWriteBean === undefined) {
            throw new Error('Required parameter userWriteBean was null or undefined when calling comAtlassianJiraRestV2IssueUserResourceCreateUserPost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(userWriteBean, "UserWriteBean")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: User;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "User");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns a list of users that can be assigned to an issue. Use this method to find the list of users who can be assigned to:  *   a new issue, by providing the `projectKeyOrId`. *   an updated issue, by providing the `issueKey`. *   to an issue during a transition (workflow action), by providing the `issueKey` and the transition id in `actionDescriptorId`. You can obtain the IDs of an issue's valid transitions using the `transitions` option in the `expand` parameter of [Get issue](#api-api-3-issue-issueIdOrKey-get).  In all these cases, you can pass a username to determine if a user can be assigned to an issue. The user is returned in the response if they can be assigned to the issue or issue transition.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Find users assignable to issues
     * @param query A query string that is matched against user attributes, such as &#x60;key&#x60;, &#x60;name&#x60;, &#x60;displayName&#x60;, and &#x60;emailAddress&#x60;, to find relevant users. The string can match any part of the attribute&#39;s value. For example, _query&#x3D;john_ matches a user with a &#x60;displayName&#x60; of _John Smith_ and a user with an &#x60;emailAddress&#x60; of _jane.johnson@example.com_. Required, unless &#x60;username&#x60; is specified.
     * @param username This parameter has been deprecated due to privacy changes. Use &#x60;query&#x60; instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. A query string used to search username, display name, and email address. The string is matched to the starting letters of any word in the searched fields. For example, _ar_ matches to the username _archie_ but not _mark_. Required, unless &#x60;query&#x60; is specified.
     * @param project The project ID or project key (case sensitive). Required, unless &#x60;issueKey&#x60; is specified.
     * @param issueKey The key of the issue. Required, unless &#x60;project&#x60; is specified.
     * @param startAt The index of the first item to return in a page of results (page offset).
     * @param maxResults The maximum number of items to return per page. The maximum is &#x60;1000&#x60;.
     * @param actionDescriptorId The ID of the transition.
     */
    public comAtlassianJiraRestV2IssueUserResourceFindAssignableUsersGet (query?: string, username?: string, project?: string, issueKey?: string, startAt?: number, maxResults?: number, actionDescriptorId?: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Array<User>;  }> {
        const localVarPath = this.basePath + '/api/3/user/assignable/search';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (query !== undefined) {
            localVarQueryParameters['query'] = ObjectSerializer.serialize(query, "string");
        }

        if (username !== undefined) {
            localVarQueryParameters['username'] = ObjectSerializer.serialize(username, "string");
        }

        if (project !== undefined) {
            localVarQueryParameters['project'] = ObjectSerializer.serialize(project, "string");
        }

        if (issueKey !== undefined) {
            localVarQueryParameters['issueKey'] = ObjectSerializer.serialize(issueKey, "string");
        }

        if (startAt !== undefined) {
            localVarQueryParameters['startAt'] = ObjectSerializer.serialize(startAt, "number");
        }

        if (maxResults !== undefined) {
            localVarQueryParameters['maxResults'] = ObjectSerializer.serialize(maxResults, "number");
        }

        if (actionDescriptorId !== undefined) {
            localVarQueryParameters['actionDescriptorId'] = ObjectSerializer.serialize(actionDescriptorId, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<User>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<User>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns a list of users who can be assigned issues in one or more projects. The list may be restricted to users whose attributes match a string.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Find users assignable to projects
     * @param projectKeys A comma-separated list of project keys (case sensitive).
     * @param query A query string that is matched against user attributes, such as &#x60;key&#x60;, &#x60;name&#x60;, &#x60;displayName&#x60;, and &#x60;emailAddress&#x60;, to find relevant users. The string can match any part of the attribute&#39;s value. For example, _query&#x3D;john_ matches a user with a &#x60;displayName&#x60; of _John Smith_ and a user with an &#x60;emailAddress&#x60; of _jane.johnson@example.com_.
     * @param username This parameter has been deprecated due to privacy changes. Use &#x60;query&#x60; instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. A query string used to search username, display name, and email address. The string is matched to the starting letters of any word in the searched fields. For example, _ar_ matches to the username _archie_ but not _mark_.
     * @param startAt The index of the first item to return in a page of results (page offset).
     * @param maxResults The maximum number of items to return per page. The maximum is &#x60;1000&#x60;.
     */
    public comAtlassianJiraRestV2IssueUserResourceFindBulkAssignableUsersGet (projectKeys: string, query?: string, username?: string, startAt?: number, maxResults?: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Array<User>;  }> {
        const localVarPath = this.basePath + '/api/3/user/assignable/multiProjectSearch';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'projectKeys' is not null or undefined
        if (projectKeys === null || projectKeys === undefined) {
            throw new Error('Required parameter projectKeys was null or undefined when calling comAtlassianJiraRestV2IssueUserResourceFindBulkAssignableUsersGet.');
        }

        if (query !== undefined) {
            localVarQueryParameters['query'] = ObjectSerializer.serialize(query, "string");
        }

        if (username !== undefined) {
            localVarQueryParameters['username'] = ObjectSerializer.serialize(username, "string");
        }

        if (projectKeys !== undefined) {
            localVarQueryParameters['projectKeys'] = ObjectSerializer.serialize(projectKeys, "string");
        }

        if (startAt !== undefined) {
            localVarQueryParameters['startAt'] = ObjectSerializer.serialize(startAt, "number");
        }

        if (maxResults !== undefined) {
            localVarQueryParameters['maxResults'] = ObjectSerializer.serialize(maxResults, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<User>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<User>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns a list of users whose attributes match the query term. The returned object includes the `html` field where the matched query term is highlighted with the HTML strong tag. A list of account IDs can be provided to exclude users from the results.  **[Permissions](#permissions) required:** _Browse users and groups_ [global permission](https://confluence.atlassian.com/x/x4dKLg). Users with permission to access Jira can call this operation, but will only get search results for an exact name match.
     * @summary Find users for picker
     * @param query A query string that is matched against user attributes, such as &#x60;key&#x60;, &#x60;name&#x60;, &#x60;displayName&#x60;, and &#x60;emailAddress&#x60;, to find relevant users. The string can match any part of the attribute&#39;s value. For example, _query&#x3D;john_ matches a user with a &#x60;displayName&#x60; of _John Smith_ and a user with an &#x60;emailAddress&#x60; of _jane.johnson@example.com_.
     * @param maxResults The maximum number of items to return. The maximum is &#x60;1000&#x60;. The total number of matched users is returned in &#x60;total&#x60;.
     * @param showAvatar Include the URI to the user&#39;s avatar.
     * @param exclude This parameter has been deprecated due to privacy changes. Use &#x60;excludeAccountIds&#x60; instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. The username of a user to exclude from the search results. To exclude multiple users, specify this parameter multiple times. For example, &#x60;exclude&#x3D;mia&amp;exclude&#x3D;alana&#x60;. Cannot be provided with &#x60;excludeAccountIds&#x60;.
     * @param excludeAccountIds A comma-separated list of account IDs to exclude from the search results. This parameter may be specified multiple times. For example, &#x60;excludeAccountIds&#x3D;99:27935d01-92a7-4687-8272-a9b8d3b2ae2e,bd429c95-e27b-4423-a0bd-421cf3d69129&amp;excludeAccountIds&#x3D;384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192&#x60;. Cannot be provided with &#x60;exclude&#x60;.
     */
    public comAtlassianJiraRestV2IssueUserResourceFindUsersForPickerGet (query: string, maxResults?: number, showAvatar?: boolean, exclude?: Array<string>, excludeAccountIds?: Array<string>, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: FoundUsers;  }> {
        const localVarPath = this.basePath + '/api/3/user/picker';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'query' is not null or undefined
        if (query === null || query === undefined) {
            throw new Error('Required parameter query was null or undefined when calling comAtlassianJiraRestV2IssueUserResourceFindUsersForPickerGet.');
        }

        if (query !== undefined) {
            localVarQueryParameters['query'] = ObjectSerializer.serialize(query, "string");
        }

        if (maxResults !== undefined) {
            localVarQueryParameters['maxResults'] = ObjectSerializer.serialize(maxResults, "number");
        }

        if (showAvatar !== undefined) {
            localVarQueryParameters['showAvatar'] = ObjectSerializer.serialize(showAvatar, "boolean");
        }

        if (exclude !== undefined) {
            localVarQueryParameters['exclude'] = ObjectSerializer.serialize(exclude, "Array<string>");
        }

        if (excludeAccountIds !== undefined) {
            localVarQueryParameters['excludeAccountIds'] = ObjectSerializer.serialize(excludeAccountIds, "Array<string>");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: FoundUsers;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "FoundUsers");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns a list of users that match the search string and property.  **[Permissions](#permissions) required:** _Browse users and groups_ [global permission](https://confluence.atlassian.com/x/x4dKLg). Users with permission to access Jira can call this method, but empty search results are returned.
     * @summary Find users
     * @param query A query string that is matched against user attributes (&#x60;key&#x60;, &#x60;name&#x60;, &#x60;displayName&#x60;, and &#x60;emailAddress&#x60;) to find relevant users. The string can match any part of the attribute&#39;s value. For example, _query&#x3D;john_ matches a user with a &#x60;displayName&#x60; of _John Smith_ and a user with an &#x60;emailAddress&#x60; of _jane.johnson@example.com_. Required, unless &#x60;username&#x60; is specified.
     * @param username This parameter has been deprecated due to privacy changes. Use &#x60;query&#x60; instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. A query string used to search username, display name, and email address. The string is matched to the starting letters of any word in the searched fields. For example, _ar_ matches to the username _archie_ but not _mark_. Required, unless &#x60;query&#x60; is specified.
     * @param startAt The index of the first item to return in a page of results (page offset).
     * @param maxResults The maximum number of items to return per page. The maximum is &#x60;1000&#x60;.
     * @param includeActive Include active users in the results. This parameter is deprecated, should be always true and will be removed soon.
     * @param includeInactive Include inactive users in the results. This parameter is deprecated and will be removed soon. Searching for inactive users is no longer supported.
     * @param property A query string used to search properties. Property keys are specified by path, so property keys containing dot (.) or equals (&#x3D;) characters cannot be used. The query string cannot be specified using a JSON object. Example: To search for the value of &#x60;nested&#x60; from &#x60;{\&quot;something\&quot;:{\&quot;nested\&quot;:1,\&quot;other\&quot;:2}}&#x60; use &#x60;thepropertykey.something.nested&#x3D;1&#x60;.
     */
    public comAtlassianJiraRestV2IssueUserResourceFindUsersGet (query?: string, username?: string, startAt?: number, maxResults?: number, includeActive?: boolean, includeInactive?: boolean, property?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Array<User>;  }> {
        const localVarPath = this.basePath + '/api/3/user/search';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (query !== undefined) {
            localVarQueryParameters['query'] = ObjectSerializer.serialize(query, "string");
        }

        if (username !== undefined) {
            localVarQueryParameters['username'] = ObjectSerializer.serialize(username, "string");
        }

        if (startAt !== undefined) {
            localVarQueryParameters['startAt'] = ObjectSerializer.serialize(startAt, "number");
        }

        if (maxResults !== undefined) {
            localVarQueryParameters['maxResults'] = ObjectSerializer.serialize(maxResults, "number");
        }

        if (includeActive !== undefined) {
            localVarQueryParameters['includeActive'] = ObjectSerializer.serialize(includeActive, "boolean");
        }

        if (includeInactive !== undefined) {
            localVarQueryParameters['includeInactive'] = ObjectSerializer.serialize(includeInactive, "boolean");
        }

        if (property !== undefined) {
            localVarQueryParameters['property'] = ObjectSerializer.serialize(property, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<User>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<User>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns a list of users who fulfill these criteria:  *   their user attributes match a search string. *   they have a set of permissions for a project or issue.  If no search string is provided, a list of all users with the permissions is returned.  **[Permissions](#permissions) required:**  *   _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg), to get users for any project. *   _Administer Projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) for a project, to get users for that project.
     * @summary Find users with permissions
     * @param permissions A comma-separated list of permissions. The valid permissions are:  *   ASSIGNABLE_USER *   ASSIGN_ISSUE *   ATTACHMENT\\_DELETE\\_ALL *   ATTACHMENT\\_DELETE\\_OWN *   BROWSE *   CLOSE_ISSUE *   COMMENT\\_DELETE\\_ALL *   COMMENT\\_DELETE\\_OWN *   COMMENT\\_EDIT\\_ALL *   COMMENT\\_EDIT\\_OWN *   COMMENT_ISSUE *   CREATE_ATTACHMENT *   CREATE_ISSUE *   DELETE_ISSUE *   EDIT_ISSUE *   LINK_ISSUE *   MANAGE\\_WATCHER\\_LIST *   MODIFY_REPORTER *   MOVE_ISSUE *   PROJECT_ADMIN *   RESOLVE_ISSUE *   SCHEDULE_ISSUE *   SET\\_ISSUE\\_SECURITY *   TRANSITION_ISSUE *   VIEW\\_VERSION\\_CONTROL *   VIEW\\_VOTERS\\_AND_WATCHERS *   VIEW\\_WORKFLOW\\_READONLY *   WORKLOG\\_DELETE\\_ALL *   WORKLOG\\_DELETE\\_OWN *   WORKLOG\\_EDIT\\_ALL *   WORKLOG\\_EDIT\\_OWN *   WORK_ISSUE
     * @param query A query string that is matched against user attributes, such as &#x60;key&#x60;, &#x60;name&#x60;, &#x60;displayName&#x60;, and &#x60;emailAddress&#x60;, to find relevant users. The string can match any part of the attribute&#39;s value. For example, _query&#x3D;john_ matches a user with a &#x60;displayName&#x60; of _John Smith_ and a user with an &#x60;emailAddress&#x60; of _jane.johnson@example.com_.
     * @param username This parameter has been deprecated due to privacy changes. Use &#x60;query&#x60; instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. A query string used to search username, display name, and email address. The string is matched to the starting letters of any word in the searched fields. For example, _ar_ matches to the username _archie_ but not _mark_.
     * @param issueKey The issue key for the issue.
     * @param projectKey The project key for the project (case sensitive).
     * @param startAt The index of the first item to return in a page of results (page offset).
     * @param maxResults The maximum number of items to return per page. The maximum is &#x60;1000&#x60;.
     */
    public comAtlassianJiraRestV2IssueUserResourceFindUsersWithAllPermissionsGet (permissions: string, query?: string, username?: string, issueKey?: string, projectKey?: string, startAt?: number, maxResults?: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Array<User>;  }> {
        const localVarPath = this.basePath + '/api/3/user/permission/search';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'permissions' is not null or undefined
        if (permissions === null || permissions === undefined) {
            throw new Error('Required parameter permissions was null or undefined when calling comAtlassianJiraRestV2IssueUserResourceFindUsersWithAllPermissionsGet.');
        }

        if (query !== undefined) {
            localVarQueryParameters['query'] = ObjectSerializer.serialize(query, "string");
        }

        if (username !== undefined) {
            localVarQueryParameters['username'] = ObjectSerializer.serialize(username, "string");
        }

        if (permissions !== undefined) {
            localVarQueryParameters['permissions'] = ObjectSerializer.serialize(permissions, "string");
        }

        if (issueKey !== undefined) {
            localVarQueryParameters['issueKey'] = ObjectSerializer.serialize(issueKey, "string");
        }

        if (projectKey !== undefined) {
            localVarQueryParameters['projectKey'] = ObjectSerializer.serialize(projectKey, "string");
        }

        if (startAt !== undefined) {
            localVarQueryParameters['startAt'] = ObjectSerializer.serialize(startAt, "number");
        }

        if (maxResults !== undefined) {
            localVarQueryParameters['maxResults'] = ObjectSerializer.serialize(maxResults, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<User>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<User>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns a list of users who fulfill these criteria:  *   their user attributes match a search string. *   they have permission to browse issues.  Use this resource to find users who can browse:  *   an issue, by providing the `issueKey`. *   any issue in a project, by providing the `projectKey`.  **[Permissions](#permissions) required:** _Browse users and groups_ [global permission](https://confluence.atlassian.com/x/x4dKLg). Users with permission to access Jira can call this method, but empty search results are returned.
     * @summary Find users with browse permission
     * @param query A query string that is matched against user attributes, such as &#x60;key&#x60;, &#x60;name&#x60;, &#x60;displayName&#x60;, and &#x60;emailAddress&#x60;, to find relevant users. The string can match any part of the attribute&#39;s value. For example, _query&#x3D;john_ matches a user with a &#x60;displayName&#x60; of _John Smith_ and a user with an &#x60;emailAddress&#x60; of _jane.johnson@example.com_. Required, unless &#x60;username&#x60; is specified.
     * @param username This parameter has been deprecated due to privacy changes. Use &#x60;query&#x60; instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. A query string used to search username, display name, and email address. The string is matched to the starting letters of any word in the searched fields. For example, _ar_ matches to the username _archie_ but not _mark_. Required, unless &#x60;query&#x60; is specified.
     * @param issueKey The issue key for the issue. Required, unless &#x60;projectKey&#x60; is specified.
     * @param projectKey The project key for the project (case sensitive). Required, unless &#x60;issueKey&#x60; is specified.
     * @param startAt The index of the first item to return in a page of results (page offset).
     * @param maxResults The maximum number of items to return per page. The maximum is &#x60;1000&#x60;.
     */
    public comAtlassianJiraRestV2IssueUserResourceFindUsersWithBrowsePermissionGet (query?: string, username?: string, issueKey?: string, projectKey?: string, startAt?: number, maxResults?: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Array<User>;  }> {
        const localVarPath = this.basePath + '/api/3/user/viewissue/search';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (query !== undefined) {
            localVarQueryParameters['query'] = ObjectSerializer.serialize(query, "string");
        }

        if (username !== undefined) {
            localVarQueryParameters['username'] = ObjectSerializer.serialize(username, "string");
        }

        if (issueKey !== undefined) {
            localVarQueryParameters['issueKey'] = ObjectSerializer.serialize(issueKey, "string");
        }

        if (projectKey !== undefined) {
            localVarQueryParameters['projectKey'] = ObjectSerializer.serialize(projectKey, "string");
        }

        if (startAt !== undefined) {
            localVarQueryParameters['startAt'] = ObjectSerializer.serialize(startAt, "number");
        }

        if (maxResults !== undefined) {
            localVarQueryParameters['maxResults'] = ObjectSerializer.serialize(maxResults, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<User>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<User>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the default [issue table columns](https://confluence.atlassian.com/x/XYdKLg) for the user. If a username is not passed in the request, the calling user's details are returned.  **[Permissions](#permissions) required:**  *   _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLgl), to get the column details for any user. *   Permission to access Jira, to get the calling user's column details.
     * @summary Get user default columns
     * @param accountId The accountId of the user, which uniquely identifies the user across all Atlassian products. For example, _384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192_. Cannot be provided with &#x60;username&#x60;.
     * @param username This parameter has been deprecated due to privacy changes. Use &#x60;accountId&#x60; instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.  The username of the user. Cannot be provided with &#x60;accountId&#x60;.
     */
    public comAtlassianJiraRestV2IssueUserResourceGetUserDefaultColumnsGet (accountId?: string, username?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Array<ColumnItem>;  }> {
        const localVarPath = this.basePath + '/api/3/user/columns';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (accountId !== undefined) {
            localVarQueryParameters['accountId'] = ObjectSerializer.serialize(accountId, "string");
        }

        if (username !== undefined) {
            localVarQueryParameters['username'] = ObjectSerializer.serialize(username, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<ColumnItem>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<ColumnItem>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns a user.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Get user
     * @param accountId The accountId of the user, which uniquely identifies the user across all Atlassian products. For example, _384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192_. Required, unless &#x60;username&#x60; or &#x60;key&#x60; is specified.
     * @param username This parameter has been deprecated due to privacy changes. Use &#x60;accountId&#x60; instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.  The username of the user. Required, unless &#x60;accountId&#x60; or &#x60;key&#x60; is specified.
     * @param key This parameter has been deprecated due to privacy changes. Use &#x60;accountId&#x60; instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.  The key of the user. Required, unless &#x60;accountId&#x60; or &#x60;username&#x60; is specified.
     * @param expand Use [expand](#expansion) to include additional information about users in the response. This parameter accepts multiple values separated by a comma:  *   &#x60;groups&#x60; includes all groups and nested groups to which the user belongs. *   &#x60;applicationRoles&#x60; includes details of all the applications to which the user has access.
     */
    public comAtlassianJiraRestV2IssueUserResourceGetUserGet (accountId?: string, username?: string, key?: string, expand?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: User;  }> {
        const localVarPath = this.basePath + '/api/3/user';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (accountId !== undefined) {
            localVarQueryParameters['accountId'] = ObjectSerializer.serialize(accountId, "string");
        }

        if (username !== undefined) {
            localVarQueryParameters['username'] = ObjectSerializer.serialize(username, "string");
        }

        if (key !== undefined) {
            localVarQueryParameters['key'] = ObjectSerializer.serialize(key, "string");
        }

        if (expand !== undefined) {
            localVarQueryParameters['expand'] = ObjectSerializer.serialize(expand, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: User;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "User");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the groups to which a user belongs.  **[Permissions](#permissions) required:** _Browse users and groups_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Get user groups
     * @param accountId The accountId of the user, which uniquely identifies the user across all Atlassian products. For example, _384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192_. Required, unless &#x60;username&#x60; or &#x60;key&#x60; is specified.
     * @param username This parameter has been deprecated due to privacy changes. Use &#x60;accountId&#x60; instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.  The username of the user. Required, unless &#x60;accountId&#x60; or &#x60;key&#x60; is specified.
     * @param key This parameter has been deprecated due to privacy changes. Use &#x60;accountId&#x60; instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.  The key of the user. Required, unless &#x60;accountId&#x60; or &#x60;username&#x60; is specified.
     */
    public comAtlassianJiraRestV2IssueUserResourceGetUserGroupsGet (accountId?: string, username?: string, key?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Array<GroupName>;  }> {
        const localVarPath = this.basePath + '/api/3/user/groups';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (accountId !== undefined) {
            localVarQueryParameters['accountId'] = ObjectSerializer.serialize(accountId, "string");
        }

        if (username !== undefined) {
            localVarQueryParameters['username'] = ObjectSerializer.serialize(username, "string");
        }

        if (key !== undefined) {
            localVarQueryParameters['key'] = ObjectSerializer.serialize(key, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<GroupName>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<GroupName>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Deletes a user.  **[Permissions](#permissions) required:** Site administration (that is, membership of the _site-admin_ [group](https://confluence.atlassian.com/x/24xjL)).
     * @summary Delete user
     * @param accountId The accountId of the user, which uniquely identifies the user across all Atlassian products. For example, _384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192_. Required, unless &#x60;username&#x60; or &#x60;key&#x60; is specified.
     * @param username This parameter has been deprecated due to privacy changes. Use &#x60;accountId&#x60; instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.  The username of the user. Required, unless &#x60;accountId&#x60; or &#x60;key&#x60; is specified.
     * @param key This parameter has been deprecated due to privacy changes. Use &#x60;accountId&#x60; instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.  The key of the user. Required, unless &#x60;accountId&#x60; or &#x60;username&#x60; is specified.
     */
    public comAtlassianJiraRestV2IssueUserResourceRemoveUserDelete (accountId?: string, username?: string, key?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/user';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (accountId !== undefined) {
            localVarQueryParameters['accountId'] = ObjectSerializer.serialize(accountId, "string");
        }

        if (username !== undefined) {
            localVarQueryParameters['username'] = ObjectSerializer.serialize(username, "string");
        }

        if (key !== undefined) {
            localVarQueryParameters['key'] = ObjectSerializer.serialize(key, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Resets the default [issue table columns](https://confluence.atlassian.com/x/XYdKLg) for the user to the system default. If a username or account ID is not passed, the calling user's default columns are reset.  **[Permissions](#permissions) required:**  *   _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg), to set the columns on any user. *   Permission to access Jira, to set the calling user's columns.
     * @summary Reset user default columns
     * @param accountId The accountId of the user, which uniquely identifies the user across all Atlassian products. For example, _384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192_. Required, unless &#x60;username&#x60; is specified.
     * @param username This parameter has been deprecated due to privacy changes. Use &#x60;accountId&#x60; instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.  The username of the user. Required, unless &#x60;accountId&#x60; is specified.
     */
    public comAtlassianJiraRestV2IssueUserResourceResetUserColumnsDelete (accountId?: string, username?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/user/columns';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (accountId !== undefined) {
            localVarQueryParameters['accountId'] = ObjectSerializer.serialize(accountId, "string");
        }

        if (username !== undefined) {
            localVarQueryParameters['username'] = ObjectSerializer.serialize(username, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Sets the default [issue table columns](https://confluence.atlassian.com/x/XYdKLg) for the user. If a username or account ID is not passed, the calling user's default columns are set. If no column details are sent, then all default columns are removed.  The parameters for this resource are expressed as HTML form data. For example, in curl:  `curl -X PUT -d columns=summary -d columns=description https://your-domain.atlassian.net/rest/api/3/user/columns?accountId=384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192'`  **[Permissions](#permissions) required:**  *   _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg), to set the columns on any user. *   Permission to access Jira, to set the calling user's columns.
     * @summary Set user default columns
     * @param username This parameter has been deprecated due to privacy changes. Use &#x60;accountId&#x60; instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.  The username of the user. Cannot be provided with the query parameter &#x60;accountId&#x60;.
     * @param columns The ID of a column to set. To set multiple columns, send multiple &#x60;columns&#x60; parameters.
     * @param accountId The accountId of the user, which uniquely identifies the user across all Atlassian products. For example, _384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192_. Cannot be provided with the form parameter &#x60;username&#x60;.
     */
    public comAtlassianJiraRestV2IssueUserResourceSetUserColumnsPut (username: string, columns: Array<string>, accountId?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/user/columns';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'username' is not null or undefined
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling comAtlassianJiraRestV2IssueUserResourceSetUserColumnsPut.');
        }

        // verify required parameter 'columns' is not null or undefined
        if (columns === null || columns === undefined) {
            throw new Error('Required parameter columns was null or undefined when calling comAtlassianJiraRestV2IssueUserResourceSetUserColumnsPut.');
        }

        if (accountId !== undefined) {
            localVarQueryParameters['accountId'] = ObjectSerializer.serialize(accountId, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (username !== undefined) {
            localVarFormParams['username'] = ObjectSerializer.serialize(username, "string");
        }

        if (columns !== undefined) {
            localVarFormParams['columns'] = ObjectSerializer.serialize(columns, "Array<string>");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Creates a project version.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg) or _Administer Projects_ [project permission](https://confluence.atlassian.com/x/yodKLg).
     * @summary Create version
     * @param version
     */
    public comAtlassianJiraRestV2IssueVersionResourceCreateVersionPost (version: Version, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Version;  }> {
        const localVarPath = this.basePath + '/api/3/version';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'version' is not null or undefined
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling comAtlassianJiraRestV2IssueVersionResourceCreateVersionPost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(version, "Version")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Version;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Version");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Deletes a project version.  Alternative versions can be provided to update issues that use the deleted version in `fixVersion`, `affectedVersion`, or any version picker custom fields. If alternatives are not provided, occurrences of `fixVersion`, `affectedVersion`, and any version picker custom field, that contain the deleted version, are cleared. Any replacement version must be in the same project as the version being deleted and cannot be the version being deleted.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg) or _Administer Projects_ [project permission](https://confluence.atlassian.com/x/yodKLg).
     * @summary Delete and replace version
     * @param id The ID of the version.
     * @param deleteAndReplaceVersionBean
     */
    public comAtlassianJiraRestV2IssueVersionResourceDeleteAndReplaceVersionPost (id: string, deleteAndReplaceVersionBean: DeleteAndReplaceVersionBean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/version/{id}/removeAndSwap'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2IssueVersionResourceDeleteAndReplaceVersionPost.');
        }

        // verify required parameter 'deleteAndReplaceVersionBean' is not null or undefined
        if (deleteAndReplaceVersionBean === null || deleteAndReplaceVersionBean === undefined) {
            throw new Error('Required parameter deleteAndReplaceVersionBean was null or undefined when calling comAtlassianJiraRestV2IssueVersionResourceDeleteAndReplaceVersionPost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(deleteAndReplaceVersionBean, "DeleteAndReplaceVersionBean")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Deletes a project version.  Deprecated, use [Delete and replace version](#api-api-3-version-id-removeAndSwap-post) that supports swapping version values in custom fields, in addition to the swapping for `fixVersion` and `affectedVersion` provided in this resource.  Alternative versions can be provided to update issues that use the deleted version in `fixVersion` or `affectedVersion`. If alternatives are not provided, occurrences of `fixVersion` and `affectedVersion` that contain the deleted version are cleared.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg) or _Administer Projects_ [project permission](https://confluence.atlassian.com/x/yodKLg).
     * @summary Delete version
     * @param id The ID of the version.
     * @param moveFixIssuesTo The ID of the version to update &#x60;fixVersion&#x60; to when the field contains the deleted version. The replacement version must be in the same project as the version being deleted and cannot be the version being deleted.
     * @param moveAffectedIssuesTo The ID of the version to update &#x60;affectedVersion&#x60; to when the field contains the deleted version. The replacement version must be in the same project as the version being deleted and cannot be the version being deleted.
     */
    public comAtlassianJiraRestV2IssueVersionResourceDeleteVersionDelete (id: string, moveFixIssuesTo?: string, moveAffectedIssuesTo?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/version/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2IssueVersionResourceDeleteVersionDelete.');
        }

        if (moveFixIssuesTo !== undefined) {
            localVarQueryParameters['moveFixIssuesTo'] = ObjectSerializer.serialize(moveFixIssuesTo, "string");
        }

        if (moveAffectedIssuesTo !== undefined) {
            localVarQueryParameters['moveAffectedIssuesTo'] = ObjectSerializer.serialize(moveAffectedIssuesTo, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns a project version.  **[Permissions](#permissions) required:** _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg).
     * @summary Get version
     * @param id The ID of the version.
     * @param expand Use [expand](#expansion) to include additional information about version in the response. This parameter accepts multiple values separated by a comma:  *   &#x60;operations&#x60; Returns the list of operations available for this version. *   &#x60;remotelinks&#x60; Returns the list of remote links stored against this version. *   &#x60;issuesstatus&#x60; Returns the count of issues in this version for each of the status categories _to do_, _in progress_, _done_, and _unmapped_. The _unmapped_ property represents the number of issues with a status other than _to do_, _in progress_, and _done_.
     */
    public comAtlassianJiraRestV2IssueVersionResourceGetVersionGet (id: string, expand?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Version;  }> {
        const localVarPath = this.basePath + '/api/3/version/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2IssueVersionResourceGetVersionGet.');
        }

        if (expand !== undefined) {
            localVarQueryParameters['expand'] = ObjectSerializer.serialize(expand, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Version;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Version");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the following counts for a version:  *   Number of issues where the `fixVersion` is set to the version. *   Number of issues where the `affectedVersion` is set to the version. *   Number of issues where a version custom field is set to the version.  **[Permissions](#permissions) required:** _Browse projects_ project permission
     * @summary Get version's related issues count
     * @param id The ID of the version.
     */
    public comAtlassianJiraRestV2IssueVersionResourceGetVersionRelatedIssuesGet (id: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: VersionIssueCounts;  }> {
        const localVarPath = this.basePath + '/api/3/version/{id}/relatedIssueCounts'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2IssueVersionResourceGetVersionRelatedIssuesGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: VersionIssueCounts;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "VersionIssueCounts");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns counts of the issues and unresolved issues for the project version.  **[Permissions](#permissions) required:** _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg)
     * @summary Get version's unresolved issues count
     * @param id The ID of the version.
     */
    public comAtlassianJiraRestV2IssueVersionResourceGetVersionUnresolvedIssuesGet (id: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: VersionUnresolvedIssuesCount;  }> {
        const localVarPath = this.basePath + '/api/3/version/{id}/unresolvedIssueCount'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2IssueVersionResourceGetVersionUnresolvedIssuesGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: VersionUnresolvedIssuesCount;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "VersionUnresolvedIssuesCount");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Merges two project versions. The merge is completed by deleting the version specified in `id` and replacing any occurrences of its ID in `fixVersion` with the version ID specified in `moveIssuesTo`.  Consider using [Delete and replace version](#api-api-3-version-id-removeAndSwap-post) instead. This resource supports swapping version values in `fixVersion`, `affectedVersion`, and custom fields.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg) or _Administer Projects_ [project permission](https://confluence.atlassian.com/x/yodKLg).
     * @summary Merge versions
     * @param id The ID of the version to delete.
     * @param moveIssuesTo The ID of the version to merge into.
     */
    public comAtlassianJiraRestV2IssueVersionResourceMergeVersionsPut (id: string, moveIssuesTo: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/version/{id}/mergeto/{moveIssuesTo}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)))
            .replace('{' + 'moveIssuesTo' + '}', encodeURIComponent(String(moveIssuesTo)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2IssueVersionResourceMergeVersionsPut.');
        }

        // verify required parameter 'moveIssuesTo' is not null or undefined
        if (moveIssuesTo === null || moveIssuesTo === undefined) {
            throw new Error('Required parameter moveIssuesTo was null or undefined when calling comAtlassianJiraRestV2IssueVersionResourceMergeVersionsPut.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Modifies the version's sequence within the project, which affects the display order of the versions in Jira.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg) or _Administer Projects_ [project permission](https://confluence.atlassian.com/x/yodKLg).
     * @summary Move version
     * @param id The ID of the version to be moved.
     * @param versionMoveBean
     */
    public comAtlassianJiraRestV2IssueVersionResourceMoveVersionPost (id: string, versionMoveBean: VersionMoveBean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Version;  }> {
        const localVarPath = this.basePath + '/api/3/version/{id}/move'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2IssueVersionResourceMoveVersionPost.');
        }

        // verify required parameter 'versionMoveBean' is not null or undefined
        if (versionMoveBean === null || versionMoveBean === undefined) {
            throw new Error('Required parameter versionMoveBean was null or undefined when calling comAtlassianJiraRestV2IssueVersionResourceMoveVersionPost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(versionMoveBean, "VersionMoveBean")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Version;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Version");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Modifies a project version.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg) or _Administer Projects_ [project permission](https://confluence.atlassian.com/x/yodKLg).
     * @summary Update version
     * @param id The ID of the version.
     * @param version
     */
    public comAtlassianJiraRestV2IssueVersionResourceUpdateVersionPut (id: string, version: Version, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Version;  }> {
        const localVarPath = this.basePath + '/api/3/version/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2IssueVersionResourceUpdateVersionPut.');
        }

        // verify required parameter 'version' is not null or undefined
        if (version === null || version === undefined) {
            throw new Error('Required parameter version was null or undefined when calling comAtlassianJiraRestV2IssueVersionResourceUpdateVersionPut.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(version, "Version")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Version;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Version");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Deletes a worklog property.  **[Permissions](#permissions) required:**  *   _Browse projects_ and _Edit all worklogs_ or _Edit own worklogs_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in. *   If configured, permission to see the issue granted by [issue-level security](https://confluence.atlassian.com/x/J4lKLg).  If visibility is set on the workload item the user must be a member of the group or have the role granted visibility to the worklog, otherwise an error is returned.
     * @summary Delete worklog property
     * @param issueIdOrKey The ID or key of the issue.
     * @param worklogId The ID of the worklog.
     * @param propertyKey The key of the property.
     */
    public comAtlassianJiraRestV2IssueWorklogPropertyResourceDeleteWorklogPropertyDelete (issueIdOrKey: string, worklogId: string, propertyKey: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey}'
            .replace('{' + 'issueIdOrKey' + '}', encodeURIComponent(String(issueIdOrKey)))
            .replace('{' + 'worklogId' + '}', encodeURIComponent(String(worklogId)))
            .replace('{' + 'propertyKey' + '}', encodeURIComponent(String(propertyKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issueIdOrKey' is not null or undefined
        if (issueIdOrKey === null || issueIdOrKey === undefined) {
            throw new Error('Required parameter issueIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueWorklogPropertyResourceDeleteWorklogPropertyDelete.');
        }

        // verify required parameter 'worklogId' is not null or undefined
        if (worklogId === null || worklogId === undefined) {
            throw new Error('Required parameter worklogId was null or undefined when calling comAtlassianJiraRestV2IssueWorklogPropertyResourceDeleteWorklogPropertyDelete.');
        }

        // verify required parameter 'propertyKey' is not null or undefined
        if (propertyKey === null || propertyKey === undefined) {
            throw new Error('Required parameter propertyKey was null or undefined when calling comAtlassianJiraRestV2IssueWorklogPropertyResourceDeleteWorklogPropertyDelete.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the value of a worklog property.  **[Permissions](#permissions) required:**  *   _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in. *   If configured, permission to see the issue granted by [issue-level security](https://confluence.atlassian.com/x/J4lKLg).  If visibility is set on the workload item the user must be a member of the group or have the role granted visibility to the worklog, otherwise an error is returned.
     * @summary Get worklog property
     * @param issueIdOrKey The ID or key of the issue.
     * @param worklogId The ID of the worklog.
     * @param propertyKey The key of the property.
     */
    public comAtlassianJiraRestV2IssueWorklogPropertyResourceGetWorklogPropertyGet (issueIdOrKey: string, worklogId: string, propertyKey: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: EntityProperty;  }> {
        const localVarPath = this.basePath + '/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey}'
            .replace('{' + 'issueIdOrKey' + '}', encodeURIComponent(String(issueIdOrKey)))
            .replace('{' + 'worklogId' + '}', encodeURIComponent(String(worklogId)))
            .replace('{' + 'propertyKey' + '}', encodeURIComponent(String(propertyKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issueIdOrKey' is not null or undefined
        if (issueIdOrKey === null || issueIdOrKey === undefined) {
            throw new Error('Required parameter issueIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueWorklogPropertyResourceGetWorklogPropertyGet.');
        }

        // verify required parameter 'worklogId' is not null or undefined
        if (worklogId === null || worklogId === undefined) {
            throw new Error('Required parameter worklogId was null or undefined when calling comAtlassianJiraRestV2IssueWorklogPropertyResourceGetWorklogPropertyGet.');
        }

        // verify required parameter 'propertyKey' is not null or undefined
        if (propertyKey === null || propertyKey === undefined) {
            throw new Error('Required parameter propertyKey was null or undefined when calling comAtlassianJiraRestV2IssueWorklogPropertyResourceGetWorklogPropertyGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: EntityProperty;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "EntityProperty");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the keys of all properties for a worklog.  **[Permissions](#permissions) required:**  *   _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in. *   If configured, permission to see the issue granted by [issue-level security](https://confluence.atlassian.com/x/J4lKLg).  If visibility is set on the workload item the user must be a member of the group or have the role granted visibility to the worklog, otherwise an error is returned.
     * @summary Get worklog property keys
     * @param issueIdOrKey The ID or key of the issue.
     * @param worklogId The ID of the worklog.
     */
    public comAtlassianJiraRestV2IssueWorklogPropertyResourceGetWorklogPropertyKeysGet (issueIdOrKey: string, worklogId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PropertyKeys;  }> {
        const localVarPath = this.basePath + '/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties'
            .replace('{' + 'issueIdOrKey' + '}', encodeURIComponent(String(issueIdOrKey)))
            .replace('{' + 'worklogId' + '}', encodeURIComponent(String(worklogId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issueIdOrKey' is not null or undefined
        if (issueIdOrKey === null || issueIdOrKey === undefined) {
            throw new Error('Required parameter issueIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueWorklogPropertyResourceGetWorklogPropertyKeysGet.');
        }

        // verify required parameter 'worklogId' is not null or undefined
        if (worklogId === null || worklogId === undefined) {
            throw new Error('Required parameter worklogId was null or undefined when calling comAtlassianJiraRestV2IssueWorklogPropertyResourceGetWorklogPropertyKeysGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: PropertyKeys;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "PropertyKeys");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Sets the value of a worklog property. Use this operation to store custom data against the worklog.  The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.  **[Permissions](#permissions) required:**  *   _Browse projects_ and _Edit all worklogs_ or _Edit own worklogs_ [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in. *   If configured, permission to see the issue granted by [issue-level security](https://confluence.atlassian.com/x/J4lKLg).  If visibility is set on the workload item the user must be a member of the group or have the role granted visibility to the worklog, otherwise an error is returned.
     * @summary Set worklog property
     * @param issueIdOrKey The ID or key of the issue.
     * @param worklogId The ID of the worklog.
     * @param propertyKey The key of the issue property. The maximum length is 255 characters.
     * @param body
     */
    public comAtlassianJiraRestV2IssueWorklogPropertyResourceSetWorklogPropertyPut (issueIdOrKey: string, worklogId: string, propertyKey: string, body: any, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey}'
            .replace('{' + 'issueIdOrKey' + '}', encodeURIComponent(String(issueIdOrKey)))
            .replace('{' + 'worklogId' + '}', encodeURIComponent(String(worklogId)))
            .replace('{' + 'propertyKey' + '}', encodeURIComponent(String(propertyKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'issueIdOrKey' is not null or undefined
        if (issueIdOrKey === null || issueIdOrKey === undefined) {
            throw new Error('Required parameter issueIdOrKey was null or undefined when calling comAtlassianJiraRestV2IssueWorklogPropertyResourceSetWorklogPropertyPut.');
        }

        // verify required parameter 'worklogId' is not null or undefined
        if (worklogId === null || worklogId === undefined) {
            throw new Error('Required parameter worklogId was null or undefined when calling comAtlassianJiraRestV2IssueWorklogPropertyResourceSetWorklogPropertyPut.');
        }

        // verify required parameter 'propertyKey' is not null or undefined
        if (propertyKey === null || propertyKey === undefined) {
            throw new Error('Required parameter propertyKey was null or undefined when calling comAtlassianJiraRestV2IssueWorklogPropertyResourceSetWorklogPropertyPut.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling comAtlassianJiraRestV2IssueWorklogPropertyResourceSetWorklogPropertyPut.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "any")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns a list of IDs and delete timestamps for worklogs deleted after a date and time.  This resource is paginated, with a limit of 1000 worklogs per page. Each page lists worklogs from oldest to youngest. If the number of items in the date range exceeds 1000, `until` indicates the timestamp of the youngest item on the page. Also, `nextPage` provides the URL for the next page of worklogs. The `lastPage` parameter is set to true on the last page of worklogs.  This resource does not return worklogs deleted during the minute preceding the request.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Get IDs of deleted worklogs
     * @param since The date and time, in UNIX timestamp format, after which deleted worklogs are returned.
     */
    public comAtlassianJiraRestV2IssueWorklogWorklogResourceGetIdsOfWorklogsDeletedSinceGet (since?: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: ChangedWorklogs;  }> {
        const localVarPath = this.basePath + '/api/3/worklog/deleted';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (since !== undefined) {
            localVarQueryParameters['since'] = ObjectSerializer.serialize(since, "number");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ChangedWorklogs;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ChangedWorklogs");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns a list of IDs and update timestamps for worklogs updated after a date and time.  This resource is paginated, with a limit of 1000 worklogs per page. Each page lists worklogs from oldest to youngest. If the number of items in the date range exceeds 1000, `until` indicates the timestamp of the youngest item on the page. Also, `nextPage` provides the URL for the next page of worklogs. The `lastPage` parameter is set to true on the last page of worklogs.  This resource does not return worklogs updated during the minute preceding the request.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Get IDs of updated worklogs
     * @param since The date and time, in UNIX timestamp format, after which updated worklogs are returned.
     * @param expand Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts &#x60;properties&#x60; that returns the properties of each worklog.
     */
    public comAtlassianJiraRestV2IssueWorklogWorklogResourceGetIdsOfWorklogsModifiedSinceGet (since?: number, expand?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: ChangedWorklogs;  }> {
        const localVarPath = this.basePath + '/api/3/worklog/updated';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (since !== undefined) {
            localVarQueryParameters['since'] = ObjectSerializer.serialize(since, "number");
        }

        if (expand !== undefined) {
            localVarQueryParameters['expand'] = ObjectSerializer.serialize(expand, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ChangedWorklogs;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ChangedWorklogs");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns worklog details for a list of worklog IDs.  The returned list of worklogs is limited to 1000 items.  **[Permissions](#permissions) required:** Permission to access Jira, however, worklogs are only returned where either of the following is true:  *   the worklog is set as _Viewable by All Users_. *   the user is a member of a project role or group with permission to view the worklog.
     * @summary Get worklogs
     * @param worklogIdsRequestBean A JSON object containing a list of worklog IDs.
     * @param expand Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts &#x60;properties&#x60; that returns the properties of each worklog.
     */
    public comAtlassianJiraRestV2IssueWorklogWorklogResourceGetWorklogsForIdsPost (worklogIdsRequestBean: WorklogIdsRequestBean, expand?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Array<Worklog>;  }> {
        const localVarPath = this.basePath + '/api/3/worklog/list';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'worklogIdsRequestBean' is not null or undefined
        if (worklogIdsRequestBean === null || worklogIdsRequestBean === undefined) {
            throw new Error('Required parameter worklogIdsRequestBean was null or undefined when calling comAtlassianJiraRestV2IssueWorklogWorklogResourceGetWorklogsForIdsPost.');
        }

        if (expand !== undefined) {
            localVarQueryParameters['expand'] = ObjectSerializer.serialize(expand, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(worklogIdsRequestBean, "WorklogIdsRequestBean")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<Worklog>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Worklog>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns a [notification scheme](https://confluence.atlassian.com/x/8YdKLg), including the list of events and the recipients who will receive notifications for those events.  **[Permissions](#permissions) required:** Permission to access Jira, however the requesting user must have permission to administer at least one project associated with the requested notification scheme.
     * @summary Get notification scheme
     * @param id The ID of the notification scheme. Use [Get notification schemes paginated](#api-api-3-notificationscheme-get) to get a list of notification scheme IDs.
     * @param expand Use [expand](#expansion) to include additional information in the response. This parameter accepts multiple values separated by a comma:  *   &#x60;all&#x60; Returns all expandable information. *   &#x60;field&#x60; Returns information about any custom fields assigned to receive an event. *   &#x60;group&#x60; Returns information about any groups assigned to receive an event. *   &#x60;notificationSchemeEvents&#x60; Returns a list of event associations. This list is returned for all expandable information. *   &#x60;projectRole&#x60; Returns information about any project roles assigned to receive an event. *   &#x60;user&#x60; Returns information about any users assigned to receive an event.
     */
    public comAtlassianJiraRestV2NotificationNotificationSchemeResourceGetNotificationSchemeGet (id: number, expand?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: NotificationScheme;  }> {
        const localVarPath = this.basePath + '/api/3/notificationscheme/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2NotificationNotificationSchemeResourceGetNotificationSchemeGet.');
        }

        if (expand !== undefined) {
            localVarQueryParameters['expand'] = ObjectSerializer.serialize(expand, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: NotificationScheme;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "NotificationScheme");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns a [paginated](#pagination) list of [notification schemes](https://confluence.atlassian.com/x/8YdKLg) in order by display name.  ### About notification schemes  A notification scheme is a list of events and recipients who will receive notifications for those events. The list is contained within the `notificationSchemeEvents` object and contains pairs of `events` and `notifications`:  *   `event` Identifies the type of event. The events can be [Jira system events](https://confluence.atlassian.com/x/8YdKLg#Creatinganotificationscheme-eventsEvents) or [custom events](https://confluence.atlassian.com/x/AIlKLg). *   `notifications` Identifies the [recipients](https://confluence.atlassian.com/x/8YdKLg#Creatinganotificationscheme-recipientsRecipients) of notifications for each event. Recipients can be any of the following types:     *   `CurrentAssignee`     *   `Reporter`     *   `CurrentUser`     *   `ProjectLead`     *   `ComponentLead`     *   `User` (the `parameter` is the user key)     *   `Group` (the `parameter` is the group name)     *   `ProjectRole` (the `parameter` is the project role ID)     *   `EmailAddress`     *   `AllWatchers`     *   `UserCustomField` (the `parameter` is the ID of the custom field)     *   `GroupCustomField`(the `parameter` is the ID of the custom field)  _Note that you should allow for events without recipients to appear in responses._  **[Permissions](#permissions) required:** Permission to access Jira, however the requesting user must have permission to administer at least one project associated with a notification scheme for it to be returned.
     * @summary Get notification schemes paginated
     * @param startAt The index of the first item to return in a page of results (page offset).
     * @param maxResults The maximum number of items to return per page. The maximum is &#x60;50&#x60;.
     * @param expand Use [expand](#expansion) to include additional information in the response. This parameter accepts multiple values separated by a comma:  *   &#x60;all&#x60; Returns all expandable information. *   &#x60;field&#x60; Returns information about any custom fields assigned to receive an event. *   &#x60;group&#x60; Returns information about any groups assigned to receive an event. *   &#x60;notificationSchemeEvents&#x60; Returns a list of event associations. This list is returned for all expandable information. *   &#x60;projectRole&#x60; Returns information about any project roles assigned to receive an event. *   &#x60;user&#x60; Returns information about any users assigned to receive an event.
     */
    public comAtlassianJiraRestV2NotificationNotificationSchemeResourceGetNotificationSchemesGet (startAt?: number, maxResults?: number, expand?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PageOfNotificationScheme;  }> {
        const localVarPath = this.basePath + '/api/3/notificationscheme';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (startAt !== undefined) {
            localVarQueryParameters['startAt'] = ObjectSerializer.serialize(startAt, "number");
        }

        if (maxResults !== undefined) {
            localVarQueryParameters['maxResults'] = ObjectSerializer.serialize(maxResults, "number");
        }

        if (expand !== undefined) {
            localVarQueryParameters['expand'] = ObjectSerializer.serialize(expand, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: PageOfNotificationScheme;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "PageOfNotificationScheme");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Gets a [notification scheme](https://confluence.atlassian.com/x/8YdKLg) associated with the project. See the [Get notification scheme](#api-api-3-notificationscheme-id-get) resource for more information about notification schemes.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg) or _Administer Projects_ [project permission](https://confluence.atlassian.com/x/yodKLg).
     * @summary Get project notification scheme
     * @param projectKeyOrId The project ID or project key (case sensitive).
     * @param expand Use [expand](#expansion) to include additional information in the response. This parameter accepts multiple values separated by a comma:  *   &#x60;all&#x60; Returns all expandable information. *   &#x60;field&#x60; Returns information about any custom fields assigned to receive an event. *   &#x60;group&#x60; Returns information about any groups assigned to receive an event. *   &#x60;notificationSchemeEvents&#x60; Returns a list of event associations. This list is returned for all expandable information. *   &#x60;projectRole&#x60; Returns information about any project roles assigned to receive an event. *   &#x60;user&#x60; Returns information about any users assigned to receive an event.
     */
    public comAtlassianJiraRestV2NotificationProjectNotificationSchemeResourceGetNotificationSchemeGet (projectKeyOrId: string, expand?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: NotificationScheme;  }> {
        const localVarPath = this.basePath + '/api/3/project/{projectKeyOrId}/notificationscheme'
            .replace('{' + 'projectKeyOrId' + '}', encodeURIComponent(String(projectKeyOrId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'projectKeyOrId' is not null or undefined
        if (projectKeyOrId === null || projectKeyOrId === undefined) {
            throw new Error('Required parameter projectKeyOrId was null or undefined when calling comAtlassianJiraRestV2NotificationProjectNotificationSchemeResourceGetNotificationSchemeGet.');
        }

        if (expand !== undefined) {
            localVarQueryParameters['expand'] = ObjectSerializer.serialize(expand, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: NotificationScheme;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "NotificationScheme");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns all permissions, including:  *   global permissions. *   project permissions. *   global permissions added by plugins.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Get all permissions
     */
    public comAtlassianJiraRestV2PermissionPermissionsResourceGetAllPermissionsGet (options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Permissions;  }> {
        const localVarPath = this.basePath + '/api/3/permissions';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Permissions;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Permissions");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns:  *   for a list of global permissions, the global permissions granted to the user. *   for a list of project permissions and lists of projects and issues, for each project permission a list of the projects and issues the user can access or manipulate.  Note that:  *   Invalid project and issue IDs are ignored. *   A maximum of 1000 projects and 1000 issues can be checked.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Get bulk permissions
     * @param bulkPermissionsRequestBean Details of the permissions to check.
     */
    public comAtlassianJiraRestV2PermissionPermissionsResourceGetBulkPermissionsPost (bulkPermissionsRequestBean: BulkPermissionsRequestBean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: BulkPermissionGrants;  }> {
        const localVarPath = this.basePath + '/api/3/permissions/check';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'bulkPermissionsRequestBean' is not null or undefined
        if (bulkPermissionsRequestBean === null || bulkPermissionsRequestBean === undefined) {
            throw new Error('Required parameter bulkPermissionsRequestBean was null or undefined when calling comAtlassianJiraRestV2PermissionPermissionsResourceGetBulkPermissionsPost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(bulkPermissionsRequestBean, "BulkPermissionsRequestBean")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: BulkPermissionGrants;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "BulkPermissionGrants");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns a list of permissions indicating which permissions the user has. Details of the user's permissions can be obtained in a global, project, or issue context.  The user is reported as having a project permission:  *   in the global context, if the user has the project permission in any project. *   for a project, where the project permission is determined using issue data, if the user meets the permission's criteria for any issue in the project. Otherwise, if the user has the project permission in the project. *   for an issue, where a project permission is determined using issue data, if the user has the permission in the issue. Otherwise, if the user has the project permission in the project containing the issue.  This means that users may be shown as having an issue permission (such as EDIT\\_ISSUE) in the global context or a project context but may not have the permission for any or all issues. For example, if Reporters have the EDIT\\_ISSUE permission a user would be shown as having this permission in the global context or the context of a project, because any user can be a reporter. However, if they are not the user who reported the issue queried they would not have EDIT_ISSUE permission for that issue.  Global permissions are unaffected by context.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Get my permissions
     * @param projectKey The key of project. Ignored if &#x60;projectId&#x60; is provided.
     * @param projectId The ID of project.
     * @param issueKey The key of the issue. Ignored if &#x60;issueId&#x60; is provided.
     * @param issueId The ID of the issue.
     * @param permissions A comma-separated list of permission keys. [Omitting this parameter is **deprecated**.](https://developer.atlassian.com/cloud/jira/platform/change-notice-get-my-permissions-requires-permissions-query-parameter/) To get the list of available permissions, use [Get all permissions](#api-api-3-permissions-get). Note that deprecated keys cannot be used. Deprecated keys are not returned by [Get all permissions](#api-api-3-permissions-get) but are returned by this operation if &#x60;permissions&#x60; is omitted.
     */
    public comAtlassianJiraRestV2PermissionPermissionsResourceGetMyPermissionsGet (projectKey?: string, projectId?: string, issueKey?: string, issueId?: string, permissions?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Permissions;  }> {
        const localVarPath = this.basePath + '/api/3/mypermissions';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (projectKey !== undefined) {
            localVarQueryParameters['projectKey'] = ObjectSerializer.serialize(projectKey, "string");
        }

        if (projectId !== undefined) {
            localVarQueryParameters['projectId'] = ObjectSerializer.serialize(projectId, "string");
        }

        if (issueKey !== undefined) {
            localVarQueryParameters['issueKey'] = ObjectSerializer.serialize(issueKey, "string");
        }

        if (issueId !== undefined) {
            localVarQueryParameters['issueId'] = ObjectSerializer.serialize(issueId, "string");
        }

        if (permissions !== undefined) {
            localVarQueryParameters['permissions'] = ObjectSerializer.serialize(permissions, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Permissions;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Permissions");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns all the projects where the user is granted a list of project permissions.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Get permitted projects
     * @param permissionsKeysBean
     */
    public comAtlassianJiraRestV2PermissionPermissionsResourceGetPermittedProjectsPost (permissionsKeysBean: PermissionsKeysBean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PermittedProjects;  }> {
        const localVarPath = this.basePath + '/api/3/permissions/project';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'permissionsKeysBean' is not null or undefined
        if (permissionsKeysBean === null || permissionsKeysBean === undefined) {
            throw new Error('Required parameter permissionsKeysBean was null or undefined when calling comAtlassianJiraRestV2PermissionPermissionsResourceGetPermittedProjectsPost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(permissionsKeysBean, "PermissionsKeysBean")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: PermittedProjects;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "PermittedProjects");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Associates a permission scheme with a particular project. See [Managing project permissions](https://confluence.atlassian.com/x/yodKLg) for more information about permission schemes.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg)
     * @summary Assign permission scheme
     * @param projectKeyOrId The project ID or project key (case sensitive).
     * @param idBean
     * @param expand Use [expand](#expansion) to include additional information in the response. This parameter accepts multiple values separated by a comma. Note that permissions are included when you specify any value:  *   &#x60;all&#x60; Returns all expandable information. *   &#x60;field&#x60; Returns information about the custom field granted the permission. *   &#x60;group&#x60; Returns information about the group that is granted the permission. *   &#x60;permissions&#x60; Returns all permission grants for each permission scheme. *   &#x60;projectRole&#x60; Returns information about the project role granted the permission. *   &#x60;user&#x60; Returns information about the user who is granted the permission.
     */
    public comAtlassianJiraRestV2PermissionProjectPermissionSchemeResourceAssignPermissionSchemePut (projectKeyOrId: string, idBean: IdBean, expand?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PermissionScheme;  }> {
        const localVarPath = this.basePath + '/api/3/project/{projectKeyOrId}/permissionscheme'
            .replace('{' + 'projectKeyOrId' + '}', encodeURIComponent(String(projectKeyOrId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'projectKeyOrId' is not null or undefined
        if (projectKeyOrId === null || projectKeyOrId === undefined) {
            throw new Error('Required parameter projectKeyOrId was null or undefined when calling comAtlassianJiraRestV2PermissionProjectPermissionSchemeResourceAssignPermissionSchemePut.');
        }

        // verify required parameter 'idBean' is not null or undefined
        if (idBean === null || idBean === undefined) {
            throw new Error('Required parameter idBean was null or undefined when calling comAtlassianJiraRestV2PermissionProjectPermissionSchemeResourceAssignPermissionSchemePut.');
        }

        if (expand !== undefined) {
            localVarQueryParameters['expand'] = ObjectSerializer.serialize(expand, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(idBean, "IdBean")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: PermissionScheme;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "PermissionScheme");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Gets the [permission scheme](https://confluence.atlassian.com/x/yodKLg) associated with the project.  **[Permissions](#permissions) required:** _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg) or _Administer projects_ [project permission](https://confluence.atlassian.com/x/yodKLg)
     * @summary Get assigned permission scheme
     * @param projectKeyOrId The project ID or project key (case sensitive).
     * @param expand Use [expand](#expansion) to include additional information in the response. This parameter accepts multiple values separated by a comma. Note that permissions are included when you specify any value:  *   &#x60;all&#x60; Returns all expandable information. *   &#x60;field&#x60; Returns information about the custom field granted the permission. *   &#x60;group&#x60; Returns information about the group that is granted the permission. *   &#x60;permissions&#x60; Returns all permission grants for each permission scheme. *   &#x60;projectRole&#x60; Returns information about the project role granted the permission. *   &#x60;user&#x60; Returns information about the user who is granted the permission.
     */
    public comAtlassianJiraRestV2PermissionProjectPermissionSchemeResourceGetAssignedPermissionSchemeGet (projectKeyOrId: string, expand?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PermissionScheme;  }> {
        const localVarPath = this.basePath + '/api/3/project/{projectKeyOrId}/permissionscheme'
            .replace('{' + 'projectKeyOrId' + '}', encodeURIComponent(String(projectKeyOrId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'projectKeyOrId' is not null or undefined
        if (projectKeyOrId === null || projectKeyOrId === undefined) {
            throw new Error('Required parameter projectKeyOrId was null or undefined when calling comAtlassianJiraRestV2PermissionProjectPermissionSchemeResourceGetAssignedPermissionSchemeGet.');
        }

        if (expand !== undefined) {
            localVarQueryParameters['expand'] = ObjectSerializer.serialize(expand, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: PermissionScheme;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "PermissionScheme");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Deletes the locale of the current user, which restores the default setting.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Delete locale
     */
    public comAtlassianJiraRestV2PreferenceCurrentUserPreferencesResourceDeleteLocaleDelete (options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/mypreferences/locale';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the locale for the current user.  If the user has no language preference set (which is the default setting) or this resource is accessed anonymous, the browser locale detected by Jira is returned. Jira detects the browser locale using the _Accept-Language_ header in the request. However, if this doesn't match a locale available Jira, the site default locale is returned.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Get locale
     */
    public comAtlassianJiraRestV2PreferenceCurrentUserPreferencesResourceGetLocaleGet (options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Locale;  }> {
        const localVarPath = this.basePath + '/api/3/mypreferences/locale';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Locale;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Locale");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the value of a preference of the user.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Get preference
     * @param key The key of the preference.
     */
    public comAtlassianJiraRestV2PreferenceCurrentUserPreferencesResourceGetPreferenceGet (key: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: string;  }> {
        const localVarPath = this.basePath + '/api/3/mypreferences';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'key' is not null or undefined
        if (key === null || key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling comAtlassianJiraRestV2PreferenceCurrentUserPreferencesResourceGetPreferenceGet.');
        }

        if (key !== undefined) {
            localVarQueryParameters['key'] = ObjectSerializer.serialize(key, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: string;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "string");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Deletes a preference of the user, which restores the default value of system defined settings.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Delete preference
     * @param key The key of the preference.
     */
    public comAtlassianJiraRestV2PreferenceCurrentUserPreferencesResourceRemovePreferenceDelete (key: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/mypreferences';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'key' is not null or undefined
        if (key === null || key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling comAtlassianJiraRestV2PreferenceCurrentUserPreferencesResourceRemovePreferenceDelete.');
        }

        if (key !== undefined) {
            localVarQueryParameters['key'] = ObjectSerializer.serialize(key, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Sets the locale of the current user. The requested locale must be one supported by the instance of Jira.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Set locale
     * @param locale The locale defined in a LocaleBean.
     */
    public comAtlassianJiraRestV2PreferenceCurrentUserPreferencesResourceSetLocalePut (locale: Locale, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/mypreferences/locale';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'locale' is not null or undefined
        if (locale === null || locale === undefined) {
            throw new Error('Required parameter locale was null or undefined when calling comAtlassianJiraRestV2PreferenceCurrentUserPreferencesResourceSetLocalePut.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(locale, "Locale")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Creates a preference for the user or updates a preference's value by sending a plain text string. For example, `false`. An arbitrary preference can be created with the value containing up to 255 characters. In addition, the following keys define system preferences that can be set or created:  *   _user.notifications.mimetype_ The mime type used in notifications sent to the user. Defaults to `html`. *   _user.notify.own.changes_ Indicates whether the user gets notified of their own changes. Defaults to `false`. *   _jira.user.locale_ The locale of the user. By default, not set: the user takes the instance locale. See also, [Set locale](#api-api-3-mypreferences-locale-put). *   _jira.user.timezone_ The time zone of the user. By default, not set, the user takes the instance time zone. *   _user.default.share.private_ Indicates whether new [filters](https://confluence.atlassian.com/x/eQiiLQ) are set to private. Defaults to `true`. *   _user.keyboard.shortcuts.disabled_ Indicates whether keyboard shortcuts are disabled. Defaults to `false`. *   _user.autowatch.disabled_ Indicates whether the user automatically watches issues they create or add a comment to. By default, not set: the user takes the instance autowatch setting.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Set preference
     * @param key The key of the preference. The maximum length is 255 characters.
     * @param body The value of the preference as a plain text string. The maximum length is 255 characters.
     */
    public comAtlassianJiraRestV2PreferenceCurrentUserPreferencesResourceSetPreferencePut (key: string, body: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/mypreferences';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'key' is not null or undefined
        if (key === null || key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling comAtlassianJiraRestV2PreferenceCurrentUserPreferencesResourceSetPreferencePut.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling comAtlassianJiraRestV2PreferenceCurrentUserPreferencesResourceSetPreferencePut.');
        }

        if (key !== undefined) {
            localVarQueryParameters['key'] = ObjectSerializer.serialize(key, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "string")
        };

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns a [project type](https://confluence.atlassian.com/x/Var1Nw) if it is accessible to the logged in user.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Get accessible project type by key
     * @param projectTypeKey The key of the project type.
     */
    public comAtlassianJiraRestV2ProjectTypeProjectTypeResourceGetAccessibleProjectTypeByKeyGet (projectTypeKey: 'business' | 'ops' | 'service_desk' | 'software', options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: ProjectType;  }> {
        const localVarPath = this.basePath + '/api/3/project/type/{projectTypeKey}/accessible'
            .replace('{' + 'projectTypeKey' + '}', encodeURIComponent(String(projectTypeKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'projectTypeKey' is not null or undefined
        if (projectTypeKey === null || projectTypeKey === undefined) {
            throw new Error('Required parameter projectTypeKey was null or undefined when calling comAtlassianJiraRestV2ProjectTypeProjectTypeResourceGetAccessibleProjectTypeByKeyGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ProjectType;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ProjectType");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns all [project types](https://confluence.atlassian.com/x/Var1Nw), whether or not the instance has a valid license for each type.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Get all project types
     */
    public comAtlassianJiraRestV2ProjectTypeProjectTypeResourceGetAllProjectTypesGet (options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Array<ProjectType>;  }> {
        const localVarPath = this.basePath + '/api/3/project/type';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<ProjectType>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<ProjectType>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns a [project type](https://confluence.atlassian.com/x/Var1Nw).  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Get project type by key
     * @param projectTypeKey The key of the project type.
     */
    public comAtlassianJiraRestV2ProjectTypeProjectTypeResourceGetProjectTypeByKeyGet (projectTypeKey: 'business' | 'ops' | 'service_desk' | 'software', options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: ProjectType;  }> {
        const localVarPath = this.basePath + '/api/3/project/type/{projectTypeKey}'
            .replace('{' + 'projectTypeKey' + '}', encodeURIComponent(String(projectTypeKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'projectTypeKey' is not null or undefined
        if (projectTypeKey === null || projectTypeKey === undefined) {
            throw new Error('Required parameter projectTypeKey was null or undefined when calling comAtlassianJiraRestV2ProjectTypeProjectTypeResourceGetProjectTypeByKeyGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ProjectType;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ProjectType");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Deletes a property value from multiple issues. The issues to be updated can be specified by filter criteria.  The criteria the filter used to identify eligible issues are:  *   `entityIds` Only issues from this list are eligible. *   `currentValue` Only issues with the property set to this value are eligible.  If both criteria is specified, they are joined with the logical _AND_: only issues that satisfy both criteria are considered eligible.  If no filter criteria are specified, all the issues visible to the user and where the user has the EDIT_ISSUES permission for the issue are considered eligible.  This operation is:  *   transactional, either the property is deleted from all eligible issues or, when errors occur, no properties are deleted. *   [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-api-3-task-taskId-get) to obtain subsequent updates.  **[Permissions](#permissions) required:**  *   _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) for each project containing issues. *   If configured, permission to see granted by [issue-level security](https://confluence.atlassian.com/x/J4lKLg) for each issue.  *   _Edit issues_ [project permission](https://confluence.atlassian.com/x/yodKLg) for each issue.
     * @summary Bulk delete issue property
     * @param propertyKey The key of the property.
     * @param issueFilterForBulkPropertyDelete
     */
    public comAtlassianJiraRestV2PropertyIssuePropertyBulkUpdateResourceBulkDeleteIssuePropertyDelete (propertyKey: string, issueFilterForBulkPropertyDelete: IssueFilterForBulkPropertyDelete, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/issue/properties/{propertyKey}'
            .replace('{' + 'propertyKey' + '}', encodeURIComponent(String(propertyKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'propertyKey' is not null or undefined
        if (propertyKey === null || propertyKey === undefined) {
            throw new Error('Required parameter propertyKey was null or undefined when calling comAtlassianJiraRestV2PropertyIssuePropertyBulkUpdateResourceBulkDeleteIssuePropertyDelete.');
        }

        // verify required parameter 'issueFilterForBulkPropertyDelete' is not null or undefined
        if (issueFilterForBulkPropertyDelete === null || issueFilterForBulkPropertyDelete === undefined) {
            throw new Error('Required parameter issueFilterForBulkPropertyDelete was null or undefined when calling comAtlassianJiraRestV2PropertyIssuePropertyBulkUpdateResourceBulkDeleteIssuePropertyDelete.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(issueFilterForBulkPropertyDelete, "IssueFilterForBulkPropertyDelete")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Sets a property value on multiple issues. The issues to be updated can be specified by a filter.  The filter identifies issues eligible for update using these criteria:  *   `entityIds` Only issues from this list are eligible. *   `currentValue` Only issues with the property set to this value are eligible. *   `hasProperty`:     *   If _true_, only issues with the property are eligible.     *   If _false_, only issues without the property are eligible.  If more than one criteria is specified, they are joined with the logical _AND_: only issues that satisfy all criteria are eligible.  If an invalid combination of criteria is provided, an error is returned. For example, specifying a `currentValue` and `hasProperty` as _false_ would not match any issues (because without the property the property cannot have a value).  The filter is optional. Without the filter all the issues visible to the user and where the user has the EDIT_ISSUES permission for the issue are considered eligible.  This operation is:  *   transactional, either all eligible issues are updated or, when errors occur, none are updated. *   [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-api-3-task-taskId-get) to obtain subsequent updates.  **[Permissions](#permissions) required:**  *   _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) for each project containing issues. *   If configured, permission to see granted by [issue-level security](https://confluence.atlassian.com/x/J4lKLg) for each issue.  *   _Edit issues_ [project permission](https://confluence.atlassian.com/x/yodKLg) for each issue.
     * @summary Bulk set issue property
     * @param propertyKey The key of the property. The maximum length is 255 characters.
     * @param bulkIssuePropertyUpdateRequest
     */
    public comAtlassianJiraRestV2PropertyIssuePropertyBulkUpdateResourceBulkSetIssuePropertyPut (propertyKey: string, bulkIssuePropertyUpdateRequest: BulkIssuePropertyUpdateRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/issue/properties/{propertyKey}'
            .replace('{' + 'propertyKey' + '}', encodeURIComponent(String(propertyKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'propertyKey' is not null or undefined
        if (propertyKey === null || propertyKey === undefined) {
            throw new Error('Required parameter propertyKey was null or undefined when calling comAtlassianJiraRestV2PropertyIssuePropertyBulkUpdateResourceBulkSetIssuePropertyPut.');
        }

        // verify required parameter 'bulkIssuePropertyUpdateRequest' is not null or undefined
        if (bulkIssuePropertyUpdateRequest === null || bulkIssuePropertyUpdateRequest === undefined) {
            throw new Error('Required parameter bulkIssuePropertyUpdateRequest was null or undefined when calling comAtlassianJiraRestV2PropertyIssuePropertyBulkUpdateResourceBulkSetIssuePropertyPut.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(bulkIssuePropertyUpdateRequest, "BulkIssuePropertyUpdateRequest")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Add a share permissions to a filter. If you add a global share permission (one for all logged-in users or the public) it will overwrite all share permissions for the filter.  Be aware that this method uses different objects for updating share permissions compared to [Update filter](#api-api-3-filter-id-put).  **[Permissions](#permissions) required:** _Share dashboards and filters_ [global permission](https://confluence.atlassian.com/x/x4dKLg) and the user must own the filter.
     * @summary Add share permission
     * @param id The ID of the filter.
     * @param sharePermissionInputBean
     */
    public comAtlassianJiraRestV2SearchFilterResourceAddSharePermissionPost (id: number, sharePermissionInputBean: SharePermissionInputBean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Array<SharePermission>;  }> {
        const localVarPath = this.basePath + '/api/3/filter/{id}/permission'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2SearchFilterResourceAddSharePermissionPost.');
        }

        // verify required parameter 'sharePermissionInputBean' is not null or undefined
        if (sharePermissionInputBean === null || sharePermissionInputBean === undefined) {
            throw new Error('Required parameter sharePermissionInputBean was null or undefined when calling comAtlassianJiraRestV2SearchFilterResourceAddSharePermissionPost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(sharePermissionInputBean, "SharePermissionInputBean")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<SharePermission>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<SharePermission>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Creates a new filter. The new filter is not shared and not selected as a favorite.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Create filter
     * @param filter The filter to create.
     * @param expand Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts multiple values separated by a comma:  *   &#x60;sharedUsers&#x60; Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don&#39;t specify &#x60;sharedUsers&#x60;, then the &#x60;sharedUsers&#x60; object is returned but it doesn&#39;t list any users. The list of users returned is limited to 1000, to access additional users append &#x60;[start-index:end-index]&#x60; to the expand request. For example, to access the next 1000 users, use &#x60;?expand&#x3D;sharedUsers[1001:2000]&#x60;. *   &#x60;subscriptions&#x60; Returns the users that are subscribed to the filter. If you don&#39;t specify &#x60;subscriptions&#x60;, the &#x60;subscriptions&#x60; object is returned but it doesn&#39;t list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append &#x60;[start-index:end-index]&#x60; to the expand request. For example, to access the next 1000 subscriptions, use &#x60;?expand&#x3D;subscriptions[1001:2000]&#x60;.
     */
    public comAtlassianJiraRestV2SearchFilterResourceCreateFilterPost (filter: Filter, expand?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Filter;  }> {
        const localVarPath = this.basePath + '/api/3/filter';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling comAtlassianJiraRestV2SearchFilterResourceCreateFilterPost.');
        }

        if (expand !== undefined) {
            localVarQueryParameters['expand'] = ObjectSerializer.serialize(expand, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(filter, "Filter")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Filter;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Filter");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Removes a filter as a favorite for the calling user.  **[Permissions](#permissions) required:** Permission to access Jira, however, the user can only remove a favorite from their favorite list where at least one of the following applies:  *   the user owns the filter. *   the user is a member of a group the filter is shared with. *   the user has _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) for a private project the filter is shared with. *   the filter is shared with a public project, even if the user is anonymous. *   the filter is shared with the public, even if the user is anonymous. .
     * @summary Remove filter as favorite
     * @param id The ID of the filter.
     * @param expand Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts multiple values separated by a comma:  *   &#x60;sharedUsers&#x60; Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don&#39;t specify &#x60;sharedUsers&#x60;, then the &#x60;sharedUsers&#x60; object is returned but it doesn&#39;t list any users. The list of users returned is limited to 1000, to access additional users append &#x60;[start-index:end-index]&#x60; to the expand request. For example, to access the next 1000 users, use &#x60;?expand&#x3D;sharedUsers[1001:2000]&#x60;. *   &#x60;subscriptions&#x60; Returns the users that are subscribed to the filter. If you don&#39;t specify &#x60;subscriptions&#x60;, the &#x60;subscriptions&#x60; object is returned but it doesn&#39;t list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append &#x60;[start-index:end-index]&#x60; to the expand request. For example, to access the next 1000 subscriptions, use &#x60;?expand&#x3D;subscriptions[1001:2000]&#x60;.
     */
    public comAtlassianJiraRestV2SearchFilterResourceDeleteFavouriteForFilterDelete (id: number, expand?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Filter;  }> {
        const localVarPath = this.basePath + '/api/3/filter/{id}/favourite'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2SearchFilterResourceDeleteFavouriteForFilterDelete.');
        }

        if (expand !== undefined) {
            localVarQueryParameters['expand'] = ObjectSerializer.serialize(expand, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Filter;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Filter");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Delete a filter.  **[Permissions](#permissions) required:** Permission to access Jira, however the following rules govern what a user can delete:  *   Private filters (that is, filters that are not shared) can only be deleted by the creator of the filter. *   Shared filters can only be deleted by the creator of the filter or a Jira administrator.
     * @summary Delete filter
     * @param id The ID of the filter to delete.
     */
    public comAtlassianJiraRestV2SearchFilterResourceDeleteFilterDelete (id: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/filter/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2SearchFilterResourceDeleteFilterDelete.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Deletes a share permission from a filter.  **[Permissions](#permissions) required:** Permission to access Jira and the user must own the filter.
     * @summary Delete share permission
     * @param id The ID of the filter.
     * @param permissionId The ID of the share permission.
     */
    public comAtlassianJiraRestV2SearchFilterResourceDeleteSharePermissionDelete (id: number, permissionId: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/filter/{id}/permission/{permissionId}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)))
            .replace('{' + 'permissionId' + '}', encodeURIComponent(String(permissionId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2SearchFilterResourceDeleteSharePermissionDelete.');
        }

        // verify required parameter 'permissionId' is not null or undefined
        if (permissionId === null || permissionId === undefined) {
            throw new Error('Required parameter permissionId was null or undefined when calling comAtlassianJiraRestV2SearchFilterResourceDeleteSharePermissionDelete.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the columns configured for a filter. The column configuration is used when the filter's results are viewed in _List View_ with the _Columns_ set to _Filter_.  **[Permissions](#permissions) required:** Permission to access Jira, however, a filter is only returned where at least one of the following applies:  *   the user owns the filter. *   the user is a member of a group the filter is shared with. *   the user has _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) for a private project the filter is shared with. *   the filter is shared with a public project, even if the user is anonymous. *   the filter is shared with the public, even if the user is anonymous. .
     * @summary Get columns
     * @param id The ID of the filter.
     */
    public comAtlassianJiraRestV2SearchFilterResourceGetColumnsGet (id: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Array<ColumnItem>;  }> {
        const localVarPath = this.basePath + '/api/3/filter/{id}/columns'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2SearchFilterResourceGetColumnsGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<ColumnItem>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<ColumnItem>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the default sharing settings for new filters and dashboards for a user.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Get default share scope
     */
    public comAtlassianJiraRestV2SearchFilterResourceGetDefaultShareScopeGet (options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: DefaultShareScope;  }> {
        const localVarPath = this.basePath + '/api/3/filter/defaultShareScope';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: DefaultShareScope;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "DefaultShareScope");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the favorite filters of the calling user.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Get favorite filters
     * @param expand Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts multiple values separated by a comma:  *   &#x60;sharedUsers&#x60; Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don&#39;t specify &#x60;sharedUsers&#x60;, then the &#x60;sharedUsers&#x60; object is returned but it doesn&#39;t list any users. The list of users returned is limited to 1000, to access additional users append &#x60;[start-index:end-index]&#x60; to the expand request. For example, to access the next 1000 users, use &#x60;?expand&#x3D;sharedUsers[1001:2000]&#x60;. *   &#x60;subscriptions&#x60; Returns the users that are subscribed to the filter. If you don&#39;t specify &#x60;subscriptions&#x60;, the &#x60;subscriptions&#x60; object is returned but it doesn&#39;t list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append &#x60;[start-index:end-index]&#x60; to the expand request. For example, to access the next 1000 subscriptions, use &#x60;?expand&#x3D;subscriptions[1001:2000]&#x60;.
     */
    public comAtlassianJiraRestV2SearchFilterResourceGetFavouriteFiltersGet (expand?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Array<Filter>;  }> {
        const localVarPath = this.basePath + '/api/3/filter/favourite';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (expand !== undefined) {
            localVarQueryParameters['expand'] = ObjectSerializer.serialize(expand, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<Filter>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Filter>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns a filter.  **[Permissions](#permissions) required:** Permission to access Jira, however, a filter is only returned where at least one of the following applies:  *   the user owns the filter. *   the user is a member of a group the filter is shared with. *   the user has _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) for a private project the filter is shared with. *   the filter is shared with a public project, even if the user is anonymous. *   the filter is shared with the public, even if the user is anonymous. .
     * @summary Get filter
     * @param id The ID of the filter to return.
     * @param expand Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts multiple values separated by a comma:  *   &#x60;sharedUsers&#x60; Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don&#39;t specify &#x60;sharedUsers&#x60;, then the &#x60;sharedUsers&#x60; object is returned but it doesn&#39;t list any users. The list of users returned is limited to 1000, to access additional users append &#x60;[start-index:end-index]&#x60; to the expand request. For example, to access the next 1000 users, use &#x60;?expand&#x3D;sharedUsers[1001:2000]&#x60;. *   &#x60;subscriptions&#x60; Returns the users that are subscribed to the filter. If you don&#39;t specify &#x60;subscriptions&#x60;, the &#x60;subscriptions&#x60; object is returned but it doesn&#39;t list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append &#x60;[start-index:end-index]&#x60; to the expand request. For example, to access the next 1000 subscriptions, use &#x60;?expand&#x3D;subscriptions[1001:2000]&#x60;.
     */
    public comAtlassianJiraRestV2SearchFilterResourceGetFilterGet (id: number, expand?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Filter;  }> {
        const localVarPath = this.basePath + '/api/3/filter/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2SearchFilterResourceGetFilterGet.');
        }

        if (expand !== undefined) {
            localVarQueryParameters['expand'] = ObjectSerializer.serialize(expand, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Filter;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Filter");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns all filters. Deprecated, use [Search for filters](#api-api-3-filter-search-get) that supports search and pagination.  **[Permissions](#permissions) required:** Permission to access Jira, however, only the following filters are returned:  *   Filters owned by the user. *   Filters shared with a group that the user is a member of. *   Filters shared with a private project that the user has _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) for. *   Filters shared with a public project, even if the user is anonymous. *   Filters shared with the public, even if the user is anonymous.
     * @summary Get filters
     * @param expand Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts multiple values separated by a comma:  *   &#x60;sharedUsers&#x60; Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don&#39;t specify &#x60;sharedUsers&#x60;, then the &#x60;sharedUsers&#x60; object is returned but it doesn&#39;t list any users. The list of users returned is limited to 1000, to access additional users append &#x60;[start-index:end-index]&#x60; to the expand request. For example, to access the next 1000 users, use &#x60;?expand&#x3D;sharedUsers[1001:2000]&#x60;. *   &#x60;subscriptions&#x60; Returns the users that are subscribed to the filter. If you don&#39;t specify &#x60;subscriptions&#x60;, the &#x60;subscriptions&#x60; object is returned but it doesn&#39;t list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append &#x60;[start-index:end-index]&#x60; to the expand request. For example, to access the next 1000 subscriptions, use &#x60;?expand&#x3D;subscriptions[1001:2000]&#x60;.
     */
    public comAtlassianJiraRestV2SearchFilterResourceGetFiltersGet (expand?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Array<Filter>;  }> {
        const localVarPath = this.basePath + '/api/3/filter';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (expand !== undefined) {
            localVarQueryParameters['expand'] = ObjectSerializer.serialize(expand, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<Filter>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Filter>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Searches for filters. This method is similar to [Get filters](#api-api-3-filter-get) except that the results can be refined to include filters that have specific attributes. For example, filters with a particular name. When multiple attributes are specified only filters matching all attributes are returned.  **[Permissions](#permissions) required:** Permission to access Jira, however, only the following filters that match the query parameters are returned:  *   filters owned by the user. *   filters shared with a group that the user is a member of. *   filters shared with a private project that the user has _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) for. *   filters shared with a public project. *   filters shared with the public.
     * @summary Search for filters
     * @param filterName String used to perform a case-insensitive partial match with &#x60;name&#x60;.
     * @param accountId User account ID used to return filters with the matching &#x60;owner.accountId&#x60;. This parameter cannot be used with &#x60;owner&#x60;.
     * @param owner This parameter has been deprecated due to privacy changes. Use &#x60;accountId&#x60; instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. User name used to return filters with the matching &#x60;owner.name&#x60;. This parameter cannot be used with &#x60;accountId&#x60;.
     * @param groupname Group name used to returns filters that are shared with a group that matches &#x60;sharePermissions.group.groupname&#x60;.
     * @param projectId Project ID used to returns filters that are shared with a project that matches &#x60;sharePermissions.project.id&#x60;.
     * @param orderBy [Orders](#ordering) the results using one of these filter properties:  *   &#x60;description&#x60; Orders by filter &#x60;description&#x60;. Note that this ordering works independently of whether the expand to display the description field is in use. *   &#x60;favourite_count&#x60; Orders by &#x60;favouritedCount&#x60;. *   &#x60;is_favourite&#x60; Orders by &#x60;favourite&#x60;. *   &#x60;id&#x60; Orders by filter &#x60;id&#x60;. *   &#x60;name&#x60; Orders by filter &#x60;name&#x60;. *   &#x60;owner&#x60; Orders by &#x60;owner.accountId&#x60;.
     * @param startAt The index of the first item to return in a page of results (page offset).
     * @param maxResults The maximum number of items to return per page. The maximum is &#x60;100&#x60;.
     * @param expand Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts multiple values separated by a comma:  *   &#x60;description&#x60; Returns the description of the filter. *   &#x60;favourite&#x60; Returns an indicator of whether the user has set the filter as a favorite. *   &#x60;favouritedCount&#x60; Returns a count of how many users have set this filter as a favorite. *   &#x60;jql&#x60; Returns the JQL query that the filter uses. *   &#x60;owner&#x60; Returns the owner of the filter. *   &#x60;searchUrl&#x60; Returns a URL to perform the filter&#39;s JQL query. *   &#x60;sharePermissions&#x60; Returns the share permissions defined for the filter. *   &#x60;subscriptions&#x60; Returns the users that are subscribed to the filter. *   &#x60;viewUrl&#x60; Returns a URL to view the filter.
     */
    public comAtlassianJiraRestV2SearchFilterResourceGetFiltersPaginatedGet (filterName?: string, accountId?: string, owner?: string, groupname?: string, projectId?: number, orderBy?: 'id' | 'name' | 'description' | 'owner' | 'favorite_count' | 'is_favorite' | '-id' | '-name' | '-description' | '-owner' | '-favorite_count' | '-is_favorite', startAt?: number, maxResults?: number, expand?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PageOfFoundFilter;  }> {
        const localVarPath = this.basePath + '/api/3/filter/search';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (filterName !== undefined) {
            localVarQueryParameters['filterName'] = ObjectSerializer.serialize(filterName, "string");
        }

        if (accountId !== undefined) {
            localVarQueryParameters['accountId'] = ObjectSerializer.serialize(accountId, "string");
        }

        if (owner !== undefined) {
            localVarQueryParameters['owner'] = ObjectSerializer.serialize(owner, "string");
        }

        if (groupname !== undefined) {
            localVarQueryParameters['groupname'] = ObjectSerializer.serialize(groupname, "string");
        }

        if (projectId !== undefined) {
            localVarQueryParameters['projectId'] = ObjectSerializer.serialize(projectId, "number");
        }

        if (orderBy !== undefined) {
            localVarQueryParameters['orderBy'] = ObjectSerializer.serialize(orderBy, "'id' | 'name' | 'description' | 'owner' | 'favorite_count' | 'is_favorite' | '-id' | '-name' | '-description' | '-owner' | '-favorite_count' | '-is_favorite'");
        }

        if (startAt !== undefined) {
            localVarQueryParameters['startAt'] = ObjectSerializer.serialize(startAt, "number");
        }

        if (maxResults !== undefined) {
            localVarQueryParameters['maxResults'] = ObjectSerializer.serialize(maxResults, "number");
        }

        if (expand !== undefined) {
            localVarQueryParameters['expand'] = ObjectSerializer.serialize(expand, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: PageOfFoundFilter;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "PageOfFoundFilter");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the filters owned by the calling user. If `includeFavourites` is `true`, the user's favorite filters are also returned.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Get my filters
     * @param expand Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts multiple values separated by a comma:  *   &#x60;sharedUsers&#x60; Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don&#39;t specify &#x60;sharedUsers&#x60;, then the &#x60;sharedUsers&#x60; object is returned but it doesn&#39;t list any users. The list of users returned is limited to 1000, to access additional users append &#x60;[start-index:end-index]&#x60; to the expand request. For example, to access the next 1000 users, use &#x60;?expand&#x3D;sharedUsers[1001:2000]&#x60;. *   &#x60;subscriptions&#x60; Returns the users that are subscribed to the filter. If you don&#39;t specify &#x60;subscriptions&#x60;, the &#x60;subscriptions&#x60; object is returned but it doesn&#39;t list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append &#x60;[start-index:end-index]&#x60; to the expand request. For example, to access the next 1000 subscriptions, use &#x60;?expand&#x3D;subscriptions[1001:2000]&#x60;.
     * @param includeFavourites Include the user&#39;s favorite filters in the response.
     */
    public comAtlassianJiraRestV2SearchFilterResourceGetMyFiltersGet (expand?: string, includeFavourites?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Array<Filter>;  }> {
        const localVarPath = this.basePath + '/api/3/filter/my';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (expand !== undefined) {
            localVarQueryParameters['expand'] = ObjectSerializer.serialize(expand, "string");
        }

        if (includeFavourites !== undefined) {
            localVarQueryParameters['includeFavourites'] = ObjectSerializer.serialize(includeFavourites, "boolean");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<Filter>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Filter>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns a share permission for a filter. A filter can be shared with groups, projects, all logged-in users, or the public. Sharing with all logged-in users or the public is known as a global share permission.  **[Permissions](#permissions) required:** Permission to access Jira, however, a filter is only returned where at least one of the following applies:  *   the user owns the filter. *   the user is a member of a group the filter is shared with. *   the user has _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) for a private project the filter is shared with. *   the filter is shared with a public project, even if the user is anonymous. *   the filter is shared with the public, even if the user is anonymous. .
     * @summary Get share permission
     * @param id The ID of the filter.
     * @param permissionId The ID of the share permission.
     */
    public comAtlassianJiraRestV2SearchFilterResourceGetSharePermissionGet (id: number, permissionId: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: SharePermission;  }> {
        const localVarPath = this.basePath + '/api/3/filter/{id}/permission/{permissionId}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)))
            .replace('{' + 'permissionId' + '}', encodeURIComponent(String(permissionId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2SearchFilterResourceGetSharePermissionGet.');
        }

        // verify required parameter 'permissionId' is not null or undefined
        if (permissionId === null || permissionId === undefined) {
            throw new Error('Required parameter permissionId was null or undefined when calling comAtlassianJiraRestV2SearchFilterResourceGetSharePermissionGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: SharePermission;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "SharePermission");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the share permissions for a filter. A filter can be shared with groups, projects, all logged-in users, or the public. Sharing with all logged-in users or the public is known as a global share permission.  **[Permissions](#permissions) required:** Permission to access Jira, however, a filter is only returned where at least one of the following applies:  *   the user owns the filter. *   the user is a member of a group the filter is shared with. *   the user has _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) for a private project the filter is shared with. *   the filter is shared with a public project, even if the user is anonymous. *   the filter is shared with the public, even if the user is anonymous. .
     * @summary Get share permissions
     * @param id The ID of the filter.
     */
    public comAtlassianJiraRestV2SearchFilterResourceGetSharePermissionsGet (id: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Array<SharePermission>;  }> {
        const localVarPath = this.basePath + '/api/3/filter/{id}/permission'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2SearchFilterResourceGetSharePermissionsGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<SharePermission>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<SharePermission>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Reset the user's column configuration for the filter to the default.  **[Permissions](#permissions) required:** Permission to access Jira, however, columns are only reset for filters where at least one of the following applies:  *   the user owns the filter. *   the user is a member of a group the filter is shared with. *   the user has _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) for a private project the filter is shared with. *   the filter is shared with a public project, even if the user is anonymous. *   the filter is shared with the public, even if the user is anonymous. .
     * @summary Reset columns
     * @param id The ID of the filter.
     */
    public comAtlassianJiraRestV2SearchFilterResourceResetColumnsDelete (id: number, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/filter/{id}/columns'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2SearchFilterResourceResetColumnsDelete.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Sets the columns for a filter. Only navigable fields can be set as columns. Use [Get fields](#api-api-3-field-get) to get the list fields in Jira. A navigable field has `navigable` set to `true`.  The parameters for this resource are expressed as HTML form data. For example, in curl:  `curl -X PUT -d columns=summary -d columns=description https://your-domain.atlassian.net/rest/api/3/filter/10000/columns`  **[Permissions](#permissions) required:** Permission to access Jira, however, columns are only set for filters where at least one of the following applies:  *   the user owns the filter. *   the user is a member of a group the filter is shared with. *   the user has _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) for a private project the filter is shared with. *   the filter is shared with a public project, even if the user is anonymous. *   the filter is shared with the public, even if the user is anonymous. .
     * @summary Set columns
     * @param id The ID of the filter.
     * @param columns The IDs of the fields to set as columns. In the form data, specify each field as &#x60;columns&#x3D;id&#x60;, where &#x60;id&#x60; is the _id_ of a field (as seen in the response for [Get fields](#api-api-3-field-get)). For example, &#x60;columns&#x3D;summary&#x60;.
     */
    public comAtlassianJiraRestV2SearchFilterResourceSetColumnsPut (id: number, columns: Array<string>, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/filter/{id}/columns'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2SearchFilterResourceSetColumnsPut.');
        }

        // verify required parameter 'columns' is not null or undefined
        if (columns === null || columns === undefined) {
            throw new Error('Required parameter columns was null or undefined when calling comAtlassianJiraRestV2SearchFilterResourceSetColumnsPut.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        if (columns !== undefined) {
            localVarFormParams['columns'] = ObjectSerializer.serialize(columns, "Array<string>");
        }

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Sets the default sharing for new filters and dashboards for a user.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Set default share scope
     * @param defaultShareScope
     */
    public comAtlassianJiraRestV2SearchFilterResourceSetDefaultShareScopePut (defaultShareScope: DefaultShareScope, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: DefaultShareScope;  }> {
        const localVarPath = this.basePath + '/api/3/filter/defaultShareScope';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'defaultShareScope' is not null or undefined
        if (defaultShareScope === null || defaultShareScope === undefined) {
            throw new Error('Required parameter defaultShareScope was null or undefined when calling comAtlassianJiraRestV2SearchFilterResourceSetDefaultShareScopePut.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(defaultShareScope, "DefaultShareScope")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: DefaultShareScope;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "DefaultShareScope");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Add a filter as a favorite for the calling user.  **[Permissions](#permissions) required:** Permission to access Jira, however, the user can only favorite a filter where at least one of the following applies:  *   the user owns the filter. *   the user is a member of a group the filter is shared with. *   the user has _Browse projects_ [project permission](https://confluence.atlassian.com/x/yodKLg) for a private project the filter is shared with. *   the filter is shared with a public project, even if the user is anonymous. *   the filter is shared with the public, even if the user is anonymous. .
     * @summary Add filter as favorite
     * @param id The ID of the filter.
     * @param expand Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts multiple values separated by a comma:  *   &#x60;sharedUsers&#x60; Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don&#39;t specify &#x60;sharedUsers&#x60;, then the &#x60;sharedUsers&#x60; object is returned but it doesn&#39;t list any users. The list of users returned is limited to 1000, to access additional users append &#x60;[start-index:end-index]&#x60; to the expand request. For example, to access the next 1000 users, use &#x60;?expand&#x3D;sharedUsers[1001:2000]&#x60;. *   &#x60;subscriptions&#x60; Returns the users that are subscribed to the filter. If you don&#39;t specify &#x60;subscriptions&#x60;, the &#x60;subscriptions&#x60; object is returned but it doesn&#39;t list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append &#x60;[start-index:end-index]&#x60; to the expand request. For example, to access the next 1000 subscriptions, use &#x60;?expand&#x3D;subscriptions[1001:2000]&#x60;.
     */
    public comAtlassianJiraRestV2SearchFilterResourceSetFavouriteForFilterPut (id: number, expand?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Filter;  }> {
        const localVarPath = this.basePath + '/api/3/filter/{id}/favourite'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2SearchFilterResourceSetFavouriteForFilterPut.');
        }

        if (expand !== undefined) {
            localVarQueryParameters['expand'] = ObjectSerializer.serialize(expand, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Filter;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Filter");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Updates an existing filter. Use this method to update a filter's name, description, JQL, or sharing.  **[Permissions](#permissions) required:** Permission to access Jira, however the following rules govern what a user can update:  *   Private filters (that is, filters that are not shared) can only be updated by the creator of the filter. *   Shared filters can only be updated by the creator of the filter or a Jira administrator.
     * @summary Update filter
     * @param id The ID of the filter to update.
     * @param filter The filter to update.
     * @param expand Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts multiple values separated by a comma:  *   &#x60;sharedUsers&#x60; Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don&#39;t specify &#x60;sharedUsers&#x60;, then the &#x60;sharedUsers&#x60; object is returned but it doesn&#39;t list any users. The list of users returned is limited to 1000, to access additional users append &#x60;[start-index:end-index]&#x60; to the expand request. For example, to access the next 1000 users, use &#x60;?expand&#x3D;sharedUsers[1001:2000]&#x60;. *   &#x60;subscriptions&#x60; Returns the users that are subscribed to the filter. If you don&#39;t specify &#x60;subscriptions&#x60;, the &#x60;subscriptions&#x60; object is returned but it doesn&#39;t list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append &#x60;[start-index:end-index]&#x60; to the expand request. For example, to access the next 1000 subscriptions, use &#x60;?expand&#x3D;subscriptions[1001:2000]&#x60;.
     */
    public comAtlassianJiraRestV2SearchFilterResourceUpdateFilterPut (id: number, filter: Filter, expand?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Filter;  }> {
        const localVarPath = this.basePath + '/api/3/filter/{id}'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling comAtlassianJiraRestV2SearchFilterResourceUpdateFilterPut.');
        }

        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling comAtlassianJiraRestV2SearchFilterResourceUpdateFilterPut.');
        }

        if (expand !== undefined) {
            localVarQueryParameters['expand'] = ObjectSerializer.serialize(expand, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(filter, "Filter")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Filter;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Filter");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Converts one or more JQL queries with user identifiers (username or user key) to equivalent JQL queries with account IDs.  You may wish to use this operation if your system stores JQL queries and you want to make them GDPR-compliant. For more information about GDPR-related changes, see the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/).  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Convert user identifiers to account IDs in JQL queries
     * @param jQLPersonalDataMigrationRequest
     */
    public comAtlassianJiraRestV2SearchJQLPersonalDataMigrationResourceMigrateQueriesPost (jQLPersonalDataMigrationRequest: JQLPersonalDataMigrationRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: ConvertedJQLQueries;  }> {
        const localVarPath = this.basePath + '/api/3/jql/pdcleaner';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'jQLPersonalDataMigrationRequest' is not null or undefined
        if (jQLPersonalDataMigrationRequest === null || jQLPersonalDataMigrationRequest === undefined) {
            throw new Error('Required parameter jQLPersonalDataMigrationRequest was null or undefined when calling comAtlassianJiraRestV2SearchJQLPersonalDataMigrationResourceMigrateQueriesPost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(jQLPersonalDataMigrationRequest, "JQLPersonalDataMigrationRequest")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ConvertedJQLQueries;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ConvertedJQLQueries");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns reference data for JQL searches. This is a downloadable version of the documentation provided in [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ) and [Advanced searching - functions reference](https://confluence.atlassian.com/x/hgORLQ), along with a list of JQL-reserved words. Use this information to assist with the programmatic creation of JQL queries or the validation of queries built in a custom query builder.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Get field reference data
     */
    public comAtlassianJiraRestV2SearchSearchAutoCompleteResourceGetAutoCompleteGet (options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: JQLReferenceData;  }> {
        const localVarPath = this.basePath + '/api/3/jql/autocompletedata';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: JQLReferenceData;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "JQLReferenceData");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the JQL search auto complete suggestions for a field.  Suggestions can be obtained by providing:  *   `fieldName` to get a list of all values for the field. *   `fieldName` and `fieldValue` to get a list of values containing the text in `fieldValue`. *   `fieldName` and `predicateName` to get a list of all predicate values for the field. *   `fieldName`, `predicateName`, and `predicateValue` to get a list of predicate values containing the text in `predicateValue`.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Get field auto complete suggestions
     * @param fieldName The name of the field.
     * @param fieldValue The partial field item name entered by the user.
     * @param predicateName The name of the [CHANGED operator predicate](https://confluence.atlassian.com/x/hQORLQ#Advancedsearching-operatorsreference-CHANGEDCHANGED) for which the suggestions are generated. The valid predicate operators are _by_, _from_, and _to_.
     * @param predicateValue The partial predicate item name entered by the user.
     */
    public comAtlassianJiraRestV2SearchSearchAutoCompleteResourceGetFieldAutoCompleteForQueryStringGet (fieldName?: string, fieldValue?: string, predicateName?: string, predicateValue?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: AutoCompleteSuggestions;  }> {
        const localVarPath = this.basePath + '/api/3/jql/autocompletedata/suggestions';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (fieldName !== undefined) {
            localVarQueryParameters['fieldName'] = ObjectSerializer.serialize(fieldName, "string");
        }

        if (fieldValue !== undefined) {
            localVarQueryParameters['fieldValue'] = ObjectSerializer.serialize(fieldValue, "string");
        }

        if (predicateName !== undefined) {
            localVarQueryParameters['predicateName'] = ObjectSerializer.serialize(predicateName, "string");
        }

        if (predicateValue !== undefined) {
            localVarQueryParameters['predicateValue'] = ObjectSerializer.serialize(predicateValue, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: AutoCompleteSuggestions;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "AutoCompleteSuggestions");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ).  If the JQL query expression is too large to be encoded as a query parameter, use the [POST](#api-api-3-search-post) version of this resource.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Search for issues using JQL (GET)
     * @param jql The [JQL](https://confluence.atlassian.com/x/egORLQ) that defines the search. If no JQL expression is provided, all issues are returned. Note that &#x60;username&#x60; and &#x60;userkey&#x60; have been deprecated as search terms for this parameter. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. Use &#x60;accountId&#x60; instead.
     * @param startAt The index of the first item to return in the page of results (page offset).
     * @param maxResults The maximum number of items to return per page. The maximum is &#x60;100&#x60;.
     * @param validateQuery Determines how to validate the JQL query and treat the validation results. Supported values are:  *   &#x60;strict&#x60; Returns a 400 response code if any errors are found, along with a list of all errors (and warnings). *   &#x60;warn&#x60; Returns all errors as warnings. *   &#x60;none&#x60; No validation is performed. *   &#x60;true&#x60; _Deprecated_ A legacy synonym for &#x60;strict&#x60;. *   &#x60;false&#x60; _Deprecated_ A legacy synonym for &#x60;warn&#x60;.  Note: If the JQL is not correctly formed a 400 response code is returned, regardless of the &#x60;validateQuery&#x60; value.
     * @param fields A comma-separated list of fields to return for each issue, use it to retrieve a subset of fields. Allowed values:  *   &#x60;*all&#x60; Returns all fields. *   &#x60;*navigable&#x60; Returns navigable fields. *   Any issue field, prefixed with a minus to exclude.  Examples:  *   &#x60;summary,comment&#x60; Returns only the summary and comments fields. *   &#x60;-description&#x60; Returns all navigable (default) fields except description. *   &#x60;*all,-comment&#x60; Returns all fields except comments.  This parameter may be specified multiple times. For example, &#x60;fields&#x3D;field1,field2&amp;fields&#x3D;field3&#x60;.  Note: All navigable fields are returned by default. This differs from [GET issue](#api-api-3-issue-issueIdOrKey-get) where the default is all fields.
     * @param expand Use [expand](#expansion) to include additional information about issues in the response. This parameter accepts multiple values separated by a comma:  *   &#x60;renderedFields&#x60; Returns field values rendered in HTML format. *   &#x60;names&#x60; Returns the display name of each field. *   &#x60;schema&#x60; Returns the schema describing a field type. *   &#x60;transitions&#x60; Returns all possible transitions for the issue. *   &#x60;operations&#x60; Returns all possible operations for the issue. *   &#x60;editmeta&#x60; Returns information about how each field can be edited. *   &#x60;changelog&#x60; Returns a list of recent updates to an issue, sorted by date, starting from the most recent. *   &#x60;versionedRepresentations&#x60; Instead of &#x60;fields&#x60;, returns &#x60;versionedRepresentations&#x60; a JSON array containing each version of a field&#39;s value, with the highest numbered item representing the most recent version.
     * @param properties A comma-separated list of issue property keys for issue properties to include in the results. This parameter may be specified multiple times. For example, &#x60;properties&#x3D;prop1,prop2&amp;properties&#x3D;prop3&#x60;. A maximum of 5 issue property keys can be specified.
     * @param fieldsByKeys Reference fields by their key (rather than ID).
     */
    public comAtlassianJiraRestV2SearchSearchResourceSearchForIssuesUsingJqlGet (jql?: string, startAt?: number, maxResults?: number, validateQuery?: 'strict' | 'warn' | 'none' | 'true' | 'false', fields?: Array<string>, expand?: string, properties?: Array<string>, fieldsByKeys?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: SearchResults;  }> {
        const localVarPath = this.basePath + '/api/3/search';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (jql !== undefined) {
            localVarQueryParameters['jql'] = ObjectSerializer.serialize(jql, "string");
        }

        if (startAt !== undefined) {
            localVarQueryParameters['startAt'] = ObjectSerializer.serialize(startAt, "number");
        }

        if (maxResults !== undefined) {
            localVarQueryParameters['maxResults'] = ObjectSerializer.serialize(maxResults, "number");
        }

        if (validateQuery !== undefined) {
            localVarQueryParameters['validateQuery'] = ObjectSerializer.serialize(validateQuery, "'strict' | 'warn' | 'none' | 'true' | 'false'");
        }

        if (fields !== undefined) {
            localVarQueryParameters['fields'] = ObjectSerializer.serialize(fields, "Array<string>");
        }

        if (expand !== undefined) {
            localVarQueryParameters['expand'] = ObjectSerializer.serialize(expand, "string");
        }

        if (properties !== undefined) {
            localVarQueryParameters['properties'] = ObjectSerializer.serialize(properties, "Array<string>");
        }

        if (fieldsByKeys !== undefined) {
            localVarQueryParameters['fieldsByKeys'] = ObjectSerializer.serialize(fieldsByKeys, "boolean");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: SearchResults;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "SearchResults");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ).  There is a [GET](#api-api-3-search-get) version of this resource that can be used for smaller JQL query expressions.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Search for issues using JQL (POST)
     * @param searchRequestBean A JSON object containing the search request.
     */
    public comAtlassianJiraRestV2SearchSearchResourceSearchForIssuesUsingJqlPost (searchRequestBean: SearchRequestBean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: SearchResults;  }> {
        const localVarPath = this.basePath + '/api/3/search';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'searchRequestBean' is not null or undefined
        if (searchRequestBean === null || searchRequestBean === undefined) {
            throw new Error('Required parameter searchRequestBean was null or undefined when calling comAtlassianJiraRestV2SearchSearchResourceSearchForIssuesUsingJqlPost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(searchRequestBean, "SearchRequestBean")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: SearchResults;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "SearchResults");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Finds users using a structured query and returns a list of user keys.  **[Permissions](#permissions) required:** _Browse users and groups_ [global permission](https://confluence.atlassian.com/x/x4dKLg). The available query statements are:  *   `is assignee of PROJ` Returns the users that are assignees of at least one issue in project _PROJ_. *   `is assignee of (PROJ-1, PROJ-2)` Returns users that are assignees on the issues _PROJ-1_ or _PROJ-2_. *   `is reporter of (PROJ-1, PROJ-2)` Returns users that are reporters on the issues _PROJ-1_ or _PROJ-2_. *   `is watcher of (PROJ-1, PROJ-2)` Returns users that are watchers on the issues _PROJ-1_ or _PROJ-2_. *   `is voter of (PROJ-1, PROJ-2)` Returns users that are voters on the issues _PROJ-1_ or _PROJ-2_. *   `is commenter of (PROJ-1, PROJ-2)` Returns users that have posted a comment on the issues _PROJ-1_ or _PROJ-2_. *   `is transitioner of (PROJ-1, PROJ-2)` Returns users that have performed a transition on issues _PROJ-1_ or _PROJ-2_. *   `[propertyKey].entity.property.path is \"property value\"` Returns users with the entity property value.  The list of issues can be extended as needed, as in _(PROJ-1, PROJ-2, ... PROJ-n)_. Statements can be combined using the `AND` and `OR` operators to form more complex queries. For example:  `is assignee of PROJ AND [propertyKey].entity.property.path is \"property value\"`
     * @summary Find user keys by query
     * @param query The search query.
     * @param startAt The index of the first item to return in a page of results (page offset).
     * @param maxResults The maximum number of items to return per page. The maximum is &#x60;1000&#x60;.
     * @param includeInactive Include inactive users in the results. This parameter is deprecated and will be removed soon. Searching for inactive users is no longer supported.
     */
    public comAtlassianJiraRestV2SearchUserSearchResourceFindUserKeysByQueryGet (query: string, startAt?: number, maxResults?: number, includeInactive?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PageOfUserKey;  }> {
        const localVarPath = this.basePath + '/api/3/user/search/query/key';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'query' is not null or undefined
        if (query === null || query === undefined) {
            throw new Error('Required parameter query was null or undefined when calling comAtlassianJiraRestV2SearchUserSearchResourceFindUserKeysByQueryGet.');
        }

        if (query !== undefined) {
            localVarQueryParameters['query'] = ObjectSerializer.serialize(query, "string");
        }

        if (startAt !== undefined) {
            localVarQueryParameters['startAt'] = ObjectSerializer.serialize(startAt, "number");
        }

        if (maxResults !== undefined) {
            localVarQueryParameters['maxResults'] = ObjectSerializer.serialize(maxResults, "number");
        }

        if (includeInactive !== undefined) {
            localVarQueryParameters['includeInactive'] = ObjectSerializer.serialize(includeInactive, "boolean");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: PageOfUserKey;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "PageOfUserKey");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Finds users using a structured query and returns user details.  **[Permissions](#permissions) required:** _Browse users and groups_ [global permission](https://confluence.atlassian.com/x/x4dKLg). The available queries statements are:  `is assignee of PROJ` Returns the users that are assignees of at least one issue in project _PROJ_.*   `is assignee of (PROJ-1, PROJ-2)` Returns users that are assignees on the issues _PROJ-1_ or _PROJ-2_. *   `is reporter of (PROJ-1, PROJ-2)` Returns users that are reporters on the issues _PROJ-1_ or _PROJ-2_. *   `is watcher of (PROJ-1, PROJ-2)` Returns users that are watchers on the issues _PROJ-1_ or _PROJ-2_. *   `is voter of (PROJ-1, PROJ-2)` Returns users that are voters on the issues _PROJ-1_ or _PROJ-2_. *   `is commenter of (PROJ-1, PROJ-2)` Returns users that have posted a comment on the issues _PROJ-1_ or _PROJ-2_. *   `is transitioner of (PROJ-1, PROJ-2)` Returns users that have performed a transition on issues _PROJ-1_ or _PROJ-2_. *   `[propertyKey].entity.property.path is \"property value\"` Returns users with the entity property value.  The list of issues can be extended as needed, as in _(PROJ-1, PROJ-2, ... PROJ-n)_. Statements can be combined using the `AND` and `OR` operators to form more complex queries. For example:  `is assignee of PROJ AND [propertyKey].entity.property.path is \"property value\"`
     * @summary Find users by query
     * @param query The search query.
     * @param startAt The index of the first item to return in a page of results (page offset).
     * @param maxResults The maximum number of items to return per page. The maximum is &#x60;1000&#x60;.
     * @param includeInactive Include inactive users in the results. This parameter is deprecated and will be removed soon. Searching for inactive users is no longer supported.
     */
    public comAtlassianJiraRestV2SearchUserSearchResourceFindUsersByQueryGet (query: string, startAt?: number, maxResults?: number, includeInactive?: boolean, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PageOfUser;  }> {
        const localVarPath = this.basePath + '/api/3/user/search/query';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'query' is not null or undefined
        if (query === null || query === undefined) {
            throw new Error('Required parameter query was null or undefined when calling comAtlassianJiraRestV2SearchUserSearchResourceFindUsersByQueryGet.');
        }

        if (query !== undefined) {
            localVarQueryParameters['query'] = ObjectSerializer.serialize(query, "string");
        }

        if (startAt !== undefined) {
            localVarQueryParameters['startAt'] = ObjectSerializer.serialize(startAt, "number");
        }

        if (maxResults !== undefined) {
            localVarQueryParameters['maxResults'] = ObjectSerializer.serialize(maxResults, "number");
        }

        if (includeInactive !== undefined) {
            localVarQueryParameters['includeInactive'] = ObjectSerializer.serialize(includeInactive, "boolean");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: PageOfUser;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "PageOfUser");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns all [issue security](https://confluence.atlassian.com/x/J4lKLg) levels for the project that the currently authenticated user has access to. If the user does not have permission to see an issue security level, then that level is not returned. If the user lacks the _Set Issue Security_ permission, then an empty list is returned.  **[Permissions](#permissions) required:** _Set Issue Security_ [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @summary Get project issue security levels
     * @param projectKeyOrId The project ID or project key (case sensitive).
     */
    public comAtlassianJiraRestV2SecuritylevelProjectSecurityLevelResourceGetSecurityLevelsForProjectGet (projectKeyOrId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: ProjectIssueSecurityLevels;  }> {
        const localVarPath = this.basePath + '/api/3/project/{projectKeyOrId}/securitylevel'
            .replace('{' + 'projectKeyOrId' + '}', encodeURIComponent(String(projectKeyOrId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'projectKeyOrId' is not null or undefined
        if (projectKeyOrId === null || projectKeyOrId === undefined) {
            throw new Error('Required parameter projectKeyOrId was null or undefined when calling comAtlassianJiraRestV2SecuritylevelProjectSecurityLevelResourceGetSecurityLevelsForProjectGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ProjectIssueSecurityLevels;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ProjectIssueSecurityLevels");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns information about the Jira instance.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Get Jira instance info
     */
    public comAtlassianJiraRestV2ServerInfoResourceGetServerInfoGet (options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: ServerInformation;  }> {
        const localVarPath = this.basePath + '/api/3/serverInfo';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ServerInformation;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ServerInformation");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Cancels a task.  **[Permissions](#permissions) required:** either of:  *   _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg). *   Creator of the task.
     * @summary Cancel task
     * @param taskId The ID of the task.
     */
    public comAtlassianJiraRestV2TaskTaskResourceCancelTaskPost (taskId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/task/{taskId}/cancel'
            .replace('{' + 'taskId' + '}', encodeURIComponent(String(taskId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'taskId' is not null or undefined
        if (taskId === null || taskId === undefined) {
            throw new Error('Required parameter taskId was null or undefined when calling comAtlassianJiraRestV2TaskTaskResourceCancelTaskPost.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the status of a [long-running asynchronous task](#async).  When a task has finished, this operation returns the JSON blob applicable to the task. See the documentation of the operation that created the task for details. Task details are not permanently retained. As of September 2019, details are retained for 14 days although this period may change without notice.  **[Permissions](#permissions) required:** either of:  *   _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg). *   Creator of the task.
     * @summary Get task
     * @param taskId The ID of the task.
     */
    public comAtlassianJiraRestV2TaskTaskResourceGetTaskGet (taskId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: TaskProgressObject;  }> {
        const localVarPath = this.basePath + '/api/3/task/{taskId}'
            .replace('{' + 'taskId' + '}', encodeURIComponent(String(taskId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'taskId' is not null or undefined
        if (taskId === null || taskId === undefined) {
            throw new Error('Required parameter taskId was null or undefined when calling comAtlassianJiraRestV2TaskTaskResourceGetTaskGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: TaskProgressObject;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "TaskProgressObject");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns details of the users specified in one or more user key, username, or user account ID parameters.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Bulk get users
     * @param startAt The index of the first item to return in a page of results (page offset).
     * @param maxResults The maximum number of items to return per page. The maximum is &#x60;200&#x60;.
     * @param username This parameter has been deprecated due to privacy changes. Use &#x60;accountIDs&#x60; instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. Username of a user. To specify multiple users, pass multiple &#x60;username&#x60; parameters. For example, &#x60;username&#x3D;fred&amp;username&#x3D;barney&#x60;. Required if &#x60;key&#x60; or &#x60;accountID&#x60; isn&#39;t provided. Cannot be provided if &#x60;key&#x60; or &#x60;accountID&#x60; is present.
     * @param key This parameter has been deprecated due to privacy changes. Use &#x60;accountIDs&#x60; instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. Key of a user. To specify multiple users, pass multiple &#x60;key&#x60; parameters. For example, &#x60;key&#x3D;fred&amp;key&#x3D;barney&#x60; Required if &#x60;username&#x60; or &#x60;accountID&#x60; isn&#39;t provided. Cannot be provided if &#x60;username&#x60; or &#x60;accountID&#x60; is present.
     * @param accountId Account ID of a user. To specify multiple users, pass multiple &#x60;accountId&#x60; parameters. For example, &#x60;accountId&#x3D;99:27935d01-92a7-4687-8272-a9b8d3b2ae2e&amp;accountId&#x3D;26912:8347-325f-ef346-bd0342234324&#x60; Required if &#x60;key&#x60; or &#x60;username&#x60; isn&#39;t provided. Cannot be provided if &#x60;key&#x60; or &#x60;username&#x60; is present.
     */
    public comAtlassianJiraRestV2UserUserBulkResourceBulkGetUsersGet (startAt?: number, maxResults?: number, username?: Array<string>, key?: Array<string>, accountId?: Array<string>, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PageOfUser;  }> {
        const localVarPath = this.basePath + '/api/3/user/bulk';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (startAt !== undefined) {
            localVarQueryParameters['startAt'] = ObjectSerializer.serialize(startAt, "number");
        }

        if (maxResults !== undefined) {
            localVarQueryParameters['maxResults'] = ObjectSerializer.serialize(maxResults, "number");
        }

        if (username !== undefined) {
            localVarQueryParameters['username'] = ObjectSerializer.serialize(username, "Array<string>");
        }

        if (key !== undefined) {
            localVarQueryParameters['key'] = ObjectSerializer.serialize(key, "Array<string>");
        }

        if (accountId !== undefined) {
            localVarQueryParameters['accountId'] = ObjectSerializer.serialize(accountId, "Array<string>");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: PageOfUser;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "PageOfUser");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns accountIds for the users specified in one or more user key or username parameters.  **[Permissions](#permissions) required:** Permission to access Jira.
     * @summary Bulk get users migration
     * @param startAt The index of the first item to return in a page of results (page offset).
     * @param maxResults The maximum number of items to return per page. The maximum is &#x60;200&#x60;.
     * @param username Username of a user. To specify multiple users, pass multiple &#x60;username&#x60; parameters. For example, &#x60;username&#x3D;fred&amp;username&#x3D;barney&#x60;. Required if &#x60;key&#x60; isn&#39;t provided. Cannot be provided if &#x60;key&#x60; is present.
     * @param key Key of a user. To specify multiple users, pass multiple &#x60;key&#x60; parameters. For example, &#x60;key&#x3D;fred&amp;key&#x3D;barney&#x60;. Required if &#x60;username&#x60; isn&#39;t provided. Cannot be provided if &#x60;username&#x60; is present.
     */
    public comAtlassianJiraRestV2UserUserBulkResourceBulkGetUsersMigrationGet (startAt?: number, maxResults?: number, username?: Array<string>, key?: Array<string>, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: Array<UserMigrationBean>;  }> {
        const localVarPath = this.basePath + '/api/3/user/bulk/migration';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (startAt !== undefined) {
            localVarQueryParameters['startAt'] = ObjectSerializer.serialize(startAt, "number");
        }

        if (maxResults !== undefined) {
            localVarQueryParameters['maxResults'] = ObjectSerializer.serialize(maxResults, "number");
        }

        if (username !== undefined) {
            localVarQueryParameters['username'] = ObjectSerializer.serialize(username, "Array<string>");
        }

        if (key !== undefined) {
            localVarQueryParameters['key'] = ObjectSerializer.serialize(key, "Array<string>");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<UserMigrationBean>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<UserMigrationBean>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Deletes a property from a user.  **[Permissions](#permissions) required:**  *   _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg), to delete a property from any user. *   Access to Jira, to delete a property from the calling user's record.  Note: These user properties are unrelated to the [Jira properties](https://confluence.atlassian.com/cloud/add-data-to-users-for-advanced-functions-jira-applications-only-744721649.html) that can be set through the UI.
     * @summary Delete user property
     * @param propertyKey The key of the user&#39;s property.
     * @param accountId The accountId of the user, which uniquely identifies the user across all Atlassian products. For example, _384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192_. Required, unless &#x60;username&#x60; or &#x60;userKey&#x60; is specified.
     * @param userKey This parameter has been deprecated due to privacy changes. Use &#x60;accountId&#x60; instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.  The key of the user. Required, unless &#x60;accountId&#x60; or &#x60;username&#x60; is specified.
     * @param username This parameter has been deprecated due to privacy changes. Use &#x60;accountId&#x60; instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.  The username of the user. Required, unless &#x60;accountId&#x60; or &#x60;userkey&#x60; is specified.
     */
    public comAtlassianJiraRestV2UserpropertyUserPropertyResourceDeleteUserPropertyDelete (propertyKey: string, accountId?: string, userKey?: string, username?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/user/properties/{propertyKey}'
            .replace('{' + 'propertyKey' + '}', encodeURIComponent(String(propertyKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'propertyKey' is not null or undefined
        if (propertyKey === null || propertyKey === undefined) {
            throw new Error('Required parameter propertyKey was null or undefined when calling comAtlassianJiraRestV2UserpropertyUserPropertyResourceDeleteUserPropertyDelete.');
        }

        if (accountId !== undefined) {
            localVarQueryParameters['accountId'] = ObjectSerializer.serialize(accountId, "string");
        }

        if (userKey !== undefined) {
            localVarQueryParameters['userKey'] = ObjectSerializer.serialize(userKey, "string");
        }

        if (username !== undefined) {
            localVarQueryParameters['username'] = ObjectSerializer.serialize(username, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the value of a user's property. If no property key is provided [Get user property keys](#api-api-3-user-properties-get) is called.  **[Permissions](#permissions) required:**  *   _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg), to get a property from any user. *   Access to Jira, to get a property from the calling user's record.  Note: These user properties are unrelated to the [Jira properties](https://confluence.atlassian.com/cloud/add-data-to-users-for-advanced-functions-jira-applications-only-744721649.html) that can be set through the UI.
     * @summary Get user property
     * @param propertyKey The key of the user&#39;s property.
     * @param accountId The accountId of the user, which uniquely identifies the user across all Atlassian products. For example, _384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192_. Required, unless &#x60;username&#x60; or &#x60;userKey&#x60; is specified.
     * @param userKey This parameter has been deprecated due to privacy changes. Use &#x60;accountId&#x60; instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.  The key of the user. Required, unless &#x60;accountId&#x60; or &#x60;username&#x60; is specified.
     * @param username This parameter has been deprecated due to privacy changes. Use &#x60;accountId&#x60; instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.  The username of the user. Required, unless &#x60;accountId&#x60; or &#x60;userKey&#x60; is specified.
     */
    public comAtlassianJiraRestV2UserpropertyUserPropertyResourceGetUserPropertyGet (propertyKey: string, accountId?: string, userKey?: string, username?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: EntityProperty;  }> {
        const localVarPath = this.basePath + '/api/3/user/properties/{propertyKey}'
            .replace('{' + 'propertyKey' + '}', encodeURIComponent(String(propertyKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'propertyKey' is not null or undefined
        if (propertyKey === null || propertyKey === undefined) {
            throw new Error('Required parameter propertyKey was null or undefined when calling comAtlassianJiraRestV2UserpropertyUserPropertyResourceGetUserPropertyGet.');
        }

        if (accountId !== undefined) {
            localVarQueryParameters['accountId'] = ObjectSerializer.serialize(accountId, "string");
        }

        if (userKey !== undefined) {
            localVarQueryParameters['userKey'] = ObjectSerializer.serialize(userKey, "string");
        }

        if (username !== undefined) {
            localVarQueryParameters['username'] = ObjectSerializer.serialize(username, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: EntityProperty;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "EntityProperty");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Returns the keys of all properties for a user.  **[Permissions](#permissions) required:**  *   _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg), to access the property keys on any user. *   Access to Jira, to access the calling user's property keys.  Note: These user properties are unrelated to the [Jira properties](https://confluence.atlassian.com/x/8YxjL) that can be set through the UI.
     * @summary Get user property keys
     * @param accountId The accountId of the user, which uniquely identifies the user across all Atlassian products. For example, _384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192_. Required, unless &#x60;username&#x60; or &#x60;userKey&#x60; is specified.
     * @param userKey This parameter has been deprecated due to privacy changes. Use &#x60;accountId&#x60; instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.  The key of the user. Required, unless &#x60;accountId&#x60; or &#x60;username&#x60; is specified.
     * @param username This parameter has been deprecated due to privacy changes. Use &#x60;accountId&#x60; instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.  The username of the user. Required, unless &#x60;accountId&#x60; or &#x60;userKey&#x60; is specified.
     */
    public comAtlassianJiraRestV2UserpropertyUserPropertyResourceGetUserPropertyKeysGet (accountId?: string, userKey?: string, username?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body: PropertyKeys;  }> {
        const localVarPath = this.basePath + '/api/3/user/properties';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        if (accountId !== undefined) {
            localVarQueryParameters['accountId'] = ObjectSerializer.serialize(accountId, "string");
        }

        if (userKey !== undefined) {
            localVarQueryParameters['userKey'] = ObjectSerializer.serialize(userKey, "string");
        }

        if (username !== undefined) {
            localVarQueryParameters['username'] = ObjectSerializer.serialize(username, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: PropertyKeys;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "PropertyKeys");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Sets the value of a user's property. Use this resource to store custom data against a user.  **[Permissions](#permissions) required:**  *   _Administer Jira_ [global permission](https://confluence.atlassian.com/x/x4dKLg), to set a property on any user. *   Access to Jira, to set a property on the calling user's record.  Note: These user properties are unrelated to the [Jira properties](https://confluence.atlassian.com/x/8YxjL) that can be set in Jira.
     * @summary Set user property
     * @param propertyKey The key of the user&#39;s property. The maximum length is 255 characters.
     * @param body
     * @param accountId The accountId of the user, which uniquely identifies the user across all Atlassian products. For example, _384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192_. Required, unless &#x60;username&#x60; or &#x60;userKey&#x60; is specified.
     * @param userKey This parameter has been deprecated due to privacy changes. Use &#x60;accountId&#x60; instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.  The key of the user. Required, unless &#x60;accountId&#x60; or &#x60;username&#x60; is specified.
     * @param username This parameter has been deprecated due to privacy changes. Use &#x60;accountId&#x60; instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.  The username of the user. Required, unless &#x60;accountId&#x60; or &#x60;userKey&#x60; is specified.
     */
    public comAtlassianJiraRestV2UserpropertyUserPropertyResourceSetUserPropertyPut (propertyKey: string, body: any, accountId?: string, userKey?: string, username?: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/api/3/user/properties/{propertyKey}'
            .replace('{' + 'propertyKey' + '}', encodeURIComponent(String(propertyKey)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'propertyKey' is not null or undefined
        if (propertyKey === null || propertyKey === undefined) {
            throw new Error('Required parameter propertyKey was null or undefined when calling comAtlassianJiraRestV2UserpropertyUserPropertyResourceSetUserPropertyPut.');
        }

        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling comAtlassianJiraRestV2UserpropertyUserPropertyResourceSetUserPropertyPut.');
        }

        if (accountId !== undefined) {
            localVarQueryParameters['accountId'] = ObjectSerializer.serialize(accountId, "string");
        }

        if (userKey !== undefined) {
            localVarQueryParameters['userKey'] = ObjectSerializer.serialize(userKey, "string");
        }

        if (username !== undefined) {
            localVarQueryParameters['username'] = ObjectSerializer.serialize(username, "string");
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(body, "any")
        };

        this.authentications.OAuth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
